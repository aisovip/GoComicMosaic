{
  "version": 3,
  "sources": ["../../@videojs/http-streaming/dist/videojs-http-streaming.es.js"],
  "sourcesContent": ["/*! @name @videojs/http-streaming @version 3.17.0 @license Apache-2.0 */\nimport _extends from '@babel/runtime/helpers/extends';\nimport document from 'global/document';\nimport window$1 from 'global/window';\nimport _resolveUrl from '@videojs/vhs-utils/es/resolve-url.js';\nimport videojs from 'video.js';\nimport { Parser } from 'm3u8-parser';\nimport { isAudioCodec, translateLegacyCodec, codecsFromDefault, parseCodecs, getMimeForCodec, DEFAULT_VIDEO_CODEC, DEFAULT_AUDIO_CODEC, browserSupportsCodec, muxerSupportsCodec } from '@videojs/vhs-utils/es/codecs.js';\nimport { simpleTypeFromSourceType } from '@videojs/vhs-utils/es/media-types.js';\nexport { simpleTypeFromSourceType } from '@videojs/vhs-utils/es/media-types.js';\nimport { isArrayBufferView, concatTypedArrays, stringToBytes, toUint8 } from '@videojs/vhs-utils/es/byte-helpers';\nimport { generateSidxKey, parseUTCTiming, parse, addSidxSegmentsToPlaylist } from 'mpd-parser';\nimport parseSidx from 'mux.js/lib/tools/parse-sidx';\nimport { getId3Offset } from '@videojs/vhs-utils/es/id3-helpers';\nimport { detectContainerForBytes, isLikelyFmp4MediaSegment } from '@videojs/vhs-utils/es/containers';\nimport { ONE_SECOND_IN_TS } from 'mux.js/lib/utils/clock';\n\n/**\n * @file resolve-url.js - Handling how URLs are resolved and manipulated\n */\nconst resolveUrl = _resolveUrl;\n/**\n * If the xhr request was redirected, return the responseURL, otherwise,\n * return the original url.\n *\n * @api private\n *\n * @param  {string} url - an url being requested\n * @param  {XMLHttpRequest} req - xhr request result\n *\n * @return {string}\n */\n\nconst resolveManifestRedirect = (url, req) => {\n  // To understand how the responseURL below is set and generated:\n  // - https://fetch.spec.whatwg.org/#concept-response-url\n  // - https://fetch.spec.whatwg.org/#atomic-http-redirect-handling\n  if (req && req.responseURL && url !== req.responseURL) {\n    return req.responseURL;\n  }\n\n  return url;\n};\n\nconst logger = source => {\n  if (videojs.log.debug) {\n    return videojs.log.debug.bind(videojs, 'VHS:', `${source} >`);\n  }\n\n  return function () {};\n};\n\n/**\n * Provides a compatibility layer between Video.js 7 and 8 API changes for VHS.\n */\n/**\n * Delegates to videojs.obj.merge (Video.js 8) or\n * videojs.mergeOptions (Video.js 7).\n */\n\nfunction merge(...args) {\n  const context = videojs.obj || videojs;\n  const fn = context.merge || context.mergeOptions;\n  return fn.apply(context, args);\n}\n/**\n * Delegates to videojs.time.createTimeRanges (Video.js 8) or\n * videojs.createTimeRanges (Video.js 7).\n */\n\nfunction createTimeRanges(...args) {\n  const context = videojs.time || videojs;\n  const fn = context.createTimeRanges || context.createTimeRanges;\n  return fn.apply(context, args);\n}\n/**\n * Converts provided buffered ranges to a descriptive string\n *\n * @param {TimeRanges} buffered - received buffered time ranges\n *\n * @return {string} - descriptive string\n */\n\nfunction bufferedRangesToString(buffered) {\n  if (buffered.length === 0) {\n    return 'Buffered Ranges are empty';\n  }\n\n  let bufferedRangesStr = 'Buffered Ranges: \\n';\n\n  for (let i = 0; i < buffered.length; i++) {\n    const start = buffered.start(i);\n    const end = buffered.end(i);\n    bufferedRangesStr += `${start} --> ${end}. Duration (${end - start})\\n`;\n  }\n\n  return bufferedRangesStr;\n}\n\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\nconst TIME_FUDGE_FACTOR = 1 / 30; // Comparisons between time values such as current time and the end of the buffered range\n// can be misleading because of precision differences or when the current media has poorly\n// aligned audio and video, which can cause values to be slightly off from what you would\n// expect. This value is what we consider to be safe to use in such comparisons to account\n// for these scenarios.\n\nconst SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;\n\nconst filterRanges = function (timeRanges, predicate) {\n  const results = [];\n  let i;\n\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n\n  return createTimeRanges(results);\n};\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n *\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @return {TimeRanges} a new TimeRanges object\n */\n\n\nconst findRange = function (buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - SAFE_TIME_DELTA <= time && end + SAFE_TIME_DELTA >= time;\n  });\n};\n/**\n * Returns the TimeRanges that begin later than the specified time.\n *\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @return {TimeRanges} a new TimeRanges object.\n */\n\nconst findNextRange = function (timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n/**\n * Returns gaps within a list of TimeRanges\n *\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\n\nconst findGaps = function (buffered) {\n  if (buffered.length < 2) {\n    return createTimeRanges();\n  }\n\n  const ranges = [];\n\n  for (let i = 1; i < buffered.length; i++) {\n    const start = buffered.end(i - 1);\n    const end = buffered.start(i);\n    ranges.push([start, end]);\n  }\n\n  return createTimeRanges(ranges);\n};\n/**\n * Calculate the intersection of two TimeRanges\n *\n * @param {TimeRanges} bufferA\n * @param {TimeRanges} bufferB\n * @return {TimeRanges} The interesection of `bufferA` with `bufferB`\n */\n\nconst bufferIntersection = function (bufferA, bufferB) {\n  let start = null;\n  let end = null;\n  let arity = 0;\n  const extents = [];\n  const ranges = [];\n\n  if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) {\n    return createTimeRanges();\n  } // Handle the case where we have both buffers and create an\n  // intersection of the two\n\n\n  let count = bufferA.length; // A) Gather up all start and end times\n\n  while (count--) {\n    extents.push({\n      time: bufferA.start(count),\n      type: 'start'\n    });\n    extents.push({\n      time: bufferA.end(count),\n      type: 'end'\n    });\n  }\n\n  count = bufferB.length;\n\n  while (count--) {\n    extents.push({\n      time: bufferB.start(count),\n      type: 'start'\n    });\n    extents.push({\n      time: bufferB.end(count),\n      type: 'end'\n    });\n  } // B) Sort them by time\n\n\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  }); // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++; // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--; // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    } // F) Record overlapping ranges\n\n\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n\n  return createTimeRanges(ranges);\n};\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @return {string} a human readable string\n */\n\nconst printableRange = range => {\n  const strArr = [];\n\n  if (!range || !range.length) {\n    return '';\n  }\n\n  for (let i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n\n  return strArr.join(', ');\n};\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\n\nconst timeUntilRebuffer = function (buffered, currentTime, playbackRate = 1) {\n  const bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n/**\n * Converts a TimeRanges object into an array representation\n *\n * @param {TimeRanges} timeRanges\n * @return {Array}\n */\n\nconst timeRangesToArray = timeRanges => {\n  const timeRangesList = [];\n\n  for (let i = 0; i < timeRanges.length; i++) {\n    timeRangesList.push({\n      start: timeRanges.start(i),\n      end: timeRanges.end(i)\n    });\n  }\n\n  return timeRangesList;\n};\n/**\n * Determines if two time range objects are different.\n *\n * @param {TimeRange} a\n *        the first time range object to check\n *\n * @param {TimeRange} b\n *        the second time range object to check\n *\n * @return {Boolean}\n *         Whether the time range objects differ\n */\n\nconst isRangeDifferent = function (a, b) {\n  // same object\n  if (a === b) {\n    return false;\n  } // one or the other is undefined\n\n\n  if (!a && b || !b && a) {\n    return true;\n  } // length is different\n\n\n  if (a.length !== b.length) {\n    return true;\n  } // see if any start/end pair is different\n\n\n  for (let i = 0; i < a.length; i++) {\n    if (a.start(i) !== b.start(i) || a.end(i) !== b.end(i)) {\n      return true;\n    }\n  } // if the length and every pair is the same\n  // this is the same time range\n\n\n  return false;\n};\nconst lastBufferedEnd = function (a) {\n  if (!a || !a.length || !a.end) {\n    return;\n  }\n\n  return a.end(a.length - 1);\n};\n/**\n * A utility function to add up the amount of time in a timeRange\n * after a specified startTime.\n * ie:[[0, 10], [20, 40], [50, 60]] with a startTime 0\n *     would return 40 as there are 40s seconds after 0 in the timeRange\n *\n * @param {TimeRange} range\n *        The range to check against\n * @param {number} startTime\n *        The time in the time range that you should start counting from\n *\n * @return {number}\n *          The number of seconds in the buffer passed the specified time.\n */\n\nconst timeAheadOf = function (range, startTime) {\n  let time = 0;\n\n  if (!range || !range.length) {\n    return time;\n  }\n\n  for (let i = 0; i < range.length; i++) {\n    const start = range.start(i);\n    const end = range.end(i); // startTime is after this range entirely\n\n    if (startTime > end) {\n      continue;\n    } // startTime is within this range\n\n\n    if (startTime > start && startTime <= end) {\n      time += end - startTime;\n      continue;\n    } // startTime is before this range.\n\n\n    time += end - start;\n  }\n\n  return time;\n};\n\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n/**\n * Get the duration of a segment, with special cases for\n * llhls segments that do not have a duration yet.\n *\n * @param {Object} playlist\n *        the playlist that the segment belongs to.\n * @param {Object} segment\n *        the segment to get a duration for.\n *\n * @return {number}\n *          the segment duration\n */\n\nconst segmentDurationWithParts = (playlist, segment) => {\n  // if this isn't a preload segment\n  // then we will have a segment duration that is accurate.\n  if (!segment.preload) {\n    return segment.duration;\n  } // otherwise we have to add up parts and preload hints\n  // to get an up to date duration.\n\n\n  let result = 0;\n  (segment.parts || []).forEach(function (p) {\n    result += p.duration;\n  }); // for preload hints we have to use partTargetDuration\n  // as they won't even have a duration yet.\n\n  (segment.preloadHints || []).forEach(function (p) {\n    if (p.type === 'PART') {\n      result += playlist.partTargetDuration;\n    }\n  });\n  return result;\n};\n/**\n * A function to get a combined list of parts and segments with durations\n * and indexes.\n *\n * @param {Playlist} playlist the playlist to get the list for.\n *\n * @return {Array} The part/segment list.\n */\n\nconst getPartsAndSegments = playlist => (playlist.segments || []).reduce((acc, segment, si) => {\n  if (segment.parts) {\n    segment.parts.forEach(function (part, pi) {\n      acc.push({\n        duration: part.duration,\n        segmentIndex: si,\n        partIndex: pi,\n        part,\n        segment\n      });\n    });\n  } else {\n    acc.push({\n      duration: segment.duration,\n      segmentIndex: si,\n      partIndex: null,\n      segment,\n      part: null\n    });\n  }\n\n  return acc;\n}, []);\nconst getLastParts = media => {\n  const lastSegment = media.segments && media.segments.length && media.segments[media.segments.length - 1];\n  return lastSegment && lastSegment.parts || [];\n};\nconst getKnownPartCount = ({\n  preloadSegment\n}) => {\n  if (!preloadSegment) {\n    return;\n  }\n\n  const {\n    parts,\n    preloadHints\n  } = preloadSegment;\n  let partCount = (preloadHints || []).reduce((count, hint) => count + (hint.type === 'PART' ? 1 : 0), 0);\n  partCount += parts && parts.length ? parts.length : 0;\n  return partCount;\n};\n/**\n * Get the number of seconds to delay from the end of a\n * live playlist.\n *\n * @param {Playlist} main the main playlist\n * @param {Playlist} media the media playlist\n * @return {number} the hold back in seconds.\n */\n\nconst liveEdgeDelay = (main, media) => {\n  if (media.endList) {\n    return 0;\n  } // dash suggestedPresentationDelay trumps everything\n\n\n  if (main && main.suggestedPresentationDelay) {\n    return main.suggestedPresentationDelay;\n  }\n\n  const hasParts = getLastParts(media).length > 0; // look for \"part\" delays from ll-hls first\n\n  if (hasParts && media.serverControl && media.serverControl.partHoldBack) {\n    return media.serverControl.partHoldBack;\n  } else if (hasParts && media.partTargetDuration) {\n    return media.partTargetDuration * 3; // finally look for full segment delays\n  } else if (media.serverControl && media.serverControl.holdBack) {\n    return media.serverControl.holdBack;\n  } else if (media.targetDuration) {\n    return media.targetDuration * 3;\n  }\n\n  return 0;\n};\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nconst backwardDuration = function (playlist, endSequence) {\n  let result = 0;\n  let i = endSequence - playlist.mediaSequence; // if a start time is available for segment immediately following\n  // the interval, use it\n\n  let segment = playlist.segments[i]; // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start,\n        precise: true\n      };\n    }\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n\n  while (i--) {\n    segment = playlist.segments[i];\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: result + segment.end,\n        precise: true\n      };\n    }\n\n    result += segmentDurationWithParts(playlist, segment);\n\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: result + segment.start,\n        precise: true\n      };\n    }\n  }\n\n  return {\n    result,\n    precise: false\n  };\n};\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {number} endSequence the mediaSequence to stop walking on\n */\n\n\nconst forwardDuration = function (playlist, endSequence) {\n  let result = 0;\n  let segment;\n  let i = endSequence - playlist.mediaSequence; // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n\n    result += segmentDurationWithParts(playlist, segment);\n\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  } // indicate we didn't find a useful duration estimate\n\n\n  return {\n    result: -1,\n    precise: false\n  };\n};\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {number} the duration between the first available segment\n  * and end index.\n  */\n\n\nconst intervalDuration = function (playlist, endSequence, expired) {\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  } // do a backward walk to estimate the duration\n\n\n  const backward = backwardDuration(playlist, endSequence);\n\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  } // walk forward to see if a precise duration estimate can be made\n  // that way\n\n\n  const forward = forwardDuration(playlist, endSequence);\n\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  } // return the less-precise, playlist-based duration estimate\n\n\n  return backward.result + expired;\n};\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {number} the duration between the start index and end\n  * index.\n  */\n\n\nconst duration = function (playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n\n  if (typeof expired !== 'number') {\n    expired = 0;\n  } // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n\n\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    } // duration should be Infinity for live playlists\n\n\n    if (!playlist.endList) {\n      return window$1.Infinity;\n    }\n  } // calculate the total duration based on the segment durations\n\n\n  return intervalDuration(playlist, endSequence, expired);\n};\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Array} options.durationList list to iterate over for durations.\n  * @param {number} options.defaultDuration duration to use for elements before or after the durationList\n  * @param {number} options.startIndex partsAndSegments index to start\n  * @param {number} options.endIndex partsAndSegments index to end.\n  * @return {number} the number of seconds between startIndex and endIndex\n  */\n\nconst sumDurations = function ({\n  defaultDuration,\n  durationList,\n  startIndex,\n  endIndex\n}) {\n  let durations = 0;\n\n  if (startIndex > endIndex) {\n    [startIndex, endIndex] = [endIndex, startIndex];\n  }\n\n  if (startIndex < 0) {\n    for (let i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += defaultDuration;\n    }\n\n    startIndex = 0;\n  }\n\n  for (let i = startIndex; i < endIndex; i++) {\n    durations += durationList[i].duration;\n  }\n\n  return durations;\n};\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n *                        This takes into account the value of liveEdgePadding.\n *                        Setting liveEdgePadding to 0 is equivalent to setting this to false.\n * @param {number} liveEdgePadding a number indicating how far from the end of the playlist we should be in seconds.\n *                 If this is provided, it is used in the safe live end calculation.\n *                 Setting useSafeLiveEnd=false or liveEdgePadding=0 are equivalent.\n *                 Corresponds to suggestedPresentationDelay in DASH manifests.\n * @return {number} the end time of playlist\n * @function playlistEnd\n */\n\nconst playlistEnd = function (playlist, expired, useSafeLiveEnd, liveEdgePadding) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n\n  if (expired === null) {\n    return null;\n  }\n\n  expired = expired || 0;\n  let lastSegmentEndTime = intervalDuration(playlist, playlist.mediaSequence + playlist.segments.length, expired);\n\n  if (useSafeLiveEnd) {\n    liveEdgePadding = typeof liveEdgePadding === 'number' ? liveEdgePadding : liveEdgeDelay(null, playlist);\n    lastSegmentEndTime -= liveEdgePadding;\n  } // don't return a time less than zero\n\n\n  return Math.max(0, lastSegmentEndTime);\n};\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @param {number} liveEdgePadding how far from the end of the playlist we should be in seconds.\n  *        Corresponds to suggestedPresentationDelay in DASH manifests.\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\n\nconst seekable = function (playlist, expired, liveEdgePadding) {\n  const useSafeLiveEnd = true;\n  const seekableStart = expired || 0;\n  let seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd, liveEdgePadding);\n\n  if (seekableEnd === null) {\n    return createTimeRanges();\n  } // Clamp seekable end since it can not be less than the seekable start\n\n\n  if (seekableEnd < seekableStart) {\n    seekableEnd = seekableStart;\n  }\n\n  return createTimeRanges(seekableStart, seekableEnd);\n};\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} options.playlist the media playlist to query\n * @param {number} options.currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {number} options.startTime the time when the segment/part starts\n * @param {number} options.startingSegmentIndex the segment index to start looking at.\n * @param {number?} [options.startingPartIndex] the part index to look at within the segment.\n *\n * @return {Object} an object with partIndex, segmentIndex, and startTime.\n */\n\nconst getMediaInfoForTime = function ({\n  playlist,\n  currentTime,\n  startingSegmentIndex,\n  startingPartIndex,\n  startTime,\n  exactManifestTimings\n}) {\n  let time = currentTime - startTime;\n  const partsAndSegments = getPartsAndSegments(playlist);\n  let startIndex = 0;\n\n  for (let i = 0; i < partsAndSegments.length; i++) {\n    const partAndSegment = partsAndSegments[i];\n\n    if (startingSegmentIndex !== partAndSegment.segmentIndex) {\n      continue;\n    } // skip this if part index does not match.\n\n\n    if (typeof startingPartIndex === 'number' && typeof partAndSegment.partIndex === 'number' && startingPartIndex !== partAndSegment.partIndex) {\n      continue;\n    }\n\n    startIndex = i;\n    break;\n  }\n\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (let i = startIndex - 1; i >= 0; i--) {\n        const partAndSegment = partsAndSegments[i];\n        time += partAndSegment.duration;\n\n        if (exactManifestTimings) {\n          if (time < 0) {\n            continue;\n          }\n        } else if (time + TIME_FUDGE_FACTOR <= 0) {\n          continue;\n        }\n\n        return {\n          partIndex: partAndSegment.partIndex,\n          segmentIndex: partAndSegment.segmentIndex,\n          startTime: startTime - sumDurations({\n            defaultDuration: playlist.targetDuration,\n            durationList: partsAndSegments,\n            startIndex,\n            endIndex: i\n          })\n        };\n      }\n    } // We were unable to find a good segment within the playlist\n    // so select the first segment\n\n\n    return {\n      partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,\n      segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,\n      startTime: currentTime\n    };\n  } // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n\n\n  if (startIndex < 0) {\n    for (let i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n\n      if (time < 0) {\n        return {\n          partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,\n          segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,\n          startTime: currentTime\n        };\n      }\n    }\n\n    startIndex = 0;\n  } // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n\n\n  for (let i = startIndex; i < partsAndSegments.length; i++) {\n    const partAndSegment = partsAndSegments[i];\n    time -= partAndSegment.duration;\n    const canUseFudgeFactor = partAndSegment.duration > TIME_FUDGE_FACTOR;\n    const isExactlyAtTheEnd = time === 0;\n    const isExtremelyCloseToTheEnd = canUseFudgeFactor && time + TIME_FUDGE_FACTOR >= 0;\n\n    if (isExactlyAtTheEnd || isExtremelyCloseToTheEnd) {\n      // 1) We are exactly at the end of the current segment.\n      // 2) We are extremely close to the end of the current segment (The difference is less than  1 / 30).\n      //    We may encounter this situation when\n      //    we don't have exact match between segment duration info in the manifest and the actual duration of the segment\n      //    For example:\n      //    We appended 3 segments 10 seconds each, meaning we should have 30 sec buffered,\n      //    but we the actual buffered is 29.99999\n      //\n      // In both cases:\n      // if we passed current time -> it means that we already played current segment\n      // if we passed buffered.end -> it means that this segment is already loaded and buffered\n      // we should select the next segment if we have one:\n      if (i !== partsAndSegments.length - 1) {\n        continue;\n      }\n    }\n\n    if (exactManifestTimings) {\n      if (time > 0) {\n        continue;\n      }\n    } else if (time - TIME_FUDGE_FACTOR >= 0) {\n      continue;\n    }\n\n    return {\n      partIndex: partAndSegment.partIndex,\n      segmentIndex: partAndSegment.segmentIndex,\n      startTime: startTime + sumDurations({\n        defaultDuration: playlist.targetDuration,\n        durationList: partsAndSegments,\n        startIndex,\n        endIndex: i\n      })\n    };\n  } // We are out of possible candidates so load the last one...\n\n\n  return {\n    segmentIndex: partsAndSegments[partsAndSegments.length - 1].segmentIndex,\n    partIndex: partsAndSegments[partsAndSegments.length - 1].partIndex,\n    startTime: currentTime\n  };\n};\n/**\n * Check whether the playlist is excluded or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is excluded or not\n * @function isExcluded\n */\n\nconst isExcluded = function (playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n/**\n * Check whether the playlist is compatible with current playback configuration or has\n * been excluded permanently for being incompatible.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is incompatible or not\n * @function isIncompatible\n */\n\nconst isIncompatible = function (playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil === Infinity;\n};\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\n\nconst isEnabled = function (playlist) {\n  const excluded = isExcluded(playlist);\n  return !playlist.disabled && !excluded;\n};\n/**\n * Check whether the playlist has been manually disabled through the representations api.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is disabled manually or not\n * @function isDisabled\n */\n\nconst isDisabled = function (playlist) {\n  return playlist.disabled;\n};\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {boolean} true if it's an AES encrypted HLS stream\n */\n\nconst isAes = function (media) {\n  for (let i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {string} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\n\nconst hasAttribute = function (attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {number} segmentDuration\n *        Duration of requested segment\n * @param {number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\n\nconst estimateSegmentRequestTime = function (segmentDuration, bandwidth, playlist, bytesReceived = 0) {\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n\n  const size = segmentDuration * playlist.attributes.BANDWIDTH;\n  return (size - bytesReceived * 8) / bandwidth;\n};\n/*\n * Returns whether the current playlist is the lowest rendition\n *\n * @return {Boolean} true if on lowest rendition\n */\n\nconst isLowestEnabledRendition = (main, media) => {\n  if (main.playlists.length === 1) {\n    return true;\n  }\n\n  const currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n  return main.playlists.filter(playlist => {\n    if (!isEnabled(playlist)) {\n      return false;\n    }\n\n    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n  }).length === 0;\n};\nconst playlistMatch = (a, b) => {\n  // both playlits are null\n  // or only one playlist is non-null\n  // no match\n  if (!a && !b || !a && b || a && !b) {\n    return false;\n  } // playlist objects are the same, match\n\n\n  if (a === b) {\n    return true;\n  } // first try to use id as it should be the most\n  // accurate\n\n\n  if (a.id && b.id && a.id === b.id) {\n    return true;\n  } // next try to use reslovedUri as it should be the\n  // second most accurate.\n\n\n  if (a.resolvedUri && b.resolvedUri && a.resolvedUri === b.resolvedUri) {\n    return true;\n  } // finally try to use uri as it should be accurate\n  // but might miss a few cases for relative uris\n\n\n  if (a.uri && b.uri && a.uri === b.uri) {\n    return true;\n  }\n\n  return false;\n};\n\nconst someAudioVariant = function (main, callback) {\n  const AUDIO = main && main.mediaGroups && main.mediaGroups.AUDIO || {};\n  let found = false;\n\n  for (const groupName in AUDIO) {\n    for (const label in AUDIO[groupName]) {\n      found = callback(AUDIO[groupName][label]);\n\n      if (found) {\n        break;\n      }\n    }\n\n    if (found) {\n      break;\n    }\n  }\n\n  return !!found;\n};\n\nconst isAudioOnly = main => {\n  // we are audio only if we have no main playlists but do\n  // have media group playlists.\n  if (!main || !main.playlists || !main.playlists.length) {\n    // without audio variants or playlists this\n    // is not an audio only main.\n    const found = someAudioVariant(main, variant => variant.playlists && variant.playlists.length || variant.uri);\n    return found;\n  } // if every playlist has only an audio codec it is audio only\n\n\n  for (let i = 0; i < main.playlists.length; i++) {\n    const playlist = main.playlists[i];\n    const CODECS = playlist.attributes && playlist.attributes.CODECS; // all codecs are audio, this is an audio playlist.\n\n    if (CODECS && CODECS.split(',').every(c => isAudioCodec(c))) {\n      continue;\n    } // playlist is in an audio group it is audio only\n\n\n    const found = someAudioVariant(main, variant => playlistMatch(playlist, variant));\n\n    if (found) {\n      continue;\n    } // if we make it here this playlist isn't audio and we\n    // are not audio only\n\n\n    return false;\n  } // if we make it past every playlist without returning, then\n  // this is an audio only playlist.\n\n\n  return true;\n}; // exports\n\nvar Playlist = {\n  liveEdgeDelay,\n  duration,\n  seekable,\n  getMediaInfoForTime,\n  isEnabled,\n  isDisabled,\n  isExcluded,\n  isIncompatible,\n  playlistEnd,\n  isAes,\n  hasAttribute,\n  estimateSegmentRequestTime,\n  isLowestEnabledRendition,\n  isAudioOnly,\n  playlistMatch,\n  segmentDurationWithParts\n};\n\nconst {\n  log\n} = videojs;\nconst createPlaylistID = (index, uri) => {\n  return `${index}-${uri}`;\n}; // default function for creating a group id\n\nconst groupID = (type, group, label) => {\n  return `placeholder-uri-${type}-${group}-${label}`;\n};\n/**\n * Parses a given m3u8 playlist\n *\n * @param {Function} [onwarn]\n *        a function to call when the parser triggers a warning event.\n * @param {Function} [oninfo]\n *        a function to call when the parser triggers an info event.\n * @param {string} manifestString\n *        The downloaded manifest string\n * @param {Object[]} [customTagParsers]\n *        An array of custom tag parsers for the m3u8-parser instance\n * @param {Object[]} [customTagMappers]\n *        An array of custom tag mappers for the m3u8-parser instance\n * @param {boolean} [llhls]\n *        Whether to keep ll-hls features in the manifest after parsing.\n * @return {Object}\n *         The manifest object\n */\n\nconst parseManifest = ({\n  onwarn,\n  oninfo,\n  manifestString,\n  customTagParsers = [],\n  customTagMappers = [],\n  llhls\n}) => {\n  const parser = new Parser();\n\n  if (onwarn) {\n    parser.on('warn', onwarn);\n  }\n\n  if (oninfo) {\n    parser.on('info', oninfo);\n  }\n\n  customTagParsers.forEach(customParser => parser.addParser(customParser));\n  customTagMappers.forEach(mapper => parser.addTagMapper(mapper));\n  parser.push(manifestString);\n  parser.end();\n  const manifest = parser.manifest; // remove llhls features from the parsed manifest\n  // if we don't want llhls support.\n\n  if (!llhls) {\n    ['preloadSegment', 'skip', 'serverControl', 'renditionReports', 'partInf', 'partTargetDuration'].forEach(function (k) {\n      if (manifest.hasOwnProperty(k)) {\n        delete manifest[k];\n      }\n    });\n\n    if (manifest.segments) {\n      manifest.segments.forEach(function (segment) {\n        ['parts', 'preloadHints'].forEach(function (k) {\n          if (segment.hasOwnProperty(k)) {\n            delete segment[k];\n          }\n        });\n      });\n    }\n  }\n\n  if (!manifest.targetDuration) {\n    let targetDuration = 10;\n\n    if (manifest.segments && manifest.segments.length) {\n      targetDuration = manifest.segments.reduce((acc, s) => Math.max(acc, s.duration), 0);\n    }\n\n    if (onwarn) {\n      onwarn({\n        message: `manifest has no targetDuration defaulting to ${targetDuration}`\n      });\n    }\n\n    manifest.targetDuration = targetDuration;\n  }\n\n  const parts = getLastParts(manifest);\n\n  if (parts.length && !manifest.partTargetDuration) {\n    const partTargetDuration = parts.reduce((acc, p) => Math.max(acc, p.duration), 0);\n\n    if (onwarn) {\n      onwarn({\n        message: `manifest has no partTargetDuration defaulting to ${partTargetDuration}`\n      });\n      log.error('LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.');\n    }\n\n    manifest.partTargetDuration = partTargetDuration;\n  }\n\n  return manifest;\n};\n/**\n * Loops through all supported media groups in main and calls the provided\n * callback for each group\n *\n * @param {Object} main\n *        The parsed main manifest object\n * @param {Function} callback\n *        Callback to call for each media group\n */\n\nconst forEachMediaGroup = (main, callback) => {\n  if (!main.mediaGroups) {\n    return;\n  }\n\n  ['AUDIO', 'SUBTITLES'].forEach(mediaType => {\n    if (!main.mediaGroups[mediaType]) {\n      return;\n    }\n\n    for (const groupKey in main.mediaGroups[mediaType]) {\n      for (const labelKey in main.mediaGroups[mediaType][groupKey]) {\n        const mediaProperties = main.mediaGroups[mediaType][groupKey][labelKey];\n        callback(mediaProperties, mediaType, groupKey, labelKey);\n      }\n    }\n  });\n};\n/**\n * Adds properties and attributes to the playlist to keep consistent functionality for\n * playlists throughout VHS.\n *\n * @param {Object} config\n *        Arguments object\n * @param {Object} config.playlist\n *        The media playlist\n * @param {string} [config.uri]\n *        The uri to the media playlist (if media playlist is not from within a main\n *        playlist)\n * @param {string} id\n *        ID to use for the playlist\n */\n\nconst setupMediaPlaylist = ({\n  playlist,\n  uri,\n  id\n}) => {\n  playlist.id = id;\n  playlist.playlistErrors_ = 0;\n\n  if (uri) {\n    // For media playlists, m3u8-parser does not have access to a URI, as HLS media\n    // playlists do not contain their own source URI, but one is needed for consistency in\n    // VHS.\n    playlist.uri = uri;\n  } // For HLS main playlists, even though certain attributes MUST be defined, the\n  // stream may still be played without them.\n  // For HLS media playlists, m3u8-parser does not attach an attributes object to the\n  // manifest.\n  //\n  // To avoid undefined reference errors through the project, and make the code easier\n  // to write/read, add an empty attributes object for these cases.\n\n\n  playlist.attributes = playlist.attributes || {};\n};\n/**\n * Adds ID, resolvedUri, and attributes properties to each playlist of the main, where\n * necessary. In addition, creates playlist IDs for each playlist and adds playlist ID to\n * playlist references to the playlists array.\n *\n * @param {Object} main\n *        The main playlist\n */\n\nconst setupMediaPlaylists = main => {\n  let i = main.playlists.length;\n\n  while (i--) {\n    const playlist = main.playlists[i];\n    setupMediaPlaylist({\n      playlist,\n      id: createPlaylistID(i, playlist.uri)\n    });\n    playlist.resolvedUri = resolveUrl(main.uri, playlist.uri);\n    main.playlists[playlist.id] = playlist; // URI reference added for backwards compatibility\n\n    main.playlists[playlist.uri] = playlist; // Although the spec states an #EXT-X-STREAM-INF tag MUST have a BANDWIDTH attribute,\n    // the stream can be played without it. Although an attributes property may have been\n    // added to the playlist to prevent undefined references, issue a warning to fix the\n    // manifest.\n\n    if (!playlist.attributes.BANDWIDTH) {\n      log.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n    }\n  }\n};\n/**\n * Adds resolvedUri properties to each media group.\n *\n * @param {Object} main\n *        The main playlist\n */\n\nconst resolveMediaGroupUris = main => {\n  forEachMediaGroup(main, properties => {\n    if (properties.uri) {\n      properties.resolvedUri = resolveUrl(main.uri, properties.uri);\n    }\n  });\n};\n/**\n * Creates a main playlist wrapper to insert a sole media playlist into.\n *\n * @param {Object} media\n *        Media playlist\n * @param {string} uri\n *        The media URI\n *\n * @return {Object}\n *         main playlist\n */\n\nconst mainForMedia = (media, uri) => {\n  const id = createPlaylistID(0, uri);\n  const main = {\n    mediaGroups: {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    },\n    uri: window$1.location.href,\n    resolvedUri: window$1.location.href,\n    playlists: [{\n      uri,\n      id,\n      resolvedUri: uri,\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      attributes: {}\n    }]\n  }; // set up ID reference\n\n  main.playlists[id] = main.playlists[0]; // URI reference added for backwards compatibility\n\n  main.playlists[uri] = main.playlists[0];\n  return main;\n};\n/**\n * Does an in-place update of the main manifest to add updated playlist URI references\n * as well as other properties needed by VHS that aren't included by the parser.\n *\n * @param {Object} main\n *        main manifest object\n * @param {string} uri\n *        The source URI\n * @param {function} createGroupID\n *        A function to determine how to create the groupID for mediaGroups\n */\n\nconst addPropertiesToMain = (main, uri, createGroupID = groupID) => {\n  main.uri = uri;\n\n  for (let i = 0; i < main.playlists.length; i++) {\n    if (!main.playlists[i].uri) {\n      // Set up phony URIs for the playlists since playlists are referenced by their URIs\n      // throughout VHS, but some formats (e.g., DASH) don't have external URIs\n      // TODO: consider adding dummy URIs in mpd-parser\n      const phonyUri = `placeholder-uri-${i}`;\n      main.playlists[i].uri = phonyUri;\n    }\n  }\n\n  const audioOnlyMain = isAudioOnly(main);\n  forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\n    // add a playlist array under properties\n    if (!properties.playlists || !properties.playlists.length) {\n      // If the manifest is audio only and this media group does not have a uri, check\n      // if the media group is located in the main list of playlists. If it is, don't add\n      // placeholder properties as it shouldn't be considered an alternate audio track.\n      if (audioOnlyMain && mediaType === 'AUDIO' && !properties.uri) {\n        for (let i = 0; i < main.playlists.length; i++) {\n          const p = main.playlists[i];\n\n          if (p.attributes && p.attributes.AUDIO && p.attributes.AUDIO === groupKey) {\n            return;\n          }\n        }\n      }\n\n      properties.playlists = [_extends({}, properties)];\n    }\n\n    properties.playlists.forEach(function (p, i) {\n      const groupId = createGroupID(mediaType, groupKey, labelKey, p);\n      const id = createPlaylistID(i, groupId);\n\n      if (p.uri) {\n        p.resolvedUri = p.resolvedUri || resolveUrl(main.uri, p.uri);\n      } else {\n        // DEPRECATED, this has been added to prevent a breaking change.\n        // previously we only ever had a single media group playlist, so\n        // we mark the first playlist uri without prepending the index as we used to\n        // ideally we would do all of the playlists the same way.\n        p.uri = i === 0 ? groupId : id; // don't resolve a placeholder uri to an absolute url, just use\n        // the placeholder again\n\n        p.resolvedUri = p.uri;\n      }\n\n      p.id = p.id || id; // add an empty attributes object, all playlists are\n      // expected to have this.\n\n      p.attributes = p.attributes || {}; // setup ID and URI references (URI for backwards compatibility)\n\n      main.playlists[p.id] = p;\n      main.playlists[p.uri] = p;\n    });\n  });\n  setupMediaPlaylists(main);\n  resolveMediaGroupUris(main);\n};\n\nclass DateRangesStorage {\n  constructor() {\n    this.offset_ = null;\n    this.pendingDateRanges_ = new Map();\n    this.processedDateRanges_ = new Map();\n  }\n\n  setOffset(segments = []) {\n    // already set\n    if (this.offset_ !== null) {\n      return;\n    } // no segment to process\n\n\n    if (!segments.length) {\n      return;\n    }\n\n    const [firstSegment] = segments; // no program date time\n\n    if (firstSegment.programDateTime === undefined) {\n      return;\n    } // Set offset as ProgramDateTime for the very first segment of the very first playlist load:\n\n\n    this.offset_ = firstSegment.programDateTime / 1000;\n  }\n\n  setPendingDateRanges(dateRanges = []) {\n    if (!dateRanges.length) {\n      return;\n    }\n\n    const [dateRange] = dateRanges;\n    const startTime = dateRange.startDate.getTime();\n    this.trimProcessedDateRanges_(startTime);\n    this.pendingDateRanges_ = dateRanges.reduce((map, pendingDateRange) => {\n      map.set(pendingDateRange.id, pendingDateRange);\n      return map;\n    }, new Map());\n  }\n\n  processDateRange(dateRange) {\n    this.pendingDateRanges_.delete(dateRange.id);\n    this.processedDateRanges_.set(dateRange.id, dateRange);\n  }\n\n  getDateRangesToProcess() {\n    if (this.offset_ === null) {\n      return [];\n    }\n\n    const dateRangeClasses = {};\n    const dateRangesToProcess = [];\n    this.pendingDateRanges_.forEach((dateRange, id) => {\n      if (this.processedDateRanges_.has(id)) {\n        return;\n      }\n\n      dateRange.startTime = dateRange.startDate.getTime() / 1000 - this.offset_;\n\n      dateRange.processDateRange = () => this.processDateRange(dateRange);\n\n      dateRangesToProcess.push(dateRange);\n\n      if (!dateRange.class) {\n        return;\n      }\n\n      if (dateRangeClasses[dateRange.class]) {\n        const length = dateRangeClasses[dateRange.class].push(dateRange);\n        dateRange.classListIndex = length - 1;\n      } else {\n        dateRangeClasses[dateRange.class] = [dateRange];\n        dateRange.classListIndex = 0;\n      }\n    });\n\n    for (const dateRange of dateRangesToProcess) {\n      const classList = dateRangeClasses[dateRange.class] || [];\n\n      if (dateRange.endDate) {\n        dateRange.endTime = dateRange.endDate.getTime() / 1000 - this.offset_;\n      } else if (dateRange.endOnNext && classList[dateRange.classListIndex + 1]) {\n        dateRange.endTime = classList[dateRange.classListIndex + 1].startTime;\n      } else if (dateRange.duration) {\n        dateRange.endTime = dateRange.startTime + dateRange.duration;\n      } else if (dateRange.plannedDuration) {\n        dateRange.endTime = dateRange.startTime + dateRange.plannedDuration;\n      } else {\n        dateRange.endTime = dateRange.startTime;\n      }\n    }\n\n    return dateRangesToProcess;\n  }\n\n  trimProcessedDateRanges_(startTime) {\n    const copy = new Map(this.processedDateRanges_);\n    copy.forEach((dateRange, id) => {\n      if (dateRange.startDate.getTime() < startTime) {\n        this.processedDateRanges_.delete(id);\n      }\n    });\n  }\n\n}\n\nconst QUOTA_EXCEEDED_ERR = 22;\nconst getStreamingNetworkErrorMetadata = ({\n  requestType,\n  request,\n  error,\n  parseFailure\n}) => {\n  const isBadStatus = request.status < 200 || request.status > 299;\n  const isFailure = request.status >= 400 && request.status <= 499;\n  const errorMetadata = {\n    uri: request.uri,\n    requestType\n  };\n  const isBadStatusOrParseFailure = isBadStatus && !isFailure || parseFailure;\n\n  if (error && isFailure) {\n    // copy original error and add to the metadata.\n    errorMetadata.error = _extends({}, error);\n    errorMetadata.errorType = videojs.Error.NetworkRequestFailed;\n  } else if (request.aborted) {\n    errorMetadata.errorType = videojs.Error.NetworkRequestAborted;\n  } else if (request.timedout) {\n    errorMetadata.erroType = videojs.Error.NetworkRequestTimeout;\n  } else if (isBadStatusOrParseFailure) {\n    const errorType = parseFailure ? videojs.Error.NetworkBodyParserFailed : videojs.Error.NetworkBadStatus;\n    errorMetadata.errorType = errorType;\n    errorMetadata.status = request.status;\n    errorMetadata.headers = request.headers;\n  }\n\n  return errorMetadata;\n};\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\nconst logFn$1 = logger('CodecUtils');\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n *\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\n\nconst getCodecs = function (media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  const mediaAttributes = media.attributes || {};\n\n  if (mediaAttributes.CODECS) {\n    return parseCodecs(mediaAttributes.CODECS);\n  }\n};\nconst isMaat = (main, media) => {\n  const mediaAttributes = media.attributes || {};\n  return main && main.mediaGroups && main.mediaGroups.AUDIO && mediaAttributes.AUDIO && main.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n};\nconst isMuxed = (main, media) => {\n  if (!isMaat(main, media)) {\n    return true;\n  }\n\n  const mediaAttributes = media.attributes || {};\n  const audioGroup = main.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n\n  for (const groupId in audioGroup) {\n    // If an audio group has a URI (the case for HLS, as HLS will use external playlists),\n    // or there are listed playlists (the case for DASH, as the manifest will have already\n    // provided all of the details necessary to generate the audio playlist, as opposed to\n    // HLS' externally requested playlists), then the content is demuxed.\n    if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {\n      return true;\n    }\n  }\n\n  return false;\n};\nconst unwrapCodecList = function (codecList) {\n  const codecs = {};\n  codecList.forEach(({\n    mediaType,\n    type,\n    details\n  }) => {\n    codecs[mediaType] = codecs[mediaType] || [];\n    codecs[mediaType].push(translateLegacyCodec(`${type}${details}`));\n  });\n  Object.keys(codecs).forEach(function (mediaType) {\n    if (codecs[mediaType].length > 1) {\n      logFn$1(`multiple ${mediaType} codecs found as attributes: ${codecs[mediaType].join(', ')}. Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.`);\n      codecs[mediaType] = null;\n      return;\n    }\n\n    codecs[mediaType] = codecs[mediaType][0];\n  });\n  return codecs;\n};\nconst codecCount = function (codecObj) {\n  let count = 0;\n\n  if (codecObj.audio) {\n    count++;\n  }\n\n  if (codecObj.video) {\n    count++;\n  }\n\n  return count;\n};\n/**\n * Calculates the codec strings for a working configuration of\n * SourceBuffers to play variant streams in a main playlist. If\n * there is no possible working configuration, an empty object will be\n * returned.\n *\n * @param main {Object} the m3u8 object for the main playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Object} the codec strings.\n *\n * @private\n */\n\nconst codecsForPlaylist = function (main, media) {\n  const mediaAttributes = media.attributes || {};\n  const codecInfo = unwrapCodecList(getCodecs(media) || []); // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n\n  if (isMaat(main, media) && !codecInfo.audio) {\n    if (!isMuxed(main, media)) {\n      // It is possible for codecs to be specified on the audio media group playlist but\n      // not on the rendition playlist. This is mostly the case for DASH, where audio and\n      // video are always separate (and separately specified).\n      const defaultCodecs = unwrapCodecList(codecsFromDefault(main, mediaAttributes.AUDIO) || []);\n\n      if (defaultCodecs.audio) {\n        codecInfo.audio = defaultCodecs.audio;\n      }\n    }\n  }\n\n  return codecInfo;\n};\n\nconst {\n  EventTarget: EventTarget$1\n} = videojs;\n\nconst addLLHLSQueryDirectives = (uri, media) => {\n  if (media.endList || !media.serverControl) {\n    return uri;\n  }\n\n  const parameters = {};\n\n  if (media.serverControl.canBlockReload) {\n    const {\n      preloadSegment\n    } = media; // next msn is a zero based value, length is not.\n\n    let nextMSN = media.mediaSequence + media.segments.length; // If preload segment has parts then it is likely\n    // that we are going to request a part of that preload segment.\n    // the logic below is used to determine that.\n\n    if (preloadSegment) {\n      const parts = preloadSegment.parts || []; // _HLS_part is a zero based index\n\n      const nextPart = getKnownPartCount(media) - 1; // if nextPart is > -1 and not equal to just the\n      // length of parts, then we know we had part preload hints\n      // and we need to add the _HLS_part= query\n\n      if (nextPart > -1 && nextPart !== parts.length - 1) {\n        // add existing parts to our preload hints\n        // eslint-disable-next-line\n        parameters._HLS_part = nextPart;\n      } // this if statement makes sure that we request the msn\n      // of the preload segment if:\n      // 1. the preload segment had parts (and was not yet a full segment)\n      //    but was added to our segments array\n      // 2. the preload segment had preload hints for parts that are not in\n      //    the manifest yet.\n      // in all other cases we want the segment after the preload segment\n      // which will be given by using media.segments.length because it is 1 based\n      // rather than 0 based.\n\n\n      if (nextPart > -1 || parts.length) {\n        nextMSN--;\n      }\n    } // add _HLS_msn= in front of any _HLS_part query\n    // eslint-disable-next-line\n\n\n    parameters._HLS_msn = nextMSN;\n  }\n\n  if (media.serverControl && media.serverControl.canSkipUntil) {\n    // add _HLS_skip= infront of all other queries.\n    // eslint-disable-next-line\n    parameters._HLS_skip = media.serverControl.canSkipDateranges ? 'v2' : 'YES';\n  }\n\n  if (Object.keys(parameters).length) {\n    const parsedUri = new window$1.URL(uri);\n    ['_HLS_skip', '_HLS_msn', '_HLS_part'].forEach(function (name) {\n      if (!parameters.hasOwnProperty(name)) {\n        return;\n      }\n\n      parsedUri.searchParams.set(name, parameters[name]);\n    });\n    uri = parsedUri.toString();\n  }\n\n  return uri;\n};\n/**\n * Returns a new segment object with properties and\n * the parts array merged.\n *\n * @param {Object} a the old segment\n * @param {Object} b the new segment\n *\n * @return {Object} the merged segment\n */\n\n\nconst updateSegment = (a, b) => {\n  if (!a) {\n    return b;\n  }\n\n  const result = merge(a, b); // if only the old segment has preload hints\n  // and the new one does not, remove preload hints.\n\n  if (a.preloadHints && !b.preloadHints) {\n    delete result.preloadHints;\n  } // if only the old segment has parts\n  // then the parts are no longer valid\n\n\n  if (a.parts && !b.parts) {\n    delete result.parts; // if both segments have parts\n    // copy part propeties from the old segment\n    // to the new one.\n  } else if (a.parts && b.parts) {\n    for (let i = 0; i < b.parts.length; i++) {\n      if (a.parts && a.parts[i]) {\n        result.parts[i] = merge(a.parts[i], b.parts[i]);\n      }\n    }\n  } // set skipped to false for segments that have\n  // have had information merged from the old segment.\n\n\n  if (!a.skipped && b.skipped) {\n    result.skipped = false;\n  } // set preload to false for segments that have\n  // had information added in the new segment.\n\n\n  if (a.preload && !b.preload) {\n    result.preload = false;\n  }\n\n  return result;\n};\n/**\n * Returns a new array of segments that is the result of merging\n * properties from an older list of segments onto an updated\n * list. No properties on the updated playlist will be ovewritten.\n *\n * @param {Array} original the outdated list of segments\n * @param {Array} update the updated list of segments\n * @param {number=} offset the index of the first update\n * segment in the original segment list. For non-live playlists,\n * this should always be zero and does not need to be\n * specified. For live playlists, it should be the difference\n * between the media sequence numbers in the original and updated\n * playlists.\n * @return {Array} a list of merged segment objects\n */\n\nconst updateSegments = (original, update, offset) => {\n  const oldSegments = original.slice();\n  const newSegments = update.slice();\n  offset = offset || 0;\n  const result = [];\n  let currentMap;\n\n  for (let newIndex = 0; newIndex < newSegments.length; newIndex++) {\n    const oldSegment = oldSegments[newIndex + offset];\n    const newSegment = newSegments[newIndex];\n\n    if (oldSegment) {\n      currentMap = oldSegment.map || currentMap;\n      result.push(updateSegment(oldSegment, newSegment));\n    } else {\n      // carry over map to new segment if it is missing\n      if (currentMap && !newSegment.map) {\n        newSegment.map = currentMap;\n      }\n\n      result.push(newSegment);\n    }\n  }\n\n  return result;\n};\nconst resolveSegmentUris = (segment, baseUri) => {\n  // preloadSegment will not have a uri at all\n  // as the segment isn't actually in the manifest yet, only parts\n  if (!segment.resolvedUri && segment.uri) {\n    segment.resolvedUri = resolveUrl(baseUri, segment.uri);\n  }\n\n  if (segment.key && !segment.key.resolvedUri) {\n    segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);\n  }\n\n  if (segment.map && !segment.map.resolvedUri) {\n    segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);\n  }\n\n  if (segment.map && segment.map.key && !segment.map.key.resolvedUri) {\n    segment.map.key.resolvedUri = resolveUrl(baseUri, segment.map.key.uri);\n  }\n\n  if (segment.parts && segment.parts.length) {\n    segment.parts.forEach(p => {\n      if (p.resolvedUri) {\n        return;\n      }\n\n      p.resolvedUri = resolveUrl(baseUri, p.uri);\n    });\n  }\n\n  if (segment.preloadHints && segment.preloadHints.length) {\n    segment.preloadHints.forEach(p => {\n      if (p.resolvedUri) {\n        return;\n      }\n\n      p.resolvedUri = resolveUrl(baseUri, p.uri);\n    });\n  }\n};\n\nconst getAllSegments = function (media) {\n  const segments = media.segments || [];\n  const preloadSegment = media.preloadSegment; // a preloadSegment with only preloadHints is not currently\n  // a usable segment, only include a preloadSegment that has\n  // parts.\n\n  if (preloadSegment && preloadSegment.parts && preloadSegment.parts.length) {\n    // if preloadHints has a MAP that means that the\n    // init segment is going to change. We cannot use any of the parts\n    // from this preload segment.\n    if (preloadSegment.preloadHints) {\n      for (let i = 0; i < preloadSegment.preloadHints.length; i++) {\n        if (preloadSegment.preloadHints[i].type === 'MAP') {\n          return segments;\n        }\n      }\n    } // set the duration for our preload segment to target duration.\n\n\n    preloadSegment.duration = media.targetDuration;\n    preloadSegment.preload = true;\n    segments.push(preloadSegment);\n  }\n\n  return segments;\n}; // consider the playlist unchanged if the playlist object is the same or\n// the number of segments is equal, the media sequence number is unchanged,\n// and this playlist hasn't become the end of the playlist\n\n\nconst isPlaylistUnchanged = (a, b) => a === b || a.segments && b.segments && a.segments.length === b.segments.length && a.endList === b.endList && a.mediaSequence === b.mediaSequence && a.preloadSegment === b.preloadSegment;\n/**\n  * Returns a new main playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original main playlist, null is returned.\n  *\n  * @param {Object} main a parsed main M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * main playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\n\nconst updateMain$1 = (main, newMedia, unchangedCheck = isPlaylistUnchanged) => {\n  const result = merge(main, {});\n  const oldMedia = result.playlists[newMedia.id];\n\n  if (!oldMedia) {\n    return null;\n  }\n\n  if (unchangedCheck(oldMedia, newMedia)) {\n    return null;\n  }\n\n  newMedia.segments = getAllSegments(newMedia);\n  const mergedPlaylist = merge(oldMedia, newMedia); // always use the new media's preload segment\n\n  if (mergedPlaylist.preloadSegment && !newMedia.preloadSegment) {\n    delete mergedPlaylist.preloadSegment;\n  } // if the update could overlap existing segment information, merge the two segment lists\n\n\n  if (oldMedia.segments) {\n    if (newMedia.skip) {\n      newMedia.segments = newMedia.segments || []; // add back in objects for skipped segments, so that we merge\n      // old properties into the new segments\n\n      for (let i = 0; i < newMedia.skip.skippedSegments; i++) {\n        newMedia.segments.unshift({\n          skipped: true\n        });\n      }\n    }\n\n    mergedPlaylist.segments = updateSegments(oldMedia.segments, newMedia.segments, newMedia.mediaSequence - oldMedia.mediaSequence);\n  } // resolve any segment URIs to prevent us from having to do it later\n\n\n  mergedPlaylist.segments.forEach(segment => {\n    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);\n  }); // TODO Right now in the playlists array there are two references to each playlist, one\n  // that is referenced by index, and one by URI. The index reference may no longer be\n  // necessary.\n\n  for (let i = 0; i < result.playlists.length; i++) {\n    if (result.playlists[i].id === newMedia.id) {\n      result.playlists[i] = mergedPlaylist;\n    }\n  }\n\n  result.playlists[newMedia.id] = mergedPlaylist; // URI reference added for backwards compatibility\n\n  result.playlists[newMedia.uri] = mergedPlaylist; // update media group playlist references.\n\n  forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\n    if (!properties.playlists) {\n      return;\n    }\n\n    for (let i = 0; i < properties.playlists.length; i++) {\n      if (newMedia.id === properties.playlists[i].id) {\n        properties.playlists[i] = mergedPlaylist;\n      }\n    }\n  });\n  return result;\n};\n/**\n * Calculates the time to wait before refreshing a live playlist\n *\n * @param {Object} media\n *        The current media\n * @param {boolean} update\n *        True if there were any updates from the last refresh, false otherwise\n * @return {number}\n *         The time in ms to wait before refreshing the live playlist\n */\n\nconst refreshDelay = (media, update) => {\n  const segments = media.segments || [];\n  const lastSegment = segments[segments.length - 1];\n  const lastPart = lastSegment && lastSegment.parts && lastSegment.parts[lastSegment.parts.length - 1];\n  const lastDuration = lastPart && lastPart.duration || lastSegment && lastSegment.duration;\n\n  if (update && lastDuration) {\n    return lastDuration * 1000;\n  } // if the playlist is unchanged since the last reload or last segment duration\n  // cannot be determined, try again after half the target duration\n\n\n  return (media.partTargetDuration || media.targetDuration || 10) * 500;\n};\n\nconst playlistMetadataPayload = (playlists, type, isLive) => {\n  if (!playlists) {\n    return;\n  }\n\n  const renditions = [];\n  playlists.forEach(playlist => {\n    // we need attributes to populate rendition data.\n    if (!playlist.attributes) {\n      return;\n    }\n\n    const {\n      BANDWIDTH,\n      RESOLUTION,\n      CODECS\n    } = playlist.attributes;\n    renditions.push({\n      id: playlist.id,\n      bandwidth: BANDWIDTH,\n      resolution: RESOLUTION,\n      codecs: CODECS\n    });\n  });\n  return {\n    type,\n    isLive,\n    renditions\n  };\n};\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {string|Object} src url or object of manifest\n * @param {boolean} withCredentials the withCredentials xhr option\n * @class\n */\n\n\nclass PlaylistLoader extends EventTarget$1 {\n  constructor(src, vhs, options = {}) {\n    super();\n\n    if (!src) {\n      throw new Error('A non-empty playlist URL or object is required');\n    }\n\n    this.logger_ = logger('PlaylistLoader');\n    const {\n      withCredentials = false\n    } = options;\n    this.src = src;\n    this.vhs_ = vhs;\n    this.withCredentials = withCredentials;\n    this.addDateRangesToTextTrack_ = options.addDateRangesToTextTrack;\n    const vhsOptions = vhs.options_;\n    this.customTagParsers = vhsOptions && vhsOptions.customTagParsers || [];\n    this.customTagMappers = vhsOptions && vhsOptions.customTagMappers || [];\n    this.llhls = vhsOptions && vhsOptions.llhls;\n    this.dateRangesStorage_ = new DateRangesStorage(); // initialize the loader state\n\n    this.state = 'HAVE_NOTHING'; // live playlist staleness timeout\n\n    this.handleMediaupdatetimeout_ = this.handleMediaupdatetimeout_.bind(this);\n    this.on('mediaupdatetimeout', this.handleMediaupdatetimeout_);\n    this.on('loadedplaylist', this.handleLoadedPlaylist_.bind(this));\n  }\n\n  handleLoadedPlaylist_() {\n    const mediaPlaylist = this.media();\n\n    if (!mediaPlaylist) {\n      return;\n    }\n\n    this.dateRangesStorage_.setOffset(mediaPlaylist.segments);\n    this.dateRangesStorage_.setPendingDateRanges(mediaPlaylist.dateRanges);\n    const availableDateRanges = this.dateRangesStorage_.getDateRangesToProcess();\n\n    if (!availableDateRanges.length || !this.addDateRangesToTextTrack_) {\n      return;\n    }\n\n    this.addDateRangesToTextTrack_(availableDateRanges);\n  }\n\n  handleMediaupdatetimeout_() {\n    if (this.state !== 'HAVE_METADATA') {\n      // only refresh the media playlist if no other activity is going on\n      return;\n    }\n\n    const media = this.media();\n    let uri = resolveUrl(this.main.uri, media.uri);\n\n    if (this.llhls) {\n      uri = addLLHLSQueryDirectives(uri, media);\n    }\n\n    this.state = 'HAVE_CURRENT_METADATA';\n    this.request = this.vhs_.xhr({\n      uri,\n      withCredentials: this.withCredentials,\n      requestType: 'hls-playlist'\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      }\n\n      if (error) {\n        return this.playlistRequestError(this.request, this.media(), 'HAVE_METADATA');\n      }\n\n      this.haveMetadata({\n        playlistString: this.request.responseText,\n        url: this.media().uri,\n        id: this.media().id\n      });\n    });\n  }\n\n  playlistRequestError(xhr, playlist, startingState) {\n    const {\n      uri,\n      id\n    } = playlist; // any in-flight request is now finished\n\n    this.request = null;\n\n    if (startingState) {\n      this.state = startingState;\n    }\n\n    this.error = {\n      playlist: this.main.playlists[id],\n      status: xhr.status,\n      message: `HLS playlist request error at URL: ${uri}.`,\n      responseText: xhr.responseText,\n      code: xhr.status >= 500 ? 4 : 2,\n      metadata: getStreamingNetworkErrorMetadata({\n        requestType: xhr.requestType,\n        request: xhr,\n        error: xhr.error\n      })\n    };\n    this.trigger('error');\n  }\n\n  parseManifest_({\n    url,\n    manifestString\n  }) {\n    try {\n      const parsed = parseManifest({\n        onwarn: ({\n          message\n        }) => this.logger_(`m3u8-parser warn for ${url}: ${message}`),\n        oninfo: ({\n          message\n        }) => this.logger_(`m3u8-parser info for ${url}: ${message}`),\n        manifestString,\n        customTagParsers: this.customTagParsers,\n        customTagMappers: this.customTagMappers,\n        llhls: this.llhls\n      });\n      /**\n       * VHS does not support switching between variants with and without audio and video\n       * so we want to filter out audio-only variants when variants with video and(or) audio are also detected.\n       */\n\n      if (!parsed.playlists || !parsed.playlists.length) {\n        return parsed;\n      }\n\n      this.excludeAudioOnlyVariants(parsed.playlists);\n      return parsed;\n    } catch (error) {\n      this.error = error;\n      this.error.metadata = {\n        errorType: videojs.Error.StreamingHlsPlaylistParserError,\n        error\n      };\n    }\n  }\n\n  excludeAudioOnlyVariants(playlists) {\n    // helper function\n    const hasVideo = playlist => {\n      const attributes = playlist.attributes || {};\n      const {\n        width,\n        height\n      } = attributes.RESOLUTION || {};\n\n      if (width && height) {\n        return true;\n      } // parse codecs string from playlist attributes\n\n\n      const codecsList = getCodecs(playlist) || []; // unwrap list\n\n      const codecsInfo = unwrapCodecList(codecsList);\n      return Boolean(codecsInfo.video);\n    };\n\n    if (playlists.some(hasVideo)) {\n      playlists.forEach(playlist => {\n        if (!hasVideo(playlist)) {\n          playlist.excludeUntil = Infinity;\n        }\n      });\n    }\n  }\n  /**\n   * Update the playlist loader's state in response to a new or updated playlist.\n   *\n   * @param {string} [playlistString]\n   *        Playlist string (if playlistObject is not provided)\n   * @param {Object} [playlistObject]\n   *        Playlist object (if playlistString is not provided)\n   * @param {string} url\n   *        URL of playlist\n   * @param {string} id\n   *        ID to use for playlist\n   */\n\n\n  haveMetadata({\n    playlistString,\n    playlistObject,\n    url,\n    id\n  }) {\n    // any in-flight request is now finished\n    this.request = null;\n    this.state = 'HAVE_METADATA';\n    const metadata = {\n      playlistInfo: {\n        type: 'media',\n        uri: url\n      }\n    };\n    this.trigger({\n      type: 'playlistparsestart',\n      metadata\n    });\n    const playlist = playlistObject || this.parseManifest_({\n      url,\n      manifestString: playlistString\n    });\n    playlist.lastRequest = Date.now();\n    setupMediaPlaylist({\n      playlist,\n      uri: url,\n      id\n    }); // merge this playlist into the main manifest\n\n    const update = updateMain$1(this.main, playlist);\n    this.targetDuration = playlist.partTargetDuration || playlist.targetDuration;\n    this.pendingMedia_ = null;\n\n    if (update) {\n      this.main = update;\n      this.media_ = this.main.playlists[id];\n    } else {\n      this.trigger('playlistunchanged');\n    }\n\n    this.updateMediaUpdateTimeout_(refreshDelay(this.media(), !!update));\n    metadata.parsedPlaylist = playlistMetadataPayload(this.main.playlists, metadata.playlistInfo.type, !this.media_.endList);\n    this.trigger({\n      type: 'playlistparsecomplete',\n      metadata\n    });\n    this.trigger('loadedplaylist');\n  }\n  /**\n    * Abort any outstanding work and clean up.\n    */\n\n\n  dispose() {\n    this.trigger('dispose');\n    this.stopRequest();\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    window$1.clearTimeout(this.finalRenditionTimeout);\n    this.dateRangesStorage_ = new DateRangesStorage();\n    this.off();\n  }\n\n  stopRequest() {\n    if (this.request) {\n      const oldRequest = this.request;\n      this.request = null;\n      oldRequest.onreadystatechange = null;\n      oldRequest.abort();\n    }\n  }\n  /**\n    * When called without any arguments, returns the currently\n    * active media playlist. When called with a single argument,\n    * triggers the playlist loader to asynchronously switch to the\n    * specified media playlist. Calling this method while the\n    * loader is in the HAVE_NOTHING causes an error to be emitted\n    * but otherwise has no effect.\n    *\n    * @param {Object=} playlist the parsed media playlist\n    * object to switch to\n    * @param {boolean=} shouldDelay whether we should delay the request by half target duration\n    *\n    * @return {Playlist} the current loaded media\n    */\n\n\n  media(playlist, shouldDelay) {\n    // getter\n    if (!playlist) {\n      return this.media_;\n    } // setter\n\n\n    if (this.state === 'HAVE_NOTHING') {\n      throw new Error('Cannot switch media playlist from ' + this.state);\n    } // find the playlist object if the target playlist has been\n    // specified by URI\n\n\n    if (typeof playlist === 'string') {\n      if (!this.main.playlists[playlist]) {\n        throw new Error('Unknown playlist URI: ' + playlist);\n      }\n\n      playlist = this.main.playlists[playlist];\n    }\n\n    window$1.clearTimeout(this.finalRenditionTimeout);\n\n    if (shouldDelay) {\n      const delay = (playlist.partTargetDuration || playlist.targetDuration) / 2 * 1000 || 5 * 1000;\n      this.finalRenditionTimeout = window$1.setTimeout(this.media.bind(this, playlist, false), delay);\n      return;\n    }\n\n    const startingState = this.state;\n    const mediaChange = !this.media_ || playlist.id !== this.media_.id;\n    const mainPlaylistRef = this.main.playlists[playlist.id]; // switch to fully loaded playlists immediately\n\n    if (mainPlaylistRef && mainPlaylistRef.endList || // handle the case of a playlist object (e.g., if using vhs-json with a resolved\n    // media playlist or, for the case of demuxed audio, a resolved audio media group)\n    playlist.endList && playlist.segments.length) {\n      // abort outstanding playlist requests\n      if (this.request) {\n        this.request.onreadystatechange = null;\n        this.request.abort();\n        this.request = null;\n      }\n\n      this.state = 'HAVE_METADATA';\n      this.media_ = playlist; // trigger media change if the active media has been updated\n\n      if (mediaChange) {\n        this.trigger('mediachanging');\n\n        if (startingState === 'HAVE_MAIN_MANIFEST') {\n          // The initial playlist was a main manifest, and the first media selected was\n          // also provided (in the form of a resolved playlist object) as part of the\n          // source object (rather than just a URL). Therefore, since the media playlist\n          // doesn't need to be requested, loadedmetadata won't trigger as part of the\n          // normal flow, and needs an explicit trigger here.\n          this.trigger('loadedmetadata');\n        } else {\n          this.trigger('mediachange');\n        }\n      }\n\n      return;\n    } // We update/set the timeout here so that live playlists\n    // that are not a media change will \"start\" the loader as expected.\n    // We expect that this function will start the media update timeout\n    // cycle again. This also prevents a playlist switch failure from\n    // causing us to stall during live.\n\n\n    this.updateMediaUpdateTimeout_(refreshDelay(playlist, true)); // switching to the active playlist is a no-op\n\n    if (!mediaChange) {\n      return;\n    }\n\n    this.state = 'SWITCHING_MEDIA'; // there is already an outstanding playlist request\n\n    if (this.request) {\n      if (playlist.resolvedUri === this.request.url) {\n        // requesting to switch to the same playlist multiple times\n        // has no effect after the first\n        return;\n      }\n\n      this.request.onreadystatechange = null;\n      this.request.abort();\n      this.request = null;\n    } // request the new playlist\n\n\n    if (this.media_) {\n      this.trigger('mediachanging');\n    }\n\n    this.pendingMedia_ = playlist;\n    const metadata = {\n      playlistInfo: {\n        type: 'media',\n        uri: playlist.uri\n      }\n    };\n    this.trigger({\n      type: 'playlistrequeststart',\n      metadata\n    });\n    this.request = this.vhs_.xhr({\n      uri: playlist.resolvedUri,\n      withCredentials: this.withCredentials,\n      requestType: 'hls-playlist'\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      }\n\n      playlist.lastRequest = Date.now();\n      playlist.resolvedUri = resolveManifestRedirect(playlist.resolvedUri, req);\n\n      if (error) {\n        return this.playlistRequestError(this.request, playlist, startingState);\n      }\n\n      this.trigger({\n        type: 'playlistrequestcomplete',\n        metadata\n      });\n      this.haveMetadata({\n        playlistString: req.responseText,\n        url: playlist.uri,\n        id: playlist.id\n      }); // fire loadedmetadata the first time a media playlist is loaded\n\n      if (startingState === 'HAVE_MAIN_MANIFEST') {\n        this.trigger('loadedmetadata');\n      } else {\n        this.trigger('mediachange');\n      }\n    });\n  }\n  /**\n   * pause loading of the playlist\n   */\n\n\n  pause() {\n    if (this.mediaUpdateTimeout) {\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      this.mediaUpdateTimeout = null;\n    }\n\n    this.stopRequest();\n\n    if (this.state === 'HAVE_NOTHING') {\n      // If we pause the loader before any data has been retrieved, its as if we never\n      // started, so reset to an unstarted state.\n      this.started = false;\n    } // Need to restore state now that no activity is happening\n\n\n    if (this.state === 'SWITCHING_MEDIA') {\n      // if the loader was in the process of switching media, it should either return to\n      // HAVE_MAIN_MANIFEST or HAVE_METADATA depending on if the loader has loaded a media\n      // playlist yet. This is determined by the existence of loader.media_\n      if (this.media_) {\n        this.state = 'HAVE_METADATA';\n      } else {\n        this.state = 'HAVE_MAIN_MANIFEST';\n      }\n    } else if (this.state === 'HAVE_CURRENT_METADATA') {\n      this.state = 'HAVE_METADATA';\n    }\n  }\n  /**\n   * start loading of the playlist\n   */\n\n\n  load(shouldDelay) {\n    if (this.mediaUpdateTimeout) {\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      this.mediaUpdateTimeout = null;\n    }\n\n    const media = this.media();\n\n    if (shouldDelay) {\n      const delay = media ? (media.partTargetDuration || media.targetDuration) / 2 * 1000 : 5 * 1000;\n      this.mediaUpdateTimeout = window$1.setTimeout(() => {\n        this.mediaUpdateTimeout = null;\n        this.load();\n      }, delay);\n      return;\n    }\n\n    if (!this.started) {\n      this.start();\n      return;\n    }\n\n    if (media && !media.endList) {\n      this.trigger('mediaupdatetimeout');\n    } else {\n      this.trigger('loadedplaylist');\n    }\n  }\n\n  updateMediaUpdateTimeout_(delay) {\n    if (this.mediaUpdateTimeout) {\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      this.mediaUpdateTimeout = null;\n    } // we only have use mediaupdatetimeout for live playlists.\n\n\n    if (!this.media() || this.media().endList) {\n      return;\n    }\n\n    this.mediaUpdateTimeout = window$1.setTimeout(() => {\n      this.mediaUpdateTimeout = null;\n      this.trigger('mediaupdatetimeout');\n      this.updateMediaUpdateTimeout_(delay);\n    }, delay);\n  }\n  /**\n   * start loading of the playlist\n   */\n\n\n  start() {\n    this.started = true;\n\n    if (typeof this.src === 'object') {\n      // in the case of an entirely constructed manifest object (meaning there's no actual\n      // manifest on a server), default the uri to the page's href\n      if (!this.src.uri) {\n        this.src.uri = window$1.location.href;\n      } // resolvedUri is added on internally after the initial request. Since there's no\n      // request for pre-resolved manifests, add on resolvedUri here.\n\n\n      this.src.resolvedUri = this.src.uri; // Since a manifest object was passed in as the source (instead of a URL), the first\n      // request can be skipped (since the top level of the manifest, at a minimum, is\n      // already available as a parsed manifest object). However, if the manifest object\n      // represents a main playlist, some media playlists may need to be resolved before\n      // the starting segment list is available. Therefore, go directly to setup of the\n      // initial playlist, and let the normal flow continue from there.\n      //\n      // Note that the call to setup is asynchronous, as other sections of VHS may assume\n      // that the first request is asynchronous.\n\n      setTimeout(() => {\n        this.setupInitialPlaylist(this.src);\n      }, 0);\n      return;\n    }\n\n    const metadata = {\n      playlistInfo: {\n        type: 'multivariant',\n        uri: this.src\n      }\n    };\n    this.trigger({\n      type: 'playlistrequeststart',\n      metadata\n    }); // request the specified URL\n\n    this.request = this.vhs_.xhr({\n      uri: this.src,\n      withCredentials: this.withCredentials,\n      requestType: 'hls-playlist'\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      } // clear the loader's request reference\n\n\n      this.request = null;\n\n      if (error) {\n        this.error = {\n          status: req.status,\n          message: `HLS playlist request error at URL: ${this.src}.`,\n          responseText: req.responseText,\n          // MEDIA_ERR_NETWORK\n          code: 2,\n          metadata: getStreamingNetworkErrorMetadata({\n            requestType: req.requestType,\n            request: req,\n            error\n          })\n        };\n\n        if (this.state === 'HAVE_NOTHING') {\n          this.started = false;\n        }\n\n        return this.trigger('error');\n      }\n\n      this.trigger({\n        type: 'playlistrequestcomplete',\n        metadata\n      });\n      this.src = resolveManifestRedirect(this.src, req);\n      this.trigger({\n        type: 'playlistparsestart',\n        metadata\n      });\n      const manifest = this.parseManifest_({\n        manifestString: req.responseText,\n        url: this.src\n      }); // we haven't loaded any variant playlists here so we default to false for isLive.\n\n      metadata.parsedPlaylist = playlistMetadataPayload(manifest.playlists, metadata.playlistInfo.type, false);\n      this.trigger({\n        type: 'playlistparsecomplete',\n        metadata\n      });\n      this.setupInitialPlaylist(manifest);\n    });\n  }\n\n  srcUri() {\n    return typeof this.src === 'string' ? this.src : this.src.uri;\n  }\n  /**\n   * Given a manifest object that's either a main or media playlist, trigger the proper\n   * events and set the state of the playlist loader.\n   *\n   * If the manifest object represents a main playlist, `loadedplaylist` will be\n   * triggered to allow listeners to select a playlist. If none is selected, the loader\n   * will default to the first one in the playlists array.\n   *\n   * If the manifest object represents a media playlist, `loadedplaylist` will be\n   * triggered followed by `loadedmetadata`, as the only available playlist is loaded.\n   *\n   * In the case of a media playlist, a main playlist object wrapper with one playlist\n   * will be created so that all logic can handle playlists in the same fashion (as an\n   * assumed manifest object schema).\n   *\n   * @param {Object} manifest\n   *        The parsed manifest object\n   */\n\n\n  setupInitialPlaylist(manifest) {\n    this.state = 'HAVE_MAIN_MANIFEST';\n\n    if (manifest.playlists) {\n      this.main = manifest;\n      addPropertiesToMain(this.main, this.srcUri()); // If the initial main playlist has playlists wtih segments already resolved,\n      // then resolve URIs in advance, as they are usually done after a playlist request,\n      // which may not happen if the playlist is resolved.\n\n      manifest.playlists.forEach(playlist => {\n        playlist.segments = getAllSegments(playlist);\n        playlist.segments.forEach(segment => {\n          resolveSegmentUris(segment, playlist.resolvedUri);\n        });\n      });\n      this.trigger('loadedplaylist');\n\n      if (!this.request) {\n        // no media playlist was specifically selected so start\n        // from the first listed one\n        this.media(this.main.playlists[0]);\n      }\n\n      return;\n    } // In order to support media playlists passed in as vhs-json, the case where the uri\n    // is not provided as part of the manifest should be considered, and an appropriate\n    // default used.\n\n\n    const uri = this.srcUri() || window$1.location.href;\n    this.main = mainForMedia(manifest, uri);\n    this.haveMetadata({\n      playlistObject: manifest,\n      url: uri,\n      id: this.main.playlists[0].id\n    });\n    this.trigger('loadedmetadata');\n  }\n  /**\n   * Updates or deletes a preexisting pathway clone.\n   * Ensures that all playlists related to the old pathway clone are\n   * either updated or deleted.\n   *\n   * @param {Object} clone On update, the pathway clone object for the newly updated pathway clone.\n   *        On delete, the old pathway clone object to be deleted.\n   * @param {boolean} isUpdate True if the pathway is to be updated,\n   *        false if it is meant to be deleted.\n   */\n\n\n  updateOrDeleteClone(clone, isUpdate) {\n    const main = this.main;\n    const pathway = clone.ID;\n    let i = main.playlists.length; // Iterate backwards through the playlist so we can remove playlists if necessary.\n\n    while (i--) {\n      const p = main.playlists[i];\n\n      if (p.attributes['PATHWAY-ID'] === pathway) {\n        const oldPlaylistUri = p.resolvedUri;\n        const oldPlaylistId = p.id; // update the indexed playlist and add new playlists by ID and URI\n\n        if (isUpdate) {\n          const newPlaylistUri = this.createCloneURI_(p.resolvedUri, clone);\n          const newPlaylistId = createPlaylistID(pathway, newPlaylistUri);\n          const attributes = this.createCloneAttributes_(pathway, p.attributes);\n          const updatedPlaylist = this.createClonePlaylist_(p, newPlaylistId, clone, attributes);\n          main.playlists[i] = updatedPlaylist;\n          main.playlists[newPlaylistId] = updatedPlaylist;\n          main.playlists[newPlaylistUri] = updatedPlaylist;\n        } else {\n          // Remove the indexed playlist.\n          main.playlists.splice(i, 1);\n        } // Remove playlists by the old ID and URI.\n\n\n        delete main.playlists[oldPlaylistId];\n        delete main.playlists[oldPlaylistUri];\n      }\n    }\n\n    this.updateOrDeleteCloneMedia(clone, isUpdate);\n  }\n  /**\n   * Updates or deletes media data based on the pathway clone object.\n   * Due to the complexity of the media groups and playlists, in all cases\n   * we remove all of the old media groups and playlists.\n   * On updates, we then create new media groups and playlists based on the\n   * new pathway clone object.\n   *\n   * @param {Object} clone The pathway clone object for the newly updated pathway clone.\n   * @param {boolean} isUpdate True if the pathway is to be updated,\n   *        false if it is meant to be deleted.\n   */\n\n\n  updateOrDeleteCloneMedia(clone, isUpdate) {\n    const main = this.main;\n    const id = clone.ID;\n    ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(mediaType => {\n      if (!main.mediaGroups[mediaType] || !main.mediaGroups[mediaType][id]) {\n        return;\n      }\n\n      for (const groupKey in main.mediaGroups[mediaType]) {\n        // Remove all media playlists for the media group for this pathway clone.\n        if (groupKey === id) {\n          for (const labelKey in main.mediaGroups[mediaType][groupKey]) {\n            const oldMedia = main.mediaGroups[mediaType][groupKey][labelKey];\n            oldMedia.playlists.forEach((p, i) => {\n              const oldMediaPlaylist = main.playlists[p.id];\n              const oldPlaylistId = oldMediaPlaylist.id;\n              const oldPlaylistUri = oldMediaPlaylist.resolvedUri;\n              delete main.playlists[oldPlaylistId];\n              delete main.playlists[oldPlaylistUri];\n            });\n          } // Delete the old media group.\n\n\n          delete main.mediaGroups[mediaType][groupKey];\n        }\n      }\n    }); // Create the new media groups and playlists if there is an update.\n\n    if (isUpdate) {\n      this.createClonedMediaGroups_(clone);\n    }\n  }\n  /**\n   * Given a pathway clone object, clones all necessary playlists.\n   *\n   * @param {Object} clone The pathway clone object.\n   * @param {Object} basePlaylist The original playlist to clone from.\n   */\n\n\n  addClonePathway(clone, basePlaylist = {}) {\n    const main = this.main;\n    const index = main.playlists.length;\n    const uri = this.createCloneURI_(basePlaylist.resolvedUri, clone);\n    const playlistId = createPlaylistID(clone.ID, uri);\n    const attributes = this.createCloneAttributes_(clone.ID, basePlaylist.attributes);\n    const playlist = this.createClonePlaylist_(basePlaylist, playlistId, clone, attributes);\n    main.playlists[index] = playlist; // add playlist by ID and URI\n\n    main.playlists[playlistId] = playlist;\n    main.playlists[uri] = playlist;\n    this.createClonedMediaGroups_(clone);\n  }\n  /**\n   * Given a pathway clone object we create clones of all media.\n   * In this function, all necessary information and updated playlists\n   * are added to the `mediaGroup` object.\n   * Playlists are also added to the `playlists` array so the media groups\n   * will be properly linked.\n   *\n   * @param {Object} clone The pathway clone object.\n   */\n\n\n  createClonedMediaGroups_(clone) {\n    const id = clone.ID;\n    const baseID = clone['BASE-ID'];\n    const main = this.main;\n    ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(mediaType => {\n      // If the media type doesn't exist, or there is already a clone, skip\n      // to the next media type.\n      if (!main.mediaGroups[mediaType] || main.mediaGroups[mediaType][id]) {\n        return;\n      }\n\n      for (const groupKey in main.mediaGroups[mediaType]) {\n        if (groupKey === baseID) {\n          // Create the group.\n          main.mediaGroups[mediaType][id] = {};\n        } else {\n          // There is no need to iterate over label keys in this case.\n          continue;\n        }\n\n        for (const labelKey in main.mediaGroups[mediaType][groupKey]) {\n          const oldMedia = main.mediaGroups[mediaType][groupKey][labelKey];\n          main.mediaGroups[mediaType][id][labelKey] = _extends({}, oldMedia);\n          const newMedia = main.mediaGroups[mediaType][id][labelKey]; // update URIs on the media\n\n          const newUri = this.createCloneURI_(oldMedia.resolvedUri, clone);\n          newMedia.resolvedUri = newUri;\n          newMedia.uri = newUri; // Reset playlists in the new media group.\n\n          newMedia.playlists = []; // Create new playlists in the newly cloned media group.\n\n          oldMedia.playlists.forEach((p, i) => {\n            const oldMediaPlaylist = main.playlists[p.id];\n            const group = groupID(mediaType, id, labelKey);\n            const newPlaylistID = createPlaylistID(id, group); // Check to see if it already exists\n\n            if (oldMediaPlaylist && !main.playlists[newPlaylistID]) {\n              const newMediaPlaylist = this.createClonePlaylist_(oldMediaPlaylist, newPlaylistID, clone);\n              const newPlaylistUri = newMediaPlaylist.resolvedUri;\n              main.playlists[newPlaylistID] = newMediaPlaylist;\n              main.playlists[newPlaylistUri] = newMediaPlaylist;\n            }\n\n            newMedia.playlists[i] = this.createClonePlaylist_(p, newPlaylistID, clone);\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Using the original playlist to be cloned, and the pathway clone object\n   * information, we create a new playlist.\n   *\n   * @param {Object} basePlaylist  The original playlist to be cloned from.\n   * @param {string} id The desired id of the newly cloned playlist.\n   * @param {Object} clone The pathway clone object.\n   * @param {Object} attributes An optional object to populate the `attributes` property in the playlist.\n   *\n   * @return {Object} The combined cloned playlist.\n   */\n\n\n  createClonePlaylist_(basePlaylist, id, clone, attributes) {\n    const uri = this.createCloneURI_(basePlaylist.resolvedUri, clone);\n    const newProps = {\n      resolvedUri: uri,\n      uri,\n      id\n    }; // Remove all segments from previous playlist in the clone.\n\n    if (basePlaylist.segments) {\n      newProps.segments = [];\n    }\n\n    if (attributes) {\n      newProps.attributes = attributes;\n    }\n\n    return merge(basePlaylist, newProps);\n  }\n  /**\n   * Generates an updated URI for a cloned pathway based on the original\n   * pathway's URI and the paramaters from the pathway clone object in the\n   * content steering server response.\n   *\n   * @param {string} baseUri URI to be updated in the cloned pathway.\n   * @param {Object} clone The pathway clone object.\n   *\n   * @return {string} The updated URI for the cloned pathway.\n   */\n\n\n  createCloneURI_(baseURI, clone) {\n    const uri = new URL(baseURI);\n    uri.hostname = clone['URI-REPLACEMENT'].HOST;\n    const params = clone['URI-REPLACEMENT'].PARAMS; // Add params to the cloned URL.\n\n    for (const key of Object.keys(params)) {\n      uri.searchParams.set(key, params[key]);\n    }\n\n    return uri.href;\n  }\n  /**\n   * Helper function to create the attributes needed for the new clone.\n   * This mainly adds the necessary media attributes.\n   *\n   * @param {string} id The pathway clone object ID.\n   * @param {Object} oldAttributes The old attributes to compare to.\n   * @return {Object} The new attributes to add to the playlist.\n   */\n\n\n  createCloneAttributes_(id, oldAttributes) {\n    const attributes = {\n      ['PATHWAY-ID']: id\n    };\n    ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(mediaType => {\n      if (oldAttributes[mediaType]) {\n        attributes[mediaType] = id;\n      }\n    });\n    return attributes;\n  }\n  /**\n   * Returns the key ID set from a playlist\n   *\n   * @param {playlist} playlist to fetch the key ID set from.\n   * @return a Set of 32 digit hex strings that represent the unique keyIds for that playlist.\n   */\n\n\n  getKeyIdSet(playlist) {\n    if (playlist.contentProtection) {\n      const keyIds = new Set();\n\n      for (const keysystem in playlist.contentProtection) {\n        const keyId = playlist.contentProtection[keysystem].attributes.keyId;\n\n        if (keyId) {\n          keyIds.add(keyId.toLowerCase());\n        }\n      }\n\n      return keyIds;\n    }\n  }\n\n}\n\n/**\n * @file xhr.js\n */\n\nconst callbackWrapper = function (request, error, response, callback) {\n  const reqResponse = request.responseType === 'arraybuffer' ? request.response : request.responseText;\n\n  if (!error && reqResponse) {\n    request.responseTime = Date.now();\n    request.roundTripTime = request.responseTime - request.requestTime;\n    request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n\n    if (!request.bandwidth) {\n      request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n    }\n  }\n\n  if (response.headers) {\n    request.responseHeaders = response.headers;\n  } // videojs.xhr now uses a specific code on the error\n  // object to signal that a request has timed out instead\n  // of setting a boolean on the request object\n\n\n  if (error && error.code === 'ETIMEDOUT') {\n    request.timedout = true;\n  } // videojs.xhr no longer considers status codes outside of 200 and 0\n  // (for file uris) to be errors, but the old XHR did, so emulate that\n  // behavior. Status 206 may be used in response to byterange requests.\n\n\n  if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n    error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n  }\n\n  callback(error, request);\n};\n/**\n * Iterates over the request hooks Set and calls them in order\n *\n * @param {Set} hooks the hook Set to iterate over\n * @param {Object} options the request options to pass to the xhr wrapper\n * @return the callback hook function return value, the modified or new options Object.\n */\n\n\nconst callAllRequestHooks = (requestSet, options) => {\n  if (!requestSet || !requestSet.size) {\n    return;\n  }\n\n  let newOptions = options;\n  requestSet.forEach(requestCallback => {\n    newOptions = requestCallback(newOptions);\n  });\n  return newOptions;\n};\n/**\n * Iterates over the response hooks Set and calls them in order.\n *\n * @param {Set} hooks the hook Set to iterate over\n * @param {Object} request the xhr request object\n * @param {Object} error the xhr error object\n * @param {Object} response the xhr response object\n */\n\n\nconst callAllResponseHooks = (responseSet, request, error, response) => {\n  if (!responseSet || !responseSet.size) {\n    return;\n  }\n\n  responseSet.forEach(responseCallback => {\n    responseCallback(request, error, response);\n  });\n};\n\nconst xhrFactory = function () {\n  const xhr = function XhrFunction(options, callback) {\n    // Add a default timeout\n    options = merge({\n      timeout: 45e3\n    }, options); // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n    // TODO: Remove beforeRequest in the next major release.\n\n    const beforeRequest = XhrFunction.beforeRequest || videojs.Vhs.xhr.beforeRequest; // onRequest and onResponse hooks as a Set, at either the player or global level.\n    // TODO: new Set added here for beforeRequest alias. Remove this when beforeRequest is removed.\n\n    const _requestCallbackSet = XhrFunction._requestCallbackSet || videojs.Vhs.xhr._requestCallbackSet || new Set();\n\n    const _responseCallbackSet = XhrFunction._responseCallbackSet || videojs.Vhs.xhr._responseCallbackSet;\n\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      videojs.log.warn('beforeRequest is deprecated, use onRequest instead.');\n\n      _requestCallbackSet.add(beforeRequest);\n    } // Use the standard videojs.xhr() method unless `videojs.Vhs.xhr` has been overriden\n    // TODO: switch back to videojs.Vhs.xhr.name === 'XhrFunction' when we drop IE11\n\n\n    const xhrMethod = videojs.Vhs.xhr.original === true ? videojs.xhr : videojs.Vhs.xhr; // call all registered onRequest hooks, assign new options.\n\n    const beforeRequestOptions = callAllRequestHooks(_requestCallbackSet, options); // Remove the beforeRequest function from the hooks set so stale beforeRequest functions are not called.\n\n    _requestCallbackSet.delete(beforeRequest); // xhrMethod will call XMLHttpRequest.open and XMLHttpRequest.send\n\n\n    const request = xhrMethod(beforeRequestOptions || options, function (error, response) {\n      // call all registered onResponse hooks\n      callAllResponseHooks(_responseCallbackSet, request, error, response);\n      return callbackWrapper(request, error, response, callback);\n    });\n    const originalAbort = request.abort;\n\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n\n    request.uri = options.uri;\n    request.requestType = options.requestType;\n    request.requestTime = Date.now();\n    return request;\n  };\n\n  xhr.original = true;\n  return xhr;\n};\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\n\n\nconst byterangeStr = function (byterange) {\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  let byterangeEnd;\n  const byterangeStart = byterange.offset;\n\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    byterangeEnd = window$1.BigInt(byterange.offset) + window$1.BigInt(byterange.length) - window$1.BigInt(1);\n  } else {\n    byterangeEnd = byterange.offset + byterange.length - 1;\n  }\n\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\n\nconst segmentXhrHeaders = function (segment) {\n  const headers = {};\n\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n\n  return headers;\n};\n\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {number} i the iterator on the range to convert\n * @return {string} the range in string format\n */\n\nconst textRange = function (range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n/**\n * format a number as hex string\n *\n * @param {number} e The number\n * @param {number} i the iterator\n * @return {string} the hex formatted number as a string\n */\n\n\nconst formatHexString = function (e, i) {\n  const value = e.toString(16);\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\n\nconst formatAsciiString = function (e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n\n  return '.';\n};\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\n\n\nconst createTransferableMessage = function (message) {\n  const transferable = {};\n  Object.keys(message).forEach(key => {\n    const value = message[key];\n\n    if (isArrayBufferView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n  return transferable;\n};\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n *\n * @param {Object} initSegment\n *        the init segment object.\n *\n * @return {string} the generated init segment id\n */\n\nconst initSegmentId = function (initSegment) {\n  const byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n/**\n * Returns a unique string identifier for a media segment key.\n *\n * @param {Object} key the encryption key\n * @return {string} the unique id for the media segment key.\n */\n\nconst segmentKeyId = function (key) {\n  return key.resolvedUri;\n};\n/**\n * utils to help dump binary data to the console\n *\n * @param {Array|TypedArray} data\n *        data to dump to a string\n *\n * @return {string} the data as a hex string.\n */\n\nconst hexDump = data => {\n  const bytes = Array.prototype.slice.call(data);\n  const step = 16;\n  let result = '';\n  let hex;\n  let ascii;\n\n  for (let j = 0; j < bytes.length / step; j++) {\n    hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n    ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n    result += hex + ' ' + ascii + '\\n';\n  }\n\n  return result;\n};\nconst tagDump = ({\n  bytes\n}) => hexDump(bytes);\nconst textRanges = ranges => {\n  let result = '';\n  let i;\n\n  for (i = 0; i < ranges.length; i++) {\n    result += textRange(ranges, i) + ' ';\n  }\n\n  return result;\n};\n\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId,\n  segmentKeyId: segmentKeyId,\n  hexDump: hexDump,\n  tagDump: tagDump,\n  textRanges: textRanges\n});\n\n// TODO handle fmp4 case where the timing info is accurate and doesn't involve transmux\n// 25% was arbitrarily chosen, and may need to be refined over time.\n\nconst SEGMENT_END_FUDGE_PERCENT = 0.25;\n/**\n * Converts a player time (any time that can be gotten/set from player.currentTime(),\n * e.g., any time within player.seekable().start(0) to player.seekable().end(0)) to a\n * program time (any time referencing the real world (e.g., EXT-X-PROGRAM-DATE-TIME)).\n *\n * The containing segment is required as the EXT-X-PROGRAM-DATE-TIME serves as an \"anchor\n * point\" (a point where we have a mapping from program time to player time, with player\n * time being the post transmux start of the segment).\n *\n * For more details, see [this doc](../../docs/program-time-from-player-time.md).\n *\n * @param {number} playerTime the player time\n * @param {Object} segment the segment which contains the player time\n * @return {Date} program time\n */\n\nconst playerTimeToProgramTime = (playerTime, segment) => {\n  if (!segment.dateTimeObject) {\n    // Can't convert without an \"anchor point\" for the program time (i.e., a time that can\n    // be used to map the start of a segment with a real world time).\n    return null;\n  }\n\n  const transmuxerPrependedSeconds = segment.videoTimingInfo.transmuxerPrependedSeconds;\n  const transmuxedStart = segment.videoTimingInfo.transmuxedPresentationStart; // get the start of the content from before old content is prepended\n\n  const startOfSegment = transmuxedStart + transmuxerPrependedSeconds;\n  const offsetFromSegmentStart = playerTime - startOfSegment;\n  return new Date(segment.dateTimeObject.getTime() + offsetFromSegmentStart * 1000);\n};\nconst originalSegmentVideoDuration = videoTimingInfo => {\n  return videoTimingInfo.transmuxedPresentationEnd - videoTimingInfo.transmuxedPresentationStart - videoTimingInfo.transmuxerPrependedSeconds;\n};\n/**\n * Finds a segment that contains the time requested given as an ISO-8601 string. The\n * returned segment might be an estimate or an accurate match.\n *\n * @param {string} programTime The ISO-8601 programTime to find a match for\n * @param {Object} playlist A playlist object to search within\n */\n\nconst findSegmentForProgramTime = (programTime, playlist) => {\n  // Assumptions:\n  //  - verifyProgramDateTimeTags has already been run\n  //  - live streams have been started\n  let dateTimeObject;\n\n  try {\n    dateTimeObject = new Date(programTime);\n  } catch (e) {\n    return null;\n  }\n\n  if (!playlist || !playlist.segments || playlist.segments.length === 0) {\n    return null;\n  }\n\n  let segment = playlist.segments[0];\n\n  if (dateTimeObject < new Date(segment.dateTimeObject)) {\n    // Requested time is before stream start.\n    return null;\n  }\n\n  for (let i = 0; i < playlist.segments.length - 1; i++) {\n    segment = playlist.segments[i];\n    const nextSegmentStart = new Date(playlist.segments[i + 1].dateTimeObject);\n\n    if (dateTimeObject < nextSegmentStart) {\n      break;\n    }\n  }\n\n  const lastSegment = playlist.segments[playlist.segments.length - 1];\n  const lastSegmentStart = lastSegment.dateTimeObject;\n  const lastSegmentDuration = lastSegment.videoTimingInfo ? originalSegmentVideoDuration(lastSegment.videoTimingInfo) : lastSegment.duration + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT;\n  const lastSegmentEnd = new Date(lastSegmentStart.getTime() + lastSegmentDuration * 1000);\n\n  if (dateTimeObject > lastSegmentEnd) {\n    // Beyond the end of the stream, or our best guess of the end of the stream.\n    return null;\n  }\n\n  if (dateTimeObject > new Date(lastSegmentStart)) {\n    segment = lastSegment;\n  }\n\n  return {\n    segment,\n    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : Playlist.duration(playlist, playlist.mediaSequence + playlist.segments.indexOf(segment)),\n    // Although, given that all segments have accurate date time objects, the segment\n    // selected should be accurate, unless the video has been transmuxed at some point\n    // (determined by the presence of the videoTimingInfo object), the segment's \"player\n    // time\" (the start time in the player) can't be considered accurate.\n    type: segment.videoTimingInfo ? 'accurate' : 'estimate'\n  };\n};\n/**\n * Finds a segment that contains the given player time(in seconds).\n *\n * @param {number} time The player time to find a match for\n * @param {Object} playlist A playlist object to search within\n */\n\nconst findSegmentForPlayerTime = (time, playlist) => {\n  // Assumptions:\n  // - there will always be a segment.duration\n  // - we can start from zero\n  // - segments are in time order\n  if (!playlist || !playlist.segments || playlist.segments.length === 0) {\n    return null;\n  }\n\n  let segmentEnd = 0;\n  let segment;\n\n  for (let i = 0; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i]; // videoTimingInfo is set after the segment is downloaded and transmuxed, and\n    // should contain the most accurate values we have for the segment's player times.\n    //\n    // Use the accurate transmuxedPresentationEnd value if it is available, otherwise fall\n    // back to an estimate based on the manifest derived (inaccurate) segment.duration, to\n    // calculate an end value.\n\n    segmentEnd = segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationEnd : segmentEnd + segment.duration;\n\n    if (time <= segmentEnd) {\n      break;\n    }\n  }\n\n  const lastSegment = playlist.segments[playlist.segments.length - 1];\n\n  if (lastSegment.videoTimingInfo && lastSegment.videoTimingInfo.transmuxedPresentationEnd < time) {\n    // The time requested is beyond the stream end.\n    return null;\n  }\n\n  if (time > segmentEnd) {\n    // The time is within or beyond the last segment.\n    //\n    // Check to see if the time is beyond a reasonable guess of the end of the stream.\n    if (time > segmentEnd + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT) {\n      // Technically, because the duration value is only an estimate, the time may still\n      // exist in the last segment, however, there isn't enough information to make even\n      // a reasonable estimate.\n      return null;\n    }\n\n    segment = lastSegment;\n  }\n\n  return {\n    segment,\n    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : segmentEnd - segment.duration,\n    // Because videoTimingInfo is only set after transmux, it is the only way to get\n    // accurate timing values.\n    type: segment.videoTimingInfo ? 'accurate' : 'estimate'\n  };\n};\n/**\n * Gives the offset of the comparisonTimestamp from the programTime timestamp in seconds.\n * If the offset returned is positive, the programTime occurs after the\n * comparisonTimestamp.\n * If the offset is negative, the programTime occurs before the comparisonTimestamp.\n *\n * @param {string} comparisonTimeStamp An ISO-8601 timestamp to compare against\n * @param {string} programTime The programTime as an ISO-8601 string\n * @return {number} offset\n */\n\nconst getOffsetFromTimestamp = (comparisonTimeStamp, programTime) => {\n  let segmentDateTime;\n  let programDateTime;\n\n  try {\n    segmentDateTime = new Date(comparisonTimeStamp);\n    programDateTime = new Date(programTime);\n  } catch (e) {// TODO handle error\n  }\n\n  const segmentTimeEpoch = segmentDateTime.getTime();\n  const programTimeEpoch = programDateTime.getTime();\n  return (programTimeEpoch - segmentTimeEpoch) / 1000;\n};\n/**\n * Checks that all segments in this playlist have programDateTime tags.\n *\n * @param {Object} playlist A playlist object\n */\n\nconst verifyProgramDateTimeTags = playlist => {\n  if (!playlist.segments || playlist.segments.length === 0) {\n    return false;\n  }\n\n  for (let i = 0; i < playlist.segments.length; i++) {\n    const segment = playlist.segments[i];\n\n    if (!segment.dateTimeObject) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Returns the programTime of the media given a playlist and a playerTime.\n * The playlist must have programDateTime tags for a programDateTime tag to be returned.\n * If the segments containing the time requested have not been buffered yet, an estimate\n * may be returned to the callback.\n *\n * @param {Object} args\n * @param {Object} args.playlist A playlist object to search within\n * @param {number} time A playerTime in seconds\n * @param {Function} callback(err, programTime)\n * @return {string} err.message A detailed error message\n * @return {Object} programTime\n * @return {number} programTime.mediaSeconds The streamTime in seconds\n * @return {string} programTime.programDateTime The programTime as an ISO-8601 String\n */\n\nconst getProgramTime = ({\n  playlist,\n  time = undefined,\n  callback\n}) => {\n  if (!callback) {\n    throw new Error('getProgramTime: callback must be provided');\n  }\n\n  if (!playlist || time === undefined) {\n    return callback({\n      message: 'getProgramTime: playlist and time must be provided'\n    });\n  }\n\n  const matchedSegment = findSegmentForPlayerTime(time, playlist);\n\n  if (!matchedSegment) {\n    return callback({\n      message: 'valid programTime was not found'\n    });\n  }\n\n  if (matchedSegment.type === 'estimate') {\n    return callback({\n      message: 'Accurate programTime could not be determined.' + ' Please seek to e.seekTime and try again',\n      seekTime: matchedSegment.estimatedStart\n    });\n  }\n\n  const programTimeObject = {\n    mediaSeconds: time\n  };\n  const programTime = playerTimeToProgramTime(time, matchedSegment.segment);\n\n  if (programTime) {\n    programTimeObject.programDateTime = programTime.toISOString();\n  }\n\n  return callback(null, programTimeObject);\n};\n/**\n * Seeks in the player to a time that matches the given programTime ISO-8601 string.\n *\n * @param {Object} args\n * @param {string} args.programTime A programTime to seek to as an ISO-8601 String\n * @param {Object} args.playlist A playlist to look within\n * @param {number} args.retryCount The number of times to try for an accurate seek. Default is 2.\n * @param {Function} args.seekTo A method to perform a seek\n * @param {boolean} args.pauseAfterSeek Whether to end in a paused state after seeking. Default is true.\n * @param {Object} args.tech The tech to seek on\n * @param {Function} args.callback(err, newTime) A callback to return the new time to\n * @return {string} err.message A detailed error message\n * @return {number} newTime The exact time that was seeked to in seconds\n */\n\nconst seekToProgramTime = ({\n  programTime,\n  playlist,\n  retryCount = 2,\n  seekTo,\n  pauseAfterSeek = true,\n  tech,\n  callback\n}) => {\n  if (!callback) {\n    throw new Error('seekToProgramTime: callback must be provided');\n  }\n\n  if (typeof programTime === 'undefined' || !playlist || !seekTo) {\n    return callback({\n      message: 'seekToProgramTime: programTime, seekTo and playlist must be provided'\n    });\n  }\n\n  if (!playlist.endList && !tech.hasStarted_) {\n    return callback({\n      message: 'player must be playing a live stream to start buffering'\n    });\n  }\n\n  if (!verifyProgramDateTimeTags(playlist)) {\n    return callback({\n      message: 'programDateTime tags must be provided in the manifest ' + playlist.resolvedUri\n    });\n  }\n\n  const matchedSegment = findSegmentForProgramTime(programTime, playlist); // no match\n\n  if (!matchedSegment) {\n    return callback({\n      message: `${programTime} was not found in the stream`\n    });\n  }\n\n  const segment = matchedSegment.segment;\n  const mediaOffset = getOffsetFromTimestamp(segment.dateTimeObject, programTime);\n\n  if (matchedSegment.type === 'estimate') {\n    // we've run out of retries\n    if (retryCount === 0) {\n      return callback({\n        message: `${programTime} is not buffered yet. Try again`\n      });\n    }\n\n    seekTo(matchedSegment.estimatedStart + mediaOffset);\n    tech.one('seeked', () => {\n      seekToProgramTime({\n        programTime,\n        playlist,\n        retryCount: retryCount - 1,\n        seekTo,\n        pauseAfterSeek,\n        tech,\n        callback\n      });\n    });\n    return;\n  } // Since the segment.start value is determined from the buffered end or ending time\n  // of the prior segment, the seekToTime doesn't need to account for any transmuxer\n  // modifications.\n\n\n  const seekToTime = segment.start + mediaOffset;\n\n  const seekedCallback = () => {\n    return callback(null, tech.currentTime());\n  }; // listen for seeked event\n\n\n  tech.one('seeked', seekedCallback); // pause before seeking as video.js will restore this state\n\n  if (pauseAfterSeek) {\n    tech.pause();\n  }\n\n  seekTo(seekToTime);\n};\n\n// which will only happen if the request is complete.\n\nconst callbackOnCompleted = (request, cb) => {\n  if (request.readyState === 4) {\n    return cb();\n  }\n\n  return;\n};\n\nconst containerRequest = (uri, xhr, cb, requestType) => {\n  let bytes = [];\n  let id3Offset;\n  let finished = false;\n\n  const endRequestAndCallback = function (err, req, type, _bytes) {\n    req.abort();\n    finished = true;\n    return cb(err, req, type, _bytes);\n  };\n\n  const progressListener = function (error, request) {\n    if (finished) {\n      return;\n    }\n\n    if (error) {\n      error.metadata = getStreamingNetworkErrorMetadata({\n        requestType,\n        request,\n        error\n      });\n      return endRequestAndCallback(error, request, '', bytes);\n    } // grap the new part of content that was just downloaded\n\n\n    const newPart = request.responseText.substring(bytes && bytes.byteLength || 0, request.responseText.length); // add that onto bytes\n\n    bytes = concatTypedArrays(bytes, stringToBytes(newPart, true));\n    id3Offset = id3Offset || getId3Offset(bytes); // we need at least 10 bytes to determine a type\n    // or we need at least two bytes after an id3Offset\n\n    if (bytes.length < 10 || id3Offset && bytes.length < id3Offset + 2) {\n      return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\n    }\n\n    const type = detectContainerForBytes(bytes); // if this looks like a ts segment but we don't have enough data\n    // to see the second sync byte, wait until we have enough data\n    // before declaring it ts\n\n    if (type === 'ts' && bytes.length < 188) {\n      return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\n    } // this may be an unsynced ts segment\n    // wait for 376 bytes before detecting no container\n\n\n    if (!type && bytes.length < 376) {\n      return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\n    }\n\n    return endRequestAndCallback(null, request, type, bytes);\n  };\n\n  const options = {\n    uri,\n\n    beforeSend(request) {\n      // this forces the browser to pass the bytes to us unprocessed\n      request.overrideMimeType('text/plain; charset=x-user-defined');\n      request.addEventListener('progress', function ({\n        total,\n        loaded\n      }) {\n        return callbackWrapper(request, null, {\n          statusCode: request.status\n        }, progressListener);\n      });\n    }\n\n  };\n  const request = xhr(options, function (error, response) {\n    return callbackWrapper(request, error, response, progressListener);\n  });\n  return request;\n};\n\nconst {\n  EventTarget\n} = videojs;\n\nconst dashPlaylistUnchanged = function (a, b) {\n  if (!isPlaylistUnchanged(a, b)) {\n    return false;\n  } // for dash the above check will often return true in scenarios where\n  // the playlist actually has changed because mediaSequence isn't a\n  // dash thing, and we often set it to 1. So if the playlists have the same amount\n  // of segments we return true.\n  // So for dash we need to make sure that the underlying segments are different.\n  // if sidx changed then the playlists are different.\n\n\n  if (a.sidx && b.sidx && (a.sidx.offset !== b.sidx.offset || a.sidx.length !== b.sidx.length)) {\n    return false;\n  } else if (!a.sidx && b.sidx || a.sidx && !b.sidx) {\n    return false;\n  } // one or the other does not have segments\n  // there was a change.\n\n\n  if (a.segments && !b.segments || !a.segments && b.segments) {\n    return false;\n  } // neither has segments nothing changed\n\n\n  if (!a.segments && !b.segments) {\n    return true;\n  } // check segments themselves\n\n\n  for (let i = 0; i < a.segments.length; i++) {\n    const aSegment = a.segments[i];\n    const bSegment = b.segments[i]; // if uris are different between segments there was a change\n\n    if (aSegment.uri !== bSegment.uri) {\n      return false;\n    } // neither segment has a byterange, there will be no byterange change.\n\n\n    if (!aSegment.byterange && !bSegment.byterange) {\n      continue;\n    }\n\n    const aByterange = aSegment.byterange;\n    const bByterange = bSegment.byterange; // if byterange only exists on one of the segments, there was a change.\n\n    if (aByterange && !bByterange || !aByterange && bByterange) {\n      return false;\n    } // if both segments have byterange with different offsets, there was a change.\n\n\n    if (aByterange.offset !== bByterange.offset || aByterange.length !== bByterange.length) {\n      return false;\n    }\n  } // if everything was the same with segments, this is the same playlist.\n\n\n  return true;\n};\n/**\n * Use the representation IDs from the mpd object to create groupIDs, the NAME is set to mandatory representation\n * ID in the parser. This allows for continuous playout across periods with the same representation IDs\n * (continuous periods as defined in DASH-IF 3.2.12). This is assumed in the mpd-parser as well. If we want to support\n * periods without continuous playback this function may need modification as well as the parser.\n */\n\n\nconst dashGroupId = (type, group, label, playlist) => {\n  // If the manifest somehow does not have an ID (non-dash compliant), use the label.\n  const playlistId = playlist.attributes.NAME || label;\n  return `placeholder-uri-${type}-${group}-${playlistId}`;\n};\n/**\n * Parses the main XML string and updates playlist URI references.\n *\n * @param {Object} config\n *        Object of arguments\n * @param {string} config.mainXml\n *        The mpd XML\n * @param {string} config.srcUrl\n *        The mpd URL\n * @param {Date} config.clientOffset\n *         A time difference between server and client\n * @param {Object} config.sidxMapping\n *        SIDX mappings for moof/mdat URIs and byte ranges\n * @return {Object}\n *         The parsed mpd manifest object\n */\n\n\nconst parseMainXml = ({\n  mainXml,\n  srcUrl,\n  clientOffset,\n  sidxMapping,\n  previousManifest\n}) => {\n  const manifest = parse(mainXml, {\n    manifestUri: srcUrl,\n    clientOffset,\n    sidxMapping,\n    previousManifest\n  });\n  addPropertiesToMain(manifest, srcUrl, dashGroupId);\n  return manifest;\n};\n/**\n * Removes any mediaGroup labels that no longer exist in the newMain\n *\n * @param {Object} update\n *         The previous mpd object being updated\n * @param {Object} newMain\n *         The new mpd object\n */\n\nconst removeOldMediaGroupLabels = (update, newMain) => {\n  forEachMediaGroup(update, (properties, type, group, label) => {\n    if (!newMain.mediaGroups[type][group] || !(label in newMain.mediaGroups[type][group])) {\n      delete update.mediaGroups[type][group][label];\n    }\n  });\n};\n/**\n * Returns a new main manifest that is the result of merging an updated main manifest\n * into the original version.\n *\n * @param {Object} oldMain\n *        The old parsed mpd object\n * @param {Object} newMain\n *        The updated parsed mpd object\n * @return {Object}\n *         A new object representing the original main manifest with the updated media\n *         playlists merged in\n */\n\n\nconst updateMain = (oldMain, newMain, sidxMapping) => {\n  let noChanges = true;\n  let update = merge(oldMain, {\n    // These are top level properties that can be updated\n    duration: newMain.duration,\n    minimumUpdatePeriod: newMain.minimumUpdatePeriod,\n    timelineStarts: newMain.timelineStarts\n  }); // First update the playlists in playlist list\n\n  for (let i = 0; i < newMain.playlists.length; i++) {\n    const playlist = newMain.playlists[i];\n\n    if (playlist.sidx) {\n      const sidxKey = generateSidxKey(playlist.sidx); // add sidx segments to the playlist if we have all the sidx info already\n\n      if (sidxMapping && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx) {\n        addSidxSegmentsToPlaylist(playlist, sidxMapping[sidxKey].sidx, playlist.sidx.resolvedUri);\n      }\n    }\n\n    const playlistUpdate = updateMain$1(update, playlist, dashPlaylistUnchanged);\n\n    if (playlistUpdate) {\n      update = playlistUpdate;\n      noChanges = false;\n    }\n  } // Then update media group playlists\n\n\n  forEachMediaGroup(newMain, (properties, type, group, label) => {\n    if (properties.playlists && properties.playlists.length) {\n      const id = properties.playlists[0].id;\n      const playlistUpdate = updateMain$1(update, properties.playlists[0], dashPlaylistUnchanged);\n\n      if (playlistUpdate) {\n        update = playlistUpdate; // add new mediaGroup label if it doesn't exist and assign the new mediaGroup.\n\n        if (!(label in update.mediaGroups[type][group])) {\n          update.mediaGroups[type][group][label] = properties;\n        } // update the playlist reference within media groups\n\n\n        update.mediaGroups[type][group][label].playlists[0] = update.playlists[id];\n        noChanges = false;\n      }\n    }\n  }); // remove mediaGroup labels and references that no longer exist in the newMain\n\n  removeOldMediaGroupLabels(update, newMain);\n\n  if (newMain.minimumUpdatePeriod !== oldMain.minimumUpdatePeriod) {\n    noChanges = false;\n  }\n\n  if (noChanges) {\n    return null;\n  }\n\n  return update;\n}; // SIDX should be equivalent if the URI and byteranges of the SIDX match.\n// If the SIDXs have maps, the two maps should match,\n// both `a` and `b` missing SIDXs is considered matching.\n// If `a` or `b` but not both have a map, they aren't matching.\n\nconst equivalentSidx = (a, b) => {\n  const neitherMap = Boolean(!a.map && !b.map);\n  const equivalentMap = neitherMap || Boolean(a.map && b.map && a.map.byterange.offset === b.map.byterange.offset && a.map.byterange.length === b.map.byterange.length);\n  return equivalentMap && a.uri === b.uri && a.byterange.offset === b.byterange.offset && a.byterange.length === b.byterange.length;\n}; // exported for testing\n\n\nconst compareSidxEntry = (playlists, oldSidxMapping) => {\n  const newSidxMapping = {};\n\n  for (const id in playlists) {\n    const playlist = playlists[id];\n    const currentSidxInfo = playlist.sidx;\n\n    if (currentSidxInfo) {\n      const key = generateSidxKey(currentSidxInfo);\n\n      if (!oldSidxMapping[key]) {\n        break;\n      }\n\n      const savedSidxInfo = oldSidxMapping[key].sidxInfo;\n\n      if (equivalentSidx(savedSidxInfo, currentSidxInfo)) {\n        newSidxMapping[key] = oldSidxMapping[key];\n      }\n    }\n  }\n\n  return newSidxMapping;\n};\n/**\n *  A function that filters out changed items as they need to be requested separately.\n *\n *  The method is exported for testing\n *\n *  @param {Object} main the parsed mpd XML returned via mpd-parser\n *  @param {Object} oldSidxMapping the SIDX to compare against\n */\n\nconst filterChangedSidxMappings = (main, oldSidxMapping) => {\n  const videoSidx = compareSidxEntry(main.playlists, oldSidxMapping);\n  let mediaGroupSidx = videoSidx;\n  forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\n    if (properties.playlists && properties.playlists.length) {\n      const playlists = properties.playlists;\n      mediaGroupSidx = merge(mediaGroupSidx, compareSidxEntry(playlists, oldSidxMapping));\n    }\n  });\n  return mediaGroupSidx;\n};\nclass DashPlaylistLoader extends EventTarget {\n  // DashPlaylistLoader must accept either a src url or a playlist because subsequent\n  // playlist loader setups from media groups will expect to be able to pass a playlist\n  // (since there aren't external URLs to media playlists with DASH)\n  constructor(srcUrlOrPlaylist, vhs, options = {}, mainPlaylistLoader) {\n    super();\n    this.isPaused_ = true;\n    this.mainPlaylistLoader_ = mainPlaylistLoader || this;\n\n    if (!mainPlaylistLoader) {\n      this.isMain_ = true;\n    }\n\n    const {\n      withCredentials = false\n    } = options;\n    this.vhs_ = vhs;\n    this.withCredentials = withCredentials;\n    this.addMetadataToTextTrack = options.addMetadataToTextTrack;\n\n    if (!srcUrlOrPlaylist) {\n      throw new Error('A non-empty playlist URL or object is required');\n    } // event naming?\n\n\n    this.on('minimumUpdatePeriod', () => {\n      this.refreshXml_();\n    }); // live playlist staleness timeout\n\n    this.on('mediaupdatetimeout', () => {\n      this.refreshMedia_(this.media().id);\n    });\n    this.state = 'HAVE_NOTHING';\n    this.loadedPlaylists_ = {};\n    this.logger_ = logger('DashPlaylistLoader'); // initialize the loader state\n    // The mainPlaylistLoader will be created with a string\n\n    if (this.isMain_) {\n      this.mainPlaylistLoader_.srcUrl = srcUrlOrPlaylist; // TODO: reset sidxMapping between period changes\n      // once multi-period is refactored\n\n      this.mainPlaylistLoader_.sidxMapping_ = {};\n    } else {\n      this.childPlaylist_ = srcUrlOrPlaylist;\n    }\n  }\n\n  get isPaused() {\n    return this.isPaused_;\n  }\n\n  requestErrored_(err, request, startingState) {\n    // disposed\n    if (!this.request) {\n      return true;\n    } // pending request is cleared\n\n\n    this.request = null;\n\n    if (err) {\n      // use the provided error object or create one\n      // based on the request/response\n      this.error = typeof err === 'object' && !(err instanceof Error) ? err : {\n        status: request.status,\n        message: 'DASH request error at URL: ' + request.uri,\n        response: request.response,\n        // MEDIA_ERR_NETWORK\n        code: 2,\n        metadata: err.metadata\n      };\n\n      if (startingState) {\n        this.state = startingState;\n      }\n\n      this.trigger('error');\n      return true;\n    }\n  }\n  /**\n   * Verify that the container of the sidx segment can be parsed\n   * and if it can, get and parse that segment.\n   */\n\n\n  addSidxSegments_(playlist, startingState, cb) {\n    const sidxKey = playlist.sidx && generateSidxKey(playlist.sidx); // playlist lacks sidx or sidx segments were added to this playlist already.\n\n    if (!playlist.sidx || !sidxKey || this.mainPlaylistLoader_.sidxMapping_[sidxKey]) {\n      // keep this function async\n      window$1.clearTimeout(this.mediaRequest_);\n      this.mediaRequest_ = window$1.setTimeout(() => cb(false), 0);\n      return;\n    } // resolve the segment URL relative to the playlist\n\n\n    const uri = resolveManifestRedirect(playlist.sidx.resolvedUri);\n\n    const fin = (err, request) => {\n      if (this.requestErrored_(err, request, startingState)) {\n        return;\n      }\n\n      const sidxMapping = this.mainPlaylistLoader_.sidxMapping_;\n      const {\n        requestType\n      } = request;\n      let sidx;\n\n      try {\n        sidx = parseSidx(toUint8(request.response).subarray(8));\n      } catch (e) {\n        e.metadata = getStreamingNetworkErrorMetadata({\n          requestType,\n          request,\n          parseFailure: true\n        }); // sidx parsing failed.\n\n        this.requestErrored_(e, request, startingState);\n        return;\n      }\n\n      sidxMapping[sidxKey] = {\n        sidxInfo: playlist.sidx,\n        sidx\n      };\n      addSidxSegmentsToPlaylist(playlist, sidx, playlist.sidx.resolvedUri);\n      return cb(true);\n    };\n\n    const REQUEST_TYPE = 'dash-sidx';\n    this.request = containerRequest(uri, this.vhs_.xhr, (err, request, container, bytes) => {\n      if (err) {\n        return fin(err, request);\n      }\n\n      if (!container || container !== 'mp4') {\n        const sidxContainer = container || 'unknown';\n        return fin({\n          status: request.status,\n          message: `Unsupported ${sidxContainer} container type for sidx segment at URL: ${uri}`,\n          // response is just bytes in this case\n          // but we really don't want to return that.\n          response: '',\n          playlist,\n          internal: true,\n          playlistExclusionDuration: Infinity,\n          // MEDIA_ERR_NETWORK\n          code: 2\n        }, request);\n      } // if we already downloaded the sidx bytes in the container request, use them\n\n\n      const {\n        offset,\n        length\n      } = playlist.sidx.byterange;\n\n      if (bytes.length >= length + offset) {\n        return fin(err, {\n          response: bytes.subarray(offset, offset + length),\n          status: request.status,\n          uri: request.uri\n        });\n      } // otherwise request sidx bytes\n\n\n      this.request = this.vhs_.xhr({\n        uri,\n        responseType: 'arraybuffer',\n        requestType: 'dash-sidx',\n        headers: segmentXhrHeaders({\n          byterange: playlist.sidx.byterange\n        })\n      }, fin);\n    }, REQUEST_TYPE);\n  }\n\n  dispose() {\n    this.isPaused_ = true;\n    this.trigger('dispose');\n    this.stopRequest();\n    this.loadedPlaylists_ = {};\n    window$1.clearTimeout(this.minimumUpdatePeriodTimeout_);\n    window$1.clearTimeout(this.mediaRequest_);\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    this.mediaUpdateTimeout = null;\n    this.mediaRequest_ = null;\n    this.minimumUpdatePeriodTimeout_ = null;\n\n    if (this.mainPlaylistLoader_.createMupOnMedia_) {\n      this.off('loadedmetadata', this.mainPlaylistLoader_.createMupOnMedia_);\n      this.mainPlaylistLoader_.createMupOnMedia_ = null;\n    }\n\n    this.off();\n  }\n\n  hasPendingRequest() {\n    return this.request || this.mediaRequest_;\n  }\n\n  stopRequest() {\n    if (this.request) {\n      const oldRequest = this.request;\n      this.request = null;\n      oldRequest.onreadystatechange = null;\n      oldRequest.abort();\n    }\n  }\n\n  media(playlist) {\n    // getter\n    if (!playlist) {\n      return this.media_;\n    } // setter\n\n\n    if (this.state === 'HAVE_NOTHING') {\n      throw new Error('Cannot switch media playlist from ' + this.state);\n    }\n\n    const startingState = this.state; // find the playlist object if the target playlist has been specified by URI\n\n    if (typeof playlist === 'string') {\n      if (!this.mainPlaylistLoader_.main.playlists[playlist]) {\n        throw new Error('Unknown playlist URI: ' + playlist);\n      }\n\n      playlist = this.mainPlaylistLoader_.main.playlists[playlist];\n    }\n\n    const mediaChange = !this.media_ || playlist.id !== this.media_.id; // switch to previously loaded playlists immediately\n\n    if (mediaChange && this.loadedPlaylists_[playlist.id] && this.loadedPlaylists_[playlist.id].endList) {\n      this.state = 'HAVE_METADATA';\n      this.media_ = playlist; // trigger media change if the active media has been updated\n\n      if (mediaChange) {\n        this.trigger('mediachanging');\n        this.trigger('mediachange');\n      }\n\n      return;\n    } // switching to the active playlist is a no-op\n\n\n    if (!mediaChange) {\n      return;\n    } // switching from an already loaded playlist\n\n\n    if (this.media_) {\n      this.trigger('mediachanging');\n    }\n\n    this.addSidxSegments_(playlist, startingState, sidxChanged => {\n      // everything is ready just continue to haveMetadata\n      this.haveMetadata({\n        startingState,\n        playlist\n      });\n    });\n  }\n\n  haveMetadata({\n    startingState,\n    playlist\n  }) {\n    this.state = 'HAVE_METADATA';\n    this.loadedPlaylists_[playlist.id] = playlist;\n    window$1.clearTimeout(this.mediaRequest_);\n    this.mediaRequest_ = null; // This will trigger loadedplaylist\n\n    this.refreshMedia_(playlist.id); // fire loadedmetadata the first time a media playlist is loaded\n    // to resolve setup of media groups\n\n    if (startingState === 'HAVE_MAIN_MANIFEST') {\n      this.trigger('loadedmetadata');\n    } else {\n      // trigger media change if the active media has been updated\n      this.trigger('mediachange');\n    }\n  }\n\n  pause() {\n    this.isPaused_ = true;\n\n    if (this.mainPlaylistLoader_.createMupOnMedia_) {\n      this.off('loadedmetadata', this.mainPlaylistLoader_.createMupOnMedia_);\n      this.mainPlaylistLoader_.createMupOnMedia_ = null;\n    }\n\n    this.stopRequest();\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    this.mediaUpdateTimeout = null;\n\n    if (this.isMain_) {\n      window$1.clearTimeout(this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_);\n      this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_ = null;\n    }\n\n    if (this.state === 'HAVE_NOTHING') {\n      // If we pause the loader before any data has been retrieved, its as if we never\n      // started, so reset to an unstarted state.\n      this.started = false;\n    }\n  }\n\n  load(isFinalRendition) {\n    this.isPaused_ = false;\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    this.mediaUpdateTimeout = null;\n    const media = this.media();\n\n    if (isFinalRendition) {\n      const delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n      this.mediaUpdateTimeout = window$1.setTimeout(() => this.load(), delay);\n      return;\n    } // because the playlists are internal to the manifest, load should either load the\n    // main manifest, or do nothing but trigger an event\n\n\n    if (!this.started) {\n      this.start();\n      return;\n    }\n\n    if (media && !media.endList) {\n      // Check to see if this is the main loader and the MUP was cleared (this happens\n      // when the loader was paused). `media` should be set at this point since one is always\n      // set during `start()`.\n      if (this.isMain_ && !this.minimumUpdatePeriodTimeout_) {\n        // Trigger minimumUpdatePeriod to refresh the main manifest\n        this.trigger('minimumUpdatePeriod'); // Since there was no prior minimumUpdatePeriodTimeout it should be recreated\n\n        this.updateMinimumUpdatePeriodTimeout_();\n      }\n\n      this.trigger('mediaupdatetimeout');\n    } else {\n      this.trigger('loadedplaylist');\n    }\n  }\n\n  start() {\n    this.started = true; // We don't need to request the main manifest again\n    // Call this asynchronously to match the xhr request behavior below\n\n    if (!this.isMain_) {\n      window$1.clearTimeout(this.mediaRequest_);\n      this.mediaRequest_ = window$1.setTimeout(() => this.haveMain_(), 0);\n      return;\n    }\n\n    this.requestMain_((req, mainChanged) => {\n      this.haveMain_();\n\n      if (!this.hasPendingRequest() && !this.media_) {\n        this.media(this.mainPlaylistLoader_.main.playlists[0]);\n      }\n    });\n  }\n\n  requestMain_(cb) {\n    const metadata = {\n      manifestInfo: {\n        uri: this.mainPlaylistLoader_.srcUrl\n      }\n    };\n    this.trigger({\n      type: 'manifestrequeststart',\n      metadata\n    });\n    this.request = this.vhs_.xhr({\n      uri: this.mainPlaylistLoader_.srcUrl,\n      withCredentials: this.withCredentials,\n      requestType: 'dash-manifest'\n    }, (error, req) => {\n      if (error) {\n        const {\n          requestType\n        } = req;\n        error.metadata = getStreamingNetworkErrorMetadata({\n          requestType,\n          request: req,\n          error\n        });\n      }\n\n      if (this.requestErrored_(error, req)) {\n        if (this.state === 'HAVE_NOTHING') {\n          this.started = false;\n        }\n\n        return;\n      }\n\n      this.trigger({\n        type: 'manifestrequestcomplete',\n        metadata\n      });\n      const mainChanged = req.responseText !== this.mainPlaylistLoader_.mainXml_;\n      this.mainPlaylistLoader_.mainXml_ = req.responseText;\n\n      if (req.responseHeaders && req.responseHeaders.date) {\n        this.mainLoaded_ = Date.parse(req.responseHeaders.date);\n      } else {\n        this.mainLoaded_ = Date.now();\n      }\n\n      this.mainPlaylistLoader_.srcUrl = resolveManifestRedirect(this.mainPlaylistLoader_.srcUrl, req);\n\n      if (mainChanged) {\n        this.handleMain_();\n        this.syncClientServerClock_(() => {\n          return cb(req, mainChanged);\n        });\n        return;\n      }\n\n      return cb(req, mainChanged);\n    });\n  }\n  /**\n   * Parses the main xml for UTCTiming node to sync the client clock to the server\n   * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.\n   *\n   * @param {Function} done\n   *        Function to call when clock sync has completed\n   */\n\n\n  syncClientServerClock_(done) {\n    const utcTiming = parseUTCTiming(this.mainPlaylistLoader_.mainXml_); // No UTCTiming element found in the mpd. Use Date header from mpd request as the\n    // server clock\n\n    if (utcTiming === null) {\n      this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now();\n      return done();\n    }\n\n    if (utcTiming.method === 'DIRECT') {\n      this.mainPlaylistLoader_.clientOffset_ = utcTiming.value - Date.now();\n      return done();\n    }\n\n    this.request = this.vhs_.xhr({\n      uri: resolveUrl(this.mainPlaylistLoader_.srcUrl, utcTiming.value),\n      method: utcTiming.method,\n      withCredentials: this.withCredentials,\n      requestType: 'dash-clock-sync'\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      }\n\n      if (error) {\n        const {\n          requestType\n        } = req;\n        this.error.metadata = getStreamingNetworkErrorMetadata({\n          requestType,\n          request: req,\n          error\n        }); // sync request failed, fall back to using date header from mpd\n        // TODO: log warning\n\n        this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now();\n        return done();\n      }\n\n      let serverTime;\n\n      if (utcTiming.method === 'HEAD') {\n        if (!req.responseHeaders || !req.responseHeaders.date) {\n          // expected date header not preset, fall back to using date header from mpd\n          // TODO: log warning\n          serverTime = this.mainLoaded_;\n        } else {\n          serverTime = Date.parse(req.responseHeaders.date);\n        }\n      } else {\n        serverTime = Date.parse(req.responseText);\n      }\n\n      this.mainPlaylistLoader_.clientOffset_ = serverTime - Date.now();\n      done();\n    });\n  }\n\n  haveMain_() {\n    this.state = 'HAVE_MAIN_MANIFEST';\n\n    if (this.isMain_) {\n      // We have the main playlist at this point, so\n      // trigger this to allow PlaylistController\n      // to make an initial playlist selection\n      this.trigger('loadedplaylist');\n    } else if (!this.media_) {\n      // no media playlist was specifically selected so select\n      // the one the child playlist loader was created with\n      this.media(this.childPlaylist_);\n    }\n  }\n\n  handleMain_() {\n    // clear media request\n    window$1.clearTimeout(this.mediaRequest_);\n    this.mediaRequest_ = null;\n    const oldMain = this.mainPlaylistLoader_.main;\n    const metadata = {\n      manifestInfo: {\n        uri: this.mainPlaylistLoader_.srcUrl\n      }\n    };\n    this.trigger({\n      type: 'manifestparsestart',\n      metadata\n    });\n    let newMain;\n\n    try {\n      newMain = parseMainXml({\n        mainXml: this.mainPlaylistLoader_.mainXml_,\n        srcUrl: this.mainPlaylistLoader_.srcUrl,\n        clientOffset: this.mainPlaylistLoader_.clientOffset_,\n        sidxMapping: this.mainPlaylistLoader_.sidxMapping_,\n        previousManifest: oldMain\n      });\n    } catch (error) {\n      this.error = error;\n      this.error.metadata = {\n        errorType: videojs.Error.StreamingDashManifestParserError,\n        error\n      };\n      this.trigger('error');\n    } // if we have an old main to compare the new main against\n\n\n    if (oldMain) {\n      newMain = updateMain(oldMain, newMain, this.mainPlaylistLoader_.sidxMapping_);\n    } // only update main if we have a new main\n\n\n    this.mainPlaylistLoader_.main = newMain ? newMain : oldMain;\n    const location = this.mainPlaylistLoader_.main.locations && this.mainPlaylistLoader_.main.locations[0];\n\n    if (location && location !== this.mainPlaylistLoader_.srcUrl) {\n      this.mainPlaylistLoader_.srcUrl = location;\n    }\n\n    if (!oldMain || newMain && newMain.minimumUpdatePeriod !== oldMain.minimumUpdatePeriod) {\n      this.updateMinimumUpdatePeriodTimeout_();\n    }\n\n    this.addEventStreamToMetadataTrack_(newMain);\n\n    if (newMain) {\n      const {\n        duration,\n        endList\n      } = newMain;\n      const renditions = [];\n      newMain.playlists.forEach(playlist => {\n        renditions.push({\n          id: playlist.id,\n          bandwidth: playlist.attributes.BANDWIDTH,\n          resolution: playlist.attributes.RESOLUTION,\n          codecs: playlist.attributes.CODECS\n        });\n      });\n      const parsedManifest = {\n        duration,\n        isLive: !endList,\n        renditions\n      };\n      metadata.parsedManifest = parsedManifest;\n      this.trigger({\n        type: 'manifestparsecomplete',\n        metadata\n      });\n    }\n\n    return Boolean(newMain);\n  }\n\n  updateMinimumUpdatePeriodTimeout_() {\n    const mpl = this.mainPlaylistLoader_; // cancel any pending creation of mup on media\n    // a new one will be added if needed.\n\n    if (mpl.createMupOnMedia_) {\n      mpl.off('loadedmetadata', mpl.createMupOnMedia_);\n      mpl.createMupOnMedia_ = null;\n    } // clear any pending timeouts\n\n\n    if (mpl.minimumUpdatePeriodTimeout_) {\n      window$1.clearTimeout(mpl.minimumUpdatePeriodTimeout_);\n      mpl.minimumUpdatePeriodTimeout_ = null;\n    }\n\n    let mup = mpl.main && mpl.main.minimumUpdatePeriod; // If the minimumUpdatePeriod has a value of 0, that indicates that the current\n    // MPD has no future validity, so a new one will need to be acquired when new\n    // media segments are to be made available. Thus, we use the target duration\n    // in this case\n\n    if (mup === 0) {\n      if (mpl.media()) {\n        mup = mpl.media().targetDuration * 1000;\n      } else {\n        mpl.createMupOnMedia_ = mpl.updateMinimumUpdatePeriodTimeout_;\n        mpl.one('loadedmetadata', mpl.createMupOnMedia_);\n      }\n    } // if minimumUpdatePeriod is invalid or <= zero, which\n    // can happen when a live video becomes VOD. skip timeout\n    // creation.\n\n\n    if (typeof mup !== 'number' || mup <= 0) {\n      if (mup < 0) {\n        this.logger_(`found invalid minimumUpdatePeriod of ${mup}, not setting a timeout`);\n      }\n\n      return;\n    }\n\n    this.createMUPTimeout_(mup);\n  }\n\n  createMUPTimeout_(mup) {\n    const mpl = this.mainPlaylistLoader_;\n    mpl.minimumUpdatePeriodTimeout_ = window$1.setTimeout(() => {\n      mpl.minimumUpdatePeriodTimeout_ = null;\n      mpl.trigger('minimumUpdatePeriod');\n      mpl.createMUPTimeout_(mup);\n    }, mup);\n  }\n  /**\n   * Sends request to refresh the main xml and updates the parsed main manifest\n   */\n\n\n  refreshXml_() {\n    this.requestMain_((req, mainChanged) => {\n      if (!mainChanged) {\n        return;\n      }\n\n      if (this.media_) {\n        this.media_ = this.mainPlaylistLoader_.main.playlists[this.media_.id];\n      } // This will filter out updated sidx info from the mapping\n\n\n      this.mainPlaylistLoader_.sidxMapping_ = filterChangedSidxMappings(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.sidxMapping_);\n      this.addSidxSegments_(this.media(), this.state, sidxChanged => {\n        // TODO: do we need to reload the current playlist?\n        this.refreshMedia_(this.media().id);\n      });\n    });\n  }\n  /**\n   * Refreshes the media playlist by re-parsing the main xml and updating playlist\n   * references. If this is an alternate loader, the updated parsed manifest is retrieved\n   * from the main loader.\n   */\n\n\n  refreshMedia_(mediaID) {\n    if (!mediaID) {\n      throw new Error('refreshMedia_ must take a media id');\n    } // for main we have to reparse the main xml\n    // to re-create segments based on current timing values\n    // which may change media. We only skip updating the main manifest\n    // if this is the first time this.media_ is being set.\n    // as main was just parsed in that case.\n\n\n    if (this.media_ && this.isMain_) {\n      this.handleMain_();\n    }\n\n    const playlists = this.mainPlaylistLoader_.main.playlists;\n    const mediaChanged = !this.media_ || this.media_ !== playlists[mediaID];\n\n    if (mediaChanged) {\n      this.media_ = playlists[mediaID];\n    } else {\n      this.trigger('playlistunchanged');\n    }\n\n    if (!this.mediaUpdateTimeout) {\n      const createMediaUpdateTimeout = () => {\n        if (this.media().endList) {\n          return;\n        }\n\n        this.mediaUpdateTimeout = window$1.setTimeout(() => {\n          this.trigger('mediaupdatetimeout');\n          createMediaUpdateTimeout();\n        }, refreshDelay(this.media(), Boolean(mediaChanged)));\n      };\n\n      createMediaUpdateTimeout();\n    }\n\n    this.trigger('loadedplaylist');\n  }\n  /**\n   * Takes eventstream data from a parsed DASH manifest and adds it to the metadata text track.\n   *\n   * @param {manifest} newMain the newly parsed manifest\n   */\n\n\n  addEventStreamToMetadataTrack_(newMain) {\n    // Only add new event stream metadata if we have a new manifest.\n    if (newMain && this.mainPlaylistLoader_.main.eventStream) {\n      // convert EventStream to ID3-like data.\n      const metadataArray = this.mainPlaylistLoader_.main.eventStream.map(eventStreamNode => {\n        return {\n          cueTime: eventStreamNode.start,\n          frames: [{\n            data: eventStreamNode.messageData\n          }]\n        };\n      });\n      this.addMetadataToTextTrack('EventStream', metadataArray, this.mainPlaylistLoader_.main.duration);\n    }\n  }\n  /**\n   * Returns the key ID set from a playlist\n   *\n   * @param {playlist} playlist to fetch the key ID set from.\n   * @return a Set of 32 digit hex strings that represent the unique keyIds for that playlist.\n   */\n\n\n  getKeyIdSet(playlist) {\n    if (playlist.contentProtection) {\n      const keyIds = new Set();\n\n      for (const keysystem in playlist.contentProtection) {\n        const defaultKID = playlist.contentProtection[keysystem].attributes['cenc:default_KID'];\n\n        if (defaultKID) {\n          // DASH keyIds are separated by dashes.\n          keyIds.add(defaultKID.replace(/-/g, '').toLowerCase());\n        }\n      }\n\n      return keyIds;\n    }\n  }\n\n}\n\nvar Config = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  BACK_BUFFER_LENGTH: 30,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // 0.5 MB/s\n  INITIAL_BANDWIDTH: 4194304,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  // TODO: Remove this when experimentalBufferBasedABR is removed\n  EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,\n  BUFFER_LOW_WATER_LINE_RATE: 1,\n  // If the buffer is greater than the high water line, we won't switch down\n  BUFFER_HIGH_WATER_LINE: 30\n};\n\nconst stringToArrayBuffer = string => {\n  const view = new Uint8Array(new ArrayBuffer(string.length));\n\n  for (let i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n\n  return view.buffer;\n};\n\n/* global Blob, BlobBuilder, Worker */\n// unify worker interface\nconst browserWorkerPolyFill = function (workerObj) {\n  // node only supports on/off\n  workerObj.on = workerObj.addEventListener;\n  workerObj.off = workerObj.removeEventListener;\n  return workerObj;\n};\n\nconst createObjectURL = function (str) {\n  try {\n    return URL.createObjectURL(new Blob([str], {\n      type: 'application/javascript'\n    }));\n  } catch (e) {\n    const blob = new BlobBuilder();\n    blob.append(str);\n    return URL.createObjectURL(blob.getBlob());\n  }\n};\n\nconst factory = function (code) {\n  return function () {\n    const objectUrl = createObjectURL(code);\n    const worker = browserWorkerPolyFill(new Worker(objectUrl));\n    worker.objURL = objectUrl;\n    const terminate = worker.terminate;\n    worker.on = worker.addEventListener;\n    worker.off = worker.removeEventListener;\n\n    worker.terminate = function () {\n      URL.revokeObjectURL(objectUrl);\n      return terminate.call(this);\n    };\n\n    return worker;\n  };\n};\nconst transform = function (code) {\n  return `var browserWorkerPolyFill = ${browserWorkerPolyFill.toString()};\\n` + 'browserWorkerPolyFill(self);\\n' + code;\n};\n\nconst getWorkerString = function (fn) {\n  return fn.toString().replace(/^function.+?{/, '').slice(0, -1);\n};\n\n/* rollup-plugin-worker-factory start for worker!/home/runner/work/http-streaming/http-streaming/src/transmuxer-worker.js */\nconst workerCode$1 = transform(getWorkerString(function () {\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A lightweight readable stream implemention that handles event dispatching.\n   * Objects that inherit from streams should call init in their constructors.\n   */\n\n  var Stream$8 = function () {\n    this.init = function () {\n      var listeners = {};\n      /**\n       * Add a listener for a specified event type.\n       * @param type {string} the event name\n       * @param listener {function} the callback to be invoked when an event of\n       * the specified type occurs\n       */\n\n      this.on = function (type, listener) {\n        if (!listeners[type]) {\n          listeners[type] = [];\n        }\n\n        listeners[type] = listeners[type].concat(listener);\n      };\n      /**\n       * Remove a listener for a specified event type.\n       * @param type {string} the event name\n       * @param listener {function} a function previously registered for this\n       * type of event through `on`\n       */\n\n\n      this.off = function (type, listener) {\n        var index;\n\n        if (!listeners[type]) {\n          return false;\n        }\n\n        index = listeners[type].indexOf(listener);\n        listeners[type] = listeners[type].slice();\n        listeners[type].splice(index, 1);\n        return index > -1;\n      };\n      /**\n       * Trigger an event of the specified type on this stream. Any additional\n       * arguments to this function are passed as parameters to event listeners.\n       * @param type {string} the event name\n       */\n\n\n      this.trigger = function (type) {\n        var callbacks, i, length, args;\n        callbacks = listeners[type];\n\n        if (!callbacks) {\n          return;\n        } // Slicing the arguments on every invocation of this method\n        // can add a significant amount of overhead. Avoid the\n        // intermediate object creation for the common case of a\n        // single callback argument\n\n\n        if (arguments.length === 2) {\n          length = callbacks.length;\n\n          for (i = 0; i < length; ++i) {\n            callbacks[i].call(this, arguments[1]);\n          }\n        } else {\n          args = [];\n          i = arguments.length;\n\n          for (i = 1; i < arguments.length; ++i) {\n            args.push(arguments[i]);\n          }\n\n          length = callbacks.length;\n\n          for (i = 0; i < length; ++i) {\n            callbacks[i].apply(this, args);\n          }\n        }\n      };\n      /**\n       * Destroys the stream and cleans up.\n       */\n\n\n      this.dispose = function () {\n        listeners = {};\n      };\n    };\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   * @param destination {stream} the stream that will receive all `data` events\n   * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n   *                            when the current stream emits a 'done' event\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n\n  Stream$8.prototype.pipe = function (destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n    this.on('done', function (flushSource) {\n      destination.flush(flushSource);\n    });\n    this.on('partialdone', function (flushSource) {\n      destination.partialFlush(flushSource);\n    });\n    this.on('endedtimeline', function (flushSource) {\n      destination.endTimeline(flushSource);\n    });\n    this.on('reset', function (flushSource) {\n      destination.reset(flushSource);\n    });\n    return destination;\n  }; // Default stream functions that are expected to be overridden to perform\n  // actual work. These are provided by the prototype as a sort of no-op\n  // implementation so that we don't have to check for their existence in the\n  // `pipe` function above.\n\n\n  Stream$8.prototype.push = function (data) {\n    this.trigger('data', data);\n  };\n\n  Stream$8.prototype.flush = function (flushSource) {\n    this.trigger('done', flushSource);\n  };\n\n  Stream$8.prototype.partialFlush = function (flushSource) {\n    this.trigger('partialdone', flushSource);\n  };\n\n  Stream$8.prototype.endTimeline = function (flushSource) {\n    this.trigger('endedtimeline', flushSource);\n  };\n\n  Stream$8.prototype.reset = function (flushSource) {\n    this.trigger('reset', flushSource);\n  };\n\n  var stream = Stream$8;\n  var MAX_UINT32$1 = Math.pow(2, 32);\n\n  var getUint64$5 = function (uint8) {\n    var dv = new DataView(uint8.buffer, uint8.byteOffset, uint8.byteLength);\n    var value;\n\n    if (dv.getBigUint64) {\n      value = dv.getBigUint64(0);\n\n      if (value < Number.MAX_SAFE_INTEGER) {\n        return Number(value);\n      }\n\n      return value;\n    }\n\n    return dv.getUint32(0) * MAX_UINT32$1 + dv.getUint32(4);\n  };\n\n  var numbers = {\n    getUint64: getUint64$5,\n    MAX_UINT32: MAX_UINT32$1\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Functions that generate fragmented MP4s suitable for use with Media\n   * Source Extensions.\n   */\n\n  var MAX_UINT32 = numbers.MAX_UINT32;\n  var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun$1, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS; // pre-calculate constants\n\n  (function () {\n    var i;\n    types = {\n      avc1: [],\n      // codingname\n      avcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      // codingname\n      mvex: [],\n      mvhd: [],\n      pasp: [],\n      sdtp: [],\n      smhd: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      styp: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: []\n    }; // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n    // don't throw an error\n\n    if (typeof Uint8Array === 'undefined') {\n      return;\n    }\n\n    for (i in types) {\n      if (types.hasOwnProperty(i)) {\n        types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n      }\n    }\n\n    MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);\n    AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);\n    MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n    VIDEO_HDLR = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n    ]);\n    AUDIO_HDLR = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // pre_defined\n    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n    ]);\n    HDLR_TYPES = {\n      video: VIDEO_HDLR,\n      audio: AUDIO_HDLR\n    };\n    DREF = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // entry_count\n    0x00, 0x00, 0x00, 0x0c, // entry_size\n    0x75, 0x72, 0x6c, 0x20, // 'url' type\n    0x00, // version 0\n    0x00, 0x00, 0x01 // entry_flags\n    ]);\n    SMHD = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, // balance, 0 means centered\n    0x00, 0x00 // reserved\n    ]);\n    STCO = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n    ]);\n    STSC = STCO;\n    STSZ = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x00, // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n    ]);\n    STTS = STCO;\n    VMHD = new Uint8Array([0x00, // version\n    0x00, 0x00, 0x01, // flags\n    0x00, 0x00, // graphicsmode\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n    ]);\n  })();\n\n  box = function (type) {\n    var payload = [],\n        size = 0,\n        i,\n        result,\n        view;\n\n    for (i = 1; i < arguments.length; i++) {\n      payload.push(arguments[i]);\n    }\n\n    i = payload.length; // calculate the total size we need to allocate\n\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n\n    result = new Uint8Array(size + 8);\n    view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n    view.setUint32(0, result.byteLength);\n    result.set(type, 4); // copy the payload into the result\n\n    for (i = 0, size = 8; i < payload.length; i++) {\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n\n    return result;\n  };\n\n  dinf = function () {\n    return box(types.dinf, box(types.dref, DREF));\n  };\n\n  esds = function (track) {\n    return box(types.esds, new Uint8Array([0x00, // version\n    0x00, 0x00, 0x00, // flags\n    // ES_Descriptor\n    0x03, // tag, ES_DescrTag\n    0x19, // length\n    0x00, 0x00, // ES_ID\n    0x00, // streamDependenceFlag, URL_flag, reserved, streamPriority\n    // DecoderConfigDescriptor\n    0x04, // tag, DecoderConfigDescrTag\n    0x11, // length\n    0x40, // object type\n    0x15, // streamType\n    0x00, 0x06, 0x00, // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0, // maxBitrate\n    0x00, 0x00, 0xda, 0xc0, // avgBitrate\n    // DecoderSpecificInfo\n    0x05, // tag, DecoderSpecificInfoTag\n    0x02, // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig\n    ]));\n  };\n\n  ftyp = function () {\n    return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n  };\n\n  hdlr = function (type) {\n    return box(types.hdlr, HDLR_TYPES[type]);\n  };\n\n  mdat = function (data) {\n    return box(types.mdat, data);\n  };\n\n  mdhd = function (track) {\n    var result = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x02, // creation_time\n    0x00, 0x00, 0x00, 0x03, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n    track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF, // duration\n    0x55, 0xc4, // 'und' language (undetermined)\n    0x00, 0x00]); // Use the sample rate from the track metadata, when it is\n    // defined. The sample rate can be parsed out of an ADTS header, for\n    // instance.\n\n    if (track.samplerate) {\n      result[12] = track.samplerate >>> 24 & 0xFF;\n      result[13] = track.samplerate >>> 16 & 0xFF;\n      result[14] = track.samplerate >>> 8 & 0xFF;\n      result[15] = track.samplerate & 0xFF;\n    }\n\n    return box(types.mdhd, result);\n  };\n\n  mdia = function (track) {\n    return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n  };\n\n  mfhd = function (sequenceNumber) {\n    return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags\n    (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number\n    ]));\n  };\n\n  minf = function (track) {\n    return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));\n  };\n\n  moof = function (sequenceNumber, tracks) {\n    var trackFragments = [],\n        i = tracks.length; // build traf boxes for each track fragment\n\n    while (i--) {\n      trackFragments[i] = traf(tracks[i]);\n    }\n\n    return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));\n  };\n  /**\n   * Returns a movie box.\n   * @param tracks {array} the tracks associated with this movie\n   * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n   */\n\n\n  moov = function (tracks) {\n    var i = tracks.length,\n        boxes = [];\n\n    while (i--) {\n      boxes[i] = trak(tracks[i]);\n    }\n\n    return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n  };\n\n  mvex = function (tracks) {\n    var i = tracks.length,\n        boxes = [];\n\n    while (i--) {\n      boxes[i] = trex(tracks[i]);\n    }\n\n    return box.apply(null, [types.mvex].concat(boxes));\n  };\n\n  mvhd = function (duration) {\n    var bytes = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    0x00, 0x00, 0x00, 0x01, // creation_time\n    0x00, 0x00, 0x00, 0x02, // modification_time\n    0x00, 0x01, 0x5f, 0x90, // timescale, 90,000 \"ticks\" per second\n    (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF, // duration\n    0x00, 0x01, 0x00, 0x00, // 1.0 rate\n    0x01, 0x00, // 1.0 volume\n    0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n    0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n    return box(types.mvhd, bytes);\n  };\n\n  sdtp = function (track) {\n    var samples = track.samples || [],\n        bytes = new Uint8Array(4 + samples.length),\n        flags,\n        i; // leave the full box header (4 bytes) all zero\n    // write the sample table\n\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n    }\n\n    return box(types.sdtp, bytes);\n  };\n\n  stbl = function (track) {\n    return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));\n  };\n\n  (function () {\n    var videoSample, audioSample;\n\n    stsd = function (track) {\n      return box(types.stsd, new Uint8Array([0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));\n    };\n\n    videoSample = function (track) {\n      var sps = track.sps || [],\n          pps = track.pps || [],\n          sequenceParameterSets = [],\n          pictureParameterSets = [],\n          i,\n          avc1Box; // assemble the SPSs\n\n      for (i = 0; i < sps.length; i++) {\n        sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n        sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength\n\n        sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n      } // assemble the PPSs\n\n\n      for (i = 0; i < pps.length; i++) {\n        pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n        pictureParameterSets.push(pps[i].byteLength & 0xFF);\n        pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n      }\n\n      avc1Box = [types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined\n      (track.width & 0xff00) >> 8, track.width & 0xff, // width\n      (track.height & 0xff00) >> 8, track.height & 0xff, // height\n      0x00, 0x48, 0x00, 0x00, // horizresolution\n      0x00, 0x48, 0x00, 0x00, // vertresolution\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // frame_count\n      0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname\n      0x00, 0x18, // depth = 24\n      0x11, 0x11 // pre_defined = -1\n      ]), box(types.avcC, new Uint8Array([0x01, // configurationVersion\n      track.profileIdc, // AVCProfileIndication\n      track.profileCompatibility, // profile_compatibility\n      track.levelIdc, // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n      ].concat([sps.length], // numOfSequenceParameterSets\n      sequenceParameterSets, // \"SPS\"\n      [pps.length], // numOfPictureParameterSets\n      pictureParameterSets // \"PPS\"\n      ))), box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n      0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n      0x00, 0x2d, 0xc6, 0xc0 // avgBitrate\n      ]))];\n\n      if (track.sarRatio) {\n        var hSpacing = track.sarRatio[0],\n            vSpacing = track.sarRatio[1];\n        avc1Box.push(box(types.pasp, new Uint8Array([(hSpacing & 0xFF000000) >> 24, (hSpacing & 0xFF0000) >> 16, (hSpacing & 0xFF00) >> 8, hSpacing & 0xFF, (vSpacing & 0xFF000000) >> 24, (vSpacing & 0xFF0000) >> 16, (vSpacing & 0xFF00) >> 8, vSpacing & 0xFF])));\n      }\n\n      return box.apply(null, avc1Box);\n    };\n\n    audioSample = function (track) {\n      return box(types.mp4a, new Uint8Array([// SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff, // channelcount\n      (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff, // samplesize\n      0x00, 0x00, // pre_defined\n      0x00, 0x00, // reserved\n      (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n      ]), esds(track));\n    };\n  })();\n\n  tkhd = function (track) {\n    var result = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x07, // flags\n    0x00, 0x00, 0x00, 0x00, // creation_time\n    0x00, 0x00, 0x00, 0x00, // modification_time\n    (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x00, // reserved\n    (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF, // duration\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved\n    0x00, 0x00, // layer\n    0x00, 0x00, // alternate_group\n    0x01, 0x00, // non-audio track volume\n    0x00, 0x00, // reserved\n    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n    (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00, // width\n    (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height\n    ]);\n    return box(types.tkhd, result);\n  };\n  /**\n   * Generate a track fragment (traf) box. A traf box collects metadata\n   * about tracks in a movie fragment (moof) box.\n   */\n\n\n  traf = function (track) {\n    var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n    trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x3a, // flags\n    (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x01, // sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x00, 0x00, 0x00 // default_sample_flags\n    ]));\n    upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / MAX_UINT32);\n    lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % MAX_UINT32);\n    trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01, // version 1\n    0x00, 0x00, 0x00, // flags\n    // baseMediaDecodeTime\n    upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF])); // the data offset specifies the number of bytes from the start of\n    // the containing moof to the first payload byte of the associated\n    // mdat\n\n    dataOffset = 32 + // tfhd\n    20 + // tfdt\n    8 + // traf header\n    16 + // mfhd\n    8 + // moof header\n    8; // mdat header\n    // audio tracks require less metadata\n\n    if (track.type === 'audio') {\n      trackFragmentRun = trun$1(track, dataOffset);\n      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);\n    } // video tracks should contain an independent and disposable samples\n    // box (sdtp)\n    // generate one and adjust offsets to match\n\n\n    sampleDependencyTable = sdtp(track);\n    trackFragmentRun = trun$1(track, sampleDependencyTable.length + dataOffset);\n    return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);\n  };\n  /**\n   * Generate a track box.\n   * @param track {object} a track definition\n   * @return {Uint8Array} the track box\n   */\n\n\n  trak = function (track) {\n    track.duration = track.duration || 0xffffffff;\n    return box(types.trak, tkhd(track), mdia(track));\n  };\n\n  trex = function (track) {\n    var result = new Uint8Array([0x00, // version 0\n    0x00, 0x00, 0x00, // flags\n    (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF, // track_ID\n    0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00, // default_sample_duration\n    0x00, 0x00, 0x00, 0x00, // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n    ]); // the last two bytes of default_sample_flags is the sample\n    // degradation priority, a hint about the importance of this sample\n    // relative to others. Lower the degradation priority for all sample\n    // types other than video.\n\n    if (track.type !== 'video') {\n      result[result.length - 1] = 0x00;\n    }\n\n    return box(types.trex, result);\n  };\n\n  (function () {\n    var audioTrun, videoTrun, trunHeader; // This method assumes all samples are uniform. That is, if a\n    // duration is present for the first sample, it will be present for\n    // all subsequent samples.\n    // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n\n    trunHeader = function (samples, offset) {\n      var durationPresent = 0,\n          sizePresent = 0,\n          flagsPresent = 0,\n          compositionTimeOffset = 0; // trun flag constants\n\n      if (samples.length) {\n        if (samples[0].duration !== undefined) {\n          durationPresent = 0x1;\n        }\n\n        if (samples[0].size !== undefined) {\n          sizePresent = 0x2;\n        }\n\n        if (samples[0].flags !== undefined) {\n          flagsPresent = 0x4;\n        }\n\n        if (samples[0].compositionTimeOffset !== undefined) {\n          compositionTimeOffset = 0x8;\n        }\n      }\n\n      return [0x00, // version 0\n      0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01, // flags\n      (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF, // sample_count\n      (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset\n      ];\n    };\n\n    videoTrun = function (track, offset) {\n      var bytesOffest, bytes, header, samples, sample, i;\n      samples = track.samples || [];\n      offset += 8 + 12 + 16 * samples.length;\n      header = trunHeader(samples, offset);\n      bytes = new Uint8Array(header.length + samples.length * 16);\n      bytes.set(header);\n      bytesOffest = header.length;\n\n      for (i = 0; i < samples.length; i++) {\n        sample = samples[i];\n        bytes[bytesOffest++] = (sample.duration & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.duration & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.duration & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.duration & 0xFF; // sample_duration\n\n        bytes[bytesOffest++] = (sample.size & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.size & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.size & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.size & 0xFF; // sample_size\n\n        bytes[bytesOffest++] = sample.flags.isLeading << 2 | sample.flags.dependsOn;\n        bytes[bytesOffest++] = sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample;\n        bytes[bytesOffest++] = sample.flags.degradationPriority & 0xF0 << 8;\n        bytes[bytesOffest++] = sample.flags.degradationPriority & 0x0F; // sample_flags\n\n        bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.compositionTimeOffset & 0xFF; // sample_composition_time_offset\n      }\n\n      return box(types.trun, bytes);\n    };\n\n    audioTrun = function (track, offset) {\n      var bytes, bytesOffest, header, samples, sample, i;\n      samples = track.samples || [];\n      offset += 8 + 12 + 8 * samples.length;\n      header = trunHeader(samples, offset);\n      bytes = new Uint8Array(header.length + samples.length * 8);\n      bytes.set(header);\n      bytesOffest = header.length;\n\n      for (i = 0; i < samples.length; i++) {\n        sample = samples[i];\n        bytes[bytesOffest++] = (sample.duration & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.duration & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.duration & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.duration & 0xFF; // sample_duration\n\n        bytes[bytesOffest++] = (sample.size & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.size & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.size & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.size & 0xFF; // sample_size\n      }\n\n      return box(types.trun, bytes);\n    };\n\n    trun$1 = function (track, offset) {\n      if (track.type === 'audio') {\n        return audioTrun(track, offset);\n      }\n\n      return videoTrun(track, offset);\n    };\n  })();\n\n  var mp4Generator = {\n    ftyp: ftyp,\n    mdat: mdat,\n    moof: moof,\n    moov: moov,\n    initSegment: function (tracks) {\n      var fileType = ftyp(),\n          movie = moov(tracks),\n          result;\n      result = new Uint8Array(fileType.byteLength + movie.byteLength);\n      result.set(fileType);\n      result.set(movie, fileType.byteLength);\n      return result;\n    }\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n  // composed of the nal units that make up that frame\n  // Also keep track of cummulative data about the frame from the nal units such\n  // as the frame duration, starting pts, etc.\n\n  var groupNalsIntoFrames = function (nalUnits) {\n    var i,\n        currentNal,\n        currentFrame = [],\n        frames = []; // TODO added for LHLS, make sure this is OK\n\n    frames.byteLength = 0;\n    frames.nalCount = 0;\n    frames.duration = 0;\n    currentFrame.byteLength = 0;\n\n    for (i = 0; i < nalUnits.length; i++) {\n      currentNal = nalUnits[i]; // Split on 'aud'-type nal units\n\n      if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        // Since the very first nal unit is expected to be an AUD\n        // only push to the frames array when currentFrame is not empty\n        if (currentFrame.length) {\n          currentFrame.duration = currentNal.dts - currentFrame.dts; // TODO added for LHLS, make sure this is OK\n\n          frames.byteLength += currentFrame.byteLength;\n          frames.nalCount += currentFrame.length;\n          frames.duration += currentFrame.duration;\n          frames.push(currentFrame);\n        }\n\n        currentFrame = [currentNal];\n        currentFrame.byteLength = currentNal.data.byteLength;\n        currentFrame.pts = currentNal.pts;\n        currentFrame.dts = currentNal.dts;\n      } else {\n        // Specifically flag key frames for ease of use later\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          currentFrame.keyFrame = true;\n        }\n\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        currentFrame.byteLength += currentNal.data.byteLength;\n        currentFrame.push(currentNal);\n      }\n    } // For the last frame, use the duration of the previous frame if we\n    // have nothing better to go on\n\n\n    if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {\n      currentFrame.duration = frames[frames.length - 1].duration;\n    } // Push the final frame\n    // TODO added for LHLS, make sure this is OK\n\n\n    frames.byteLength += currentFrame.byteLength;\n    frames.nalCount += currentFrame.length;\n    frames.duration += currentFrame.duration;\n    frames.push(currentFrame);\n    return frames;\n  }; // Convert an array of frames into an array of Gop with each Gop being composed\n  // of the frames that make up that Gop\n  // Also keep track of cummulative data about the Gop from the frames such as the\n  // Gop duration, starting pts, etc.\n\n\n  var groupFramesIntoGops = function (frames) {\n    var i,\n        currentFrame,\n        currentGop = [],\n        gops = []; // We must pre-set some of the values on the Gop since we\n    // keep running totals of these values\n\n    currentGop.byteLength = 0;\n    currentGop.nalCount = 0;\n    currentGop.duration = 0;\n    currentGop.pts = frames[0].pts;\n    currentGop.dts = frames[0].dts; // store some metadata about all the Gops\n\n    gops.byteLength = 0;\n    gops.nalCount = 0;\n    gops.duration = 0;\n    gops.pts = frames[0].pts;\n    gops.dts = frames[0].dts;\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n\n      if (currentFrame.keyFrame) {\n        // Since the very first frame is expected to be an keyframe\n        // only push to the gops array when currentGop is not empty\n        if (currentGop.length) {\n          gops.push(currentGop);\n          gops.byteLength += currentGop.byteLength;\n          gops.nalCount += currentGop.nalCount;\n          gops.duration += currentGop.duration;\n        }\n\n        currentGop = [currentFrame];\n        currentGop.nalCount = currentFrame.length;\n        currentGop.byteLength = currentFrame.byteLength;\n        currentGop.pts = currentFrame.pts;\n        currentGop.dts = currentFrame.dts;\n        currentGop.duration = currentFrame.duration;\n      } else {\n        currentGop.duration += currentFrame.duration;\n        currentGop.nalCount += currentFrame.length;\n        currentGop.byteLength += currentFrame.byteLength;\n        currentGop.push(currentFrame);\n      }\n    }\n\n    if (gops.length && currentGop.duration <= 0) {\n      currentGop.duration = gops[gops.length - 1].duration;\n    }\n\n    gops.byteLength += currentGop.byteLength;\n    gops.nalCount += currentGop.nalCount;\n    gops.duration += currentGop.duration; // push the final Gop\n\n    gops.push(currentGop);\n    return gops;\n  };\n  /*\n   * Search for the first keyframe in the GOPs and throw away all frames\n   * until that keyframe. Then extend the duration of the pulled keyframe\n   * and pull the PTS and DTS of the keyframe so that it covers the time\n   * range of the frames that were disposed.\n   *\n   * @param {Array} gops video GOPs\n   * @returns {Array} modified video GOPs\n   */\n\n\n  var extendFirstKeyFrame = function (gops) {\n    var currentGop;\n\n    if (!gops[0][0].keyFrame && gops.length > 1) {\n      // Remove the first GOP\n      currentGop = gops.shift();\n      gops.byteLength -= currentGop.byteLength;\n      gops.nalCount -= currentGop.nalCount; // Extend the first frame of what is now the\n      // first gop to cover the time period of the\n      // frames we just removed\n\n      gops[0][0].dts = currentGop.dts;\n      gops[0][0].pts = currentGop.pts;\n      gops[0][0].duration += currentGop.duration;\n    }\n\n    return gops;\n  };\n  /**\n   * Default sample object\n   * see ISO/IEC 14496-12:2012, section 8.6.4.3\n   */\n\n\n  var createDefaultSample = function () {\n    return {\n      size: 0,\n      flags: {\n        isLeading: 0,\n        dependsOn: 1,\n        isDependedOn: 0,\n        hasRedundancy: 0,\n        degradationPriority: 0,\n        isNonSyncSample: 1\n      }\n    };\n  };\n  /*\n   * Collates information from a video frame into an object for eventual\n   * entry into an MP4 sample table.\n   *\n   * @param {Object} frame the video frame\n   * @param {Number} dataOffset the byte offset to position the sample\n   * @return {Object} object containing sample table info for a frame\n   */\n\n\n  var sampleForFrame = function (frame, dataOffset) {\n    var sample = createDefaultSample();\n    sample.dataOffset = dataOffset;\n    sample.compositionTimeOffset = frame.pts - frame.dts;\n    sample.duration = frame.duration;\n    sample.size = 4 * frame.length; // Space for nal unit size\n\n    sample.size += frame.byteLength;\n\n    if (frame.keyFrame) {\n      sample.flags.dependsOn = 2;\n      sample.flags.isNonSyncSample = 0;\n    }\n\n    return sample;\n  }; // generate the track's sample table from an array of gops\n\n\n  var generateSampleTable$1 = function (gops, baseDataOffset) {\n    var h,\n        i,\n        sample,\n        currentGop,\n        currentFrame,\n        dataOffset = baseDataOffset || 0,\n        samples = [];\n\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n        sample = sampleForFrame(currentFrame, dataOffset);\n        dataOffset += sample.size;\n        samples.push(sample);\n      }\n    }\n\n    return samples;\n  }; // generate the track's raw mdat data from an array of gops\n\n\n  var concatenateNalData = function (gops) {\n    var h,\n        i,\n        j,\n        currentGop,\n        currentFrame,\n        currentNal,\n        dataOffset = 0,\n        nalsByteLength = gops.byteLength,\n        numberOfNals = gops.nalCount,\n        totalByteLength = nalsByteLength + 4 * numberOfNals,\n        data = new Uint8Array(totalByteLength),\n        view = new DataView(data.buffer); // For each Gop..\n\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h]; // For each Frame..\n\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i]; // For each NAL..\n\n        for (j = 0; j < currentFrame.length; j++) {\n          currentNal = currentFrame[j];\n          view.setUint32(dataOffset, currentNal.data.byteLength);\n          dataOffset += 4;\n          data.set(currentNal.data, dataOffset);\n          dataOffset += currentNal.data.byteLength;\n        }\n      }\n    }\n\n    return data;\n  }; // generate the track's sample table from a frame\n\n\n  var generateSampleTableForFrame = function (frame, baseDataOffset) {\n    var sample,\n        dataOffset = baseDataOffset || 0,\n        samples = [];\n    sample = sampleForFrame(frame, dataOffset);\n    samples.push(sample);\n    return samples;\n  }; // generate the track's raw mdat data from a frame\n\n\n  var concatenateNalDataForFrame = function (frame) {\n    var i,\n        currentNal,\n        dataOffset = 0,\n        nalsByteLength = frame.byteLength,\n        numberOfNals = frame.length,\n        totalByteLength = nalsByteLength + 4 * numberOfNals,\n        data = new Uint8Array(totalByteLength),\n        view = new DataView(data.buffer); // For each NAL..\n\n    for (i = 0; i < frame.length; i++) {\n      currentNal = frame[i];\n      view.setUint32(dataOffset, currentNal.data.byteLength);\n      dataOffset += 4;\n      data.set(currentNal.data, dataOffset);\n      dataOffset += currentNal.data.byteLength;\n    }\n\n    return data;\n  };\n\n  var frameUtils$1 = {\n    groupNalsIntoFrames: groupNalsIntoFrames,\n    groupFramesIntoGops: groupFramesIntoGops,\n    extendFirstKeyFrame: extendFirstKeyFrame,\n    generateSampleTable: generateSampleTable$1,\n    concatenateNalData: concatenateNalData,\n    generateSampleTableForFrame: generateSampleTableForFrame,\n    concatenateNalDataForFrame: concatenateNalDataForFrame\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var highPrefix = [33, 16, 5, 32, 164, 27];\n  var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\n\n  var zeroFill = function (count) {\n    var a = [];\n\n    while (count--) {\n      a.push(0);\n    }\n\n    return a;\n  };\n\n  var makeTable = function (metaTable) {\n    return Object.keys(metaTable).reduce(function (obj, key) {\n      obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {\n        return arr.concat(part);\n      }, []));\n      return obj;\n    }, {});\n  };\n\n  var silence;\n\n  var silence_1 = function () {\n    if (!silence) {\n      // Frames-of-silence to use for filling in missing AAC frames\n      var coneOfSilence = {\n        96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n        88200: [highPrefix, [231], zeroFill(170), [56]],\n        64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n        48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n        44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n        32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n        24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n        16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n        12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n        11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n        8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n      };\n      silence = makeTable(coneOfSilence);\n    }\n\n    return silence;\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n\n  var ONE_SECOND_IN_TS$4 = 90000,\n      // 90kHz clock\n  secondsToVideoTs,\n      secondsToAudioTs,\n      videoTsToSeconds,\n      audioTsToSeconds,\n      audioTsToVideoTs,\n      videoTsToAudioTs,\n      metadataTsToSeconds;\n\n  secondsToVideoTs = function (seconds) {\n    return seconds * ONE_SECOND_IN_TS$4;\n  };\n\n  secondsToAudioTs = function (seconds, sampleRate) {\n    return seconds * sampleRate;\n  };\n\n  videoTsToSeconds = function (timestamp) {\n    return timestamp / ONE_SECOND_IN_TS$4;\n  };\n\n  audioTsToSeconds = function (timestamp, sampleRate) {\n    return timestamp / sampleRate;\n  };\n\n  audioTsToVideoTs = function (timestamp, sampleRate) {\n    return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n  };\n\n  videoTsToAudioTs = function (timestamp, sampleRate) {\n    return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n  };\n  /**\n   * Adjust ID3 tag or caption timing information by the timeline pts values\n   * (if keepOriginalTimestamps is false) and convert to seconds\n   */\n\n\n  metadataTsToSeconds = function (timestamp, timelineStartPts, keepOriginalTimestamps) {\n    return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);\n  };\n\n  var clock$2 = {\n    ONE_SECOND_IN_TS: ONE_SECOND_IN_TS$4,\n    secondsToVideoTs: secondsToVideoTs,\n    secondsToAudioTs: secondsToAudioTs,\n    videoTsToSeconds: videoTsToSeconds,\n    audioTsToSeconds: audioTsToSeconds,\n    audioTsToVideoTs: audioTsToVideoTs,\n    videoTsToAudioTs: videoTsToAudioTs,\n    metadataTsToSeconds: metadataTsToSeconds\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var coneOfSilence = silence_1;\n  var clock$1 = clock$2;\n  /**\n   * Sum the `byteLength` properties of the data in each AAC frame\n   */\n\n  var sumFrameByteLengths = function (array) {\n    var i,\n        currentObj,\n        sum = 0; // sum the byteLength's all each nal unit in the frame\n\n    for (i = 0; i < array.length; i++) {\n      currentObj = array[i];\n      sum += currentObj.data.byteLength;\n    }\n\n    return sum;\n  }; // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n\n\n  var prefixWithSilence = function (track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {\n    var baseMediaDecodeTimeTs,\n        frameDuration = 0,\n        audioGapDuration = 0,\n        audioFillFrameCount = 0,\n        audioFillDuration = 0,\n        silentFrame,\n        i,\n        firstFrame;\n\n    if (!frames.length) {\n      return;\n    }\n\n    baseMediaDecodeTimeTs = clock$1.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate); // determine frame clock duration based on sample rate, round up to avoid overfills\n\n    frameDuration = Math.ceil(clock$1.ONE_SECOND_IN_TS / (track.samplerate / 1024));\n\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime); // number of full frames in the audio gap\n\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    } // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n\n\n    if (audioFillFrameCount < 1 || audioFillDuration > clock$1.ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n\n    silentFrame = coneOfSilence()[track.samplerate];\n\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n\n    for (i = 0; i < audioFillFrameCount; i++) {\n      firstFrame = frames[0];\n      frames.splice(0, 0, {\n        data: silentFrame,\n        dts: firstFrame.dts - frameDuration,\n        pts: firstFrame.pts - frameDuration\n      });\n    }\n\n    track.baseMediaDecodeTime -= Math.floor(clock$1.videoTsToAudioTs(audioFillDuration, track.samplerate));\n    return audioFillDuration;\n  }; // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n\n\n  var trimAdtsFramesByEarliestDts = function (adtsFrames, track, earliestAllowedDts) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    } // We will need to recalculate the earliest segment Dts\n\n\n    track.minSegmentDts = Infinity;\n    return adtsFrames.filter(function (currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      } // Otherwise, discard it\n\n\n      return false;\n    });\n  }; // generate the track's raw mdat data from an array of frames\n\n\n  var generateSampleTable = function (frames) {\n    var i,\n        currentFrame,\n        samples = [];\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n\n      });\n    }\n\n    return samples;\n  }; // generate the track's sample table from an array of frames\n\n\n  var concatenateFrameData = function (frames) {\n    var i,\n        currentFrame,\n        dataOffset = 0,\n        data = new Uint8Array(sumFrameByteLengths(frames));\n\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n\n    return data;\n  };\n\n  var audioFrameUtils$1 = {\n    prefixWithSilence: prefixWithSilence,\n    trimAdtsFramesByEarliestDts: trimAdtsFramesByEarliestDts,\n    generateSampleTable: generateSampleTable,\n    concatenateFrameData: concatenateFrameData\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var ONE_SECOND_IN_TS$3 = clock$2.ONE_SECOND_IN_TS;\n  /**\n   * Store information about the start and end of the track and the\n   * duration for each frame/sample we process in order to calculate\n   * the baseMediaDecodeTime\n   */\n\n  var collectDtsInfo = function (track, data) {\n    if (typeof data.pts === 'number') {\n      if (track.timelineStartInfo.pts === undefined) {\n        track.timelineStartInfo.pts = data.pts;\n      }\n\n      if (track.minSegmentPts === undefined) {\n        track.minSegmentPts = data.pts;\n      } else {\n        track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n      }\n\n      if (track.maxSegmentPts === undefined) {\n        track.maxSegmentPts = data.pts;\n      } else {\n        track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n      }\n    }\n\n    if (typeof data.dts === 'number') {\n      if (track.timelineStartInfo.dts === undefined) {\n        track.timelineStartInfo.dts = data.dts;\n      }\n\n      if (track.minSegmentDts === undefined) {\n        track.minSegmentDts = data.dts;\n      } else {\n        track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n      }\n\n      if (track.maxSegmentDts === undefined) {\n        track.maxSegmentDts = data.dts;\n      } else {\n        track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n      }\n    }\n  };\n  /**\n   * Clear values used to calculate the baseMediaDecodeTime between\n   * tracks\n   */\n\n\n  var clearDtsInfo = function (track) {\n    delete track.minSegmentDts;\n    delete track.maxSegmentDts;\n    delete track.minSegmentPts;\n    delete track.maxSegmentPts;\n  };\n  /**\n   * Calculate the track's baseMediaDecodeTime based on the earliest\n   * DTS the transmuxer has ever seen and the minimum DTS for the\n   * current track\n   * @param track {object} track metadata configuration\n   * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at 0.\n   */\n\n\n  var calculateTrackBaseMediaDecodeTime = function (track, keepOriginalTimestamps) {\n    var baseMediaDecodeTime,\n        scale,\n        minSegmentDts = track.minSegmentDts; // Optionally adjust the time so the first segment starts at zero.\n\n    if (!keepOriginalTimestamps) {\n      minSegmentDts -= track.timelineStartInfo.dts;\n    } // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n    // we want the start of the first segment to be placed\n\n\n    baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime; // Add to that the distance this segment is from the very first\n\n    baseMediaDecodeTime += minSegmentDts; // baseMediaDecodeTime must not become negative\n\n    baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n\n    if (track.type === 'audio') {\n      // Audio has a different clock equal to the sampling_rate so we need to\n      // scale the PTS values into the clock rate of the track\n      scale = track.samplerate / ONE_SECOND_IN_TS$3;\n      baseMediaDecodeTime *= scale;\n      baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n    }\n\n    return baseMediaDecodeTime;\n  };\n\n  var trackDecodeInfo$1 = {\n    clearDtsInfo: clearDtsInfo,\n    calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n    collectDtsInfo: collectDtsInfo\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Reads in-band caption information from a video elementary\n   * stream. Captions must follow the CEA-708 standard for injection\n   * into an MPEG-2 transport streams.\n   * @see https://en.wikipedia.org/wiki/CEA-708\n   * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n   */\n  // payload type field to indicate how they are to be\n  // interpreted. CEAS-708 caption content is always transmitted with\n  // payload type 0x04.\n\n  var USER_DATA_REGISTERED_ITU_T_T35 = 4,\n      RBSP_TRAILING_BITS = 128;\n  /**\n    * Parse a supplemental enhancement information (SEI) NAL unit.\n    * Stops parsing once a message of type ITU T T35 has been found.\n    *\n    * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n    * @return {object} the parsed SEI payload\n    * @see Rec. ITU-T H.264, 7.3.2.3.1\n    */\n\n  var parseSei = function (bytes) {\n    var i = 0,\n        result = {\n      payloadType: -1,\n      payloadSize: 0\n    },\n        payloadType = 0,\n        payloadSize = 0; // go through the sei_rbsp parsing each each individual sei_message\n\n    while (i < bytes.byteLength) {\n      // stop once we have hit the end of the sei_rbsp\n      if (bytes[i] === RBSP_TRAILING_BITS) {\n        break;\n      } // Parse payload type\n\n\n      while (bytes[i] === 0xFF) {\n        payloadType += 255;\n        i++;\n      }\n\n      payloadType += bytes[i++]; // Parse payload size\n\n      while (bytes[i] === 0xFF) {\n        payloadSize += 255;\n        i++;\n      }\n\n      payloadSize += bytes[i++]; // this sei_message is a 608/708 caption so save it and break\n      // there can only ever be one caption message in a frame's sei\n\n      if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n        var userIdentifier = String.fromCharCode(bytes[i + 3], bytes[i + 4], bytes[i + 5], bytes[i + 6]);\n\n        if (userIdentifier === 'GA94') {\n          result.payloadType = payloadType;\n          result.payloadSize = payloadSize;\n          result.payload = bytes.subarray(i, i + payloadSize);\n          break;\n        } else {\n          result.payload = void 0;\n        }\n      } // skip the payload and parse the next message\n\n\n      i += payloadSize;\n      payloadType = 0;\n      payloadSize = 0;\n    }\n\n    return result;\n  }; // see ANSI/SCTE 128-1 (2013), section 8.1\n\n\n  var parseUserData = function (sei) {\n    // itu_t_t35_contry_code must be 181 (United States) for\n    // captions\n    if (sei.payload[0] !== 181) {\n      return null;\n    } // itu_t_t35_provider_code should be 49 (ATSC) for captions\n\n\n    if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {\n      return null;\n    } // the user_identifier should be \"GA94\" to indicate ATSC1 data\n\n\n    if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {\n      return null;\n    } // finally, user_data_type_code should be 0x03 for caption data\n\n\n    if (sei.payload[7] !== 0x03) {\n      return null;\n    } // return the user_data_type_structure and strip the trailing\n    // marker bits\n\n\n    return sei.payload.subarray(8, sei.payload.length - 1);\n  }; // see CEA-708-D, section 4.4\n\n\n  var parseCaptionPackets = function (pts, userData) {\n    var results = [],\n        i,\n        count,\n        offset,\n        data; // if this is just filler, return immediately\n\n    if (!(userData[0] & 0x40)) {\n      return results;\n    } // parse out the cc_data_1 and cc_data_2 fields\n\n\n    count = userData[0] & 0x1f;\n\n    for (i = 0; i < count; i++) {\n      offset = i * 3;\n      data = {\n        type: userData[offset + 2] & 0x03,\n        pts: pts\n      }; // capture cc data when cc_valid is 1\n\n      if (userData[offset + 2] & 0x04) {\n        data.ccData = userData[offset + 3] << 8 | userData[offset + 4];\n        results.push(data);\n      }\n    }\n\n    return results;\n  };\n\n  var discardEmulationPreventionBytes$1 = function (data) {\n    var length = data.byteLength,\n        emulationPreventionBytesPositions = [],\n        i = 1,\n        newLength,\n        newData; // Find all `Emulation Prevention Bytes`\n\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    } // If no Emulation Prevention Bytes were found just return the original\n    // array\n\n\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    } // Create a new array to hold the NAL unit data\n\n\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++; // Remove this position index\n\n        emulationPreventionBytesPositions.shift();\n      }\n\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  }; // exports\n\n\n  var captionPacketParser = {\n    parseSei: parseSei,\n    parseUserData: parseUserData,\n    parseCaptionPackets: parseCaptionPackets,\n    discardEmulationPreventionBytes: discardEmulationPreventionBytes$1,\n    USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Reads in-band caption information from a video elementary\n   * stream. Captions must follow the CEA-708 standard for injection\n   * into an MPEG-2 transport streams.\n   * @see https://en.wikipedia.org/wiki/CEA-708\n   * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n   */\n  // Link To Transport\n  // -----------------\n\n  var Stream$7 = stream;\n  var cea708Parser = captionPacketParser;\n\n  var CaptionStream$2 = function (options) {\n    options = options || {};\n    CaptionStream$2.prototype.init.call(this); // parse708captions flag, default to true\n\n    this.parse708captions_ = typeof options.parse708captions === 'boolean' ? options.parse708captions : true;\n    this.captionPackets_ = [];\n    this.ccStreams_ = [new Cea608Stream(0, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0), // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n    ];\n\n    if (this.parse708captions_) {\n      this.cc708Stream_ = new Cea708Stream({\n        captionServices: options.captionServices\n      }); // eslint-disable-line no-use-before-define\n    }\n\n    this.reset(); // forward data and done events from CCs to this CaptionStream\n\n    this.ccStreams_.forEach(function (cc) {\n      cc.on('data', this.trigger.bind(this, 'data'));\n      cc.on('partialdone', this.trigger.bind(this, 'partialdone'));\n      cc.on('done', this.trigger.bind(this, 'done'));\n    }, this);\n\n    if (this.parse708captions_) {\n      this.cc708Stream_.on('data', this.trigger.bind(this, 'data'));\n      this.cc708Stream_.on('partialdone', this.trigger.bind(this, 'partialdone'));\n      this.cc708Stream_.on('done', this.trigger.bind(this, 'done'));\n    }\n  };\n\n  CaptionStream$2.prototype = new Stream$7();\n\n  CaptionStream$2.prototype.push = function (event) {\n    var sei, userData, newCaptionPackets; // only examine SEI NALs\n\n    if (event.nalUnitType !== 'sei_rbsp') {\n      return;\n    } // parse the sei\n\n\n    sei = cea708Parser.parseSei(event.escapedRBSP); // no payload data, skip\n\n    if (!sei.payload) {\n      return;\n    } // ignore everything but user_data_registered_itu_t_t35\n\n\n    if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) {\n      return;\n    } // parse out the user data payload\n\n\n    userData = cea708Parser.parseUserData(sei); // ignore unrecognized userData\n\n    if (!userData) {\n      return;\n    } // Sometimes, the same segment # will be downloaded twice. To stop the\n    // caption data from being processed twice, we track the latest dts we've\n    // received and ignore everything with a dts before that. However, since\n    // data for a specific dts can be split across packets on either side of\n    // a segment boundary, we need to make sure we *don't* ignore the packets\n    // from the *next* segment that have dts === this.latestDts_. By constantly\n    // tracking the number of packets received with dts === this.latestDts_, we\n    // know how many should be ignored once we start receiving duplicates.\n\n\n    if (event.dts < this.latestDts_) {\n      // We've started getting older data, so set the flag.\n      this.ignoreNextEqualDts_ = true;\n      return;\n    } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {\n      this.numSameDts_--;\n\n      if (!this.numSameDts_) {\n        // We've received the last duplicate packet, time to start processing again\n        this.ignoreNextEqualDts_ = false;\n      }\n\n      return;\n    } // parse out CC data packets and save them for later\n\n\n    newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);\n    this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n\n    if (this.latestDts_ !== event.dts) {\n      this.numSameDts_ = 0;\n    }\n\n    this.numSameDts_++;\n    this.latestDts_ = event.dts;\n  };\n\n  CaptionStream$2.prototype.flushCCStreams = function (flushType) {\n    this.ccStreams_.forEach(function (cc) {\n      return flushType === 'flush' ? cc.flush() : cc.partialFlush();\n    }, this);\n  };\n\n  CaptionStream$2.prototype.flushStream = function (flushType) {\n    // make sure we actually parsed captions before proceeding\n    if (!this.captionPackets_.length) {\n      this.flushCCStreams(flushType);\n      return;\n    } // In Chrome, the Array#sort function is not stable so add a\n    // presortIndex that we can use to ensure we get a stable-sort\n\n\n    this.captionPackets_.forEach(function (elem, idx) {\n      elem.presortIndex = idx;\n    }); // sort caption byte-pairs based on their PTS values\n\n    this.captionPackets_.sort(function (a, b) {\n      if (a.pts === b.pts) {\n        return a.presortIndex - b.presortIndex;\n      }\n\n      return a.pts - b.pts;\n    });\n    this.captionPackets_.forEach(function (packet) {\n      if (packet.type < 2) {\n        // Dispatch packet to the right Cea608Stream\n        this.dispatchCea608Packet(packet);\n      } else {\n        // Dispatch packet to the Cea708Stream\n        this.dispatchCea708Packet(packet);\n      }\n    }, this);\n    this.captionPackets_.length = 0;\n    this.flushCCStreams(flushType);\n  };\n\n  CaptionStream$2.prototype.flush = function () {\n    return this.flushStream('flush');\n  }; // Only called if handling partial data\n\n\n  CaptionStream$2.prototype.partialFlush = function () {\n    return this.flushStream('partialFlush');\n  };\n\n  CaptionStream$2.prototype.reset = function () {\n    this.latestDts_ = null;\n    this.ignoreNextEqualDts_ = false;\n    this.numSameDts_ = 0;\n    this.activeCea608Channel_ = [null, null];\n    this.ccStreams_.forEach(function (ccStream) {\n      ccStream.reset();\n    });\n  }; // From the CEA-608 spec:\n\n  /*\n   * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed\n   * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is\n   * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair\n   * and subsequent data should then be processed according to the FCC rules. It may be necessary for the\n   * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)\n   * to switch to captioning or Text.\n  */\n  // With that in mind, we ignore any data between an XDS control code and a\n  // subsequent closed-captioning control code.\n\n\n  CaptionStream$2.prototype.dispatchCea608Packet = function (packet) {\n    // NOTE: packet.type is the CEA608 field\n    if (this.setsTextOrXDSActive(packet)) {\n      this.activeCea608Channel_[packet.type] = null;\n    } else if (this.setsChannel1Active(packet)) {\n      this.activeCea608Channel_[packet.type] = 0;\n    } else if (this.setsChannel2Active(packet)) {\n      this.activeCea608Channel_[packet.type] = 1;\n    }\n\n    if (this.activeCea608Channel_[packet.type] === null) {\n      // If we haven't received anything to set the active channel, or the\n      // packets are Text/XDS data, discard the data; we don't want jumbled\n      // captions\n      return;\n    }\n\n    this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n  };\n\n  CaptionStream$2.prototype.setsChannel1Active = function (packet) {\n    return (packet.ccData & 0x7800) === 0x1000;\n  };\n\n  CaptionStream$2.prototype.setsChannel2Active = function (packet) {\n    return (packet.ccData & 0x7800) === 0x1800;\n  };\n\n  CaptionStream$2.prototype.setsTextOrXDSActive = function (packet) {\n    return (packet.ccData & 0x7100) === 0x0100 || (packet.ccData & 0x78fe) === 0x102a || (packet.ccData & 0x78fe) === 0x182a;\n  };\n\n  CaptionStream$2.prototype.dispatchCea708Packet = function (packet) {\n    if (this.parse708captions_) {\n      this.cc708Stream_.push(packet);\n    }\n  }; // ----------------------\n  // Session to Application\n  // ----------------------\n  // This hash maps special and extended character codes to their\n  // proper Unicode equivalent. The first one-byte key is just a\n  // non-standard character code. The two-byte keys that follow are\n  // the extended CEA708 character codes, along with the preceding\n  // 0x10 extended character byte to distinguish these codes from\n  // non-extended character codes. Every CEA708 character code that\n  // is not in this object maps directly to a standard unicode\n  // character code.\n  // The transparent space and non-breaking transparent space are\n  // technically not fully supported since there is no code to\n  // make them transparent, so they have normal non-transparent\n  // stand-ins.\n  // The special closed caption (CC) character isn't a standard\n  // unicode character, so a fairly similar unicode character was\n  // chosen in it's place.\n\n\n  var CHARACTER_TRANSLATION_708 = {\n    0x7f: 0x266a,\n    // ♪\n    0x1020: 0x20,\n    // Transparent Space\n    0x1021: 0xa0,\n    // Nob-breaking Transparent Space\n    0x1025: 0x2026,\n    // …\n    0x102a: 0x0160,\n    // Š\n    0x102c: 0x0152,\n    // Œ\n    0x1030: 0x2588,\n    // █\n    0x1031: 0x2018,\n    // ‘\n    0x1032: 0x2019,\n    // ’\n    0x1033: 0x201c,\n    // “\n    0x1034: 0x201d,\n    // ”\n    0x1035: 0x2022,\n    // •\n    0x1039: 0x2122,\n    // ™\n    0x103a: 0x0161,\n    // š\n    0x103c: 0x0153,\n    // œ\n    0x103d: 0x2120,\n    // ℠\n    0x103f: 0x0178,\n    // Ÿ\n    0x1076: 0x215b,\n    // ⅛\n    0x1077: 0x215c,\n    // ⅜\n    0x1078: 0x215d,\n    // ⅝\n    0x1079: 0x215e,\n    // ⅞\n    0x107a: 0x23d0,\n    // ⏐\n    0x107b: 0x23a4,\n    // ⎤\n    0x107c: 0x23a3,\n    // ⎣\n    0x107d: 0x23af,\n    // ⎯\n    0x107e: 0x23a6,\n    // ⎦\n    0x107f: 0x23a1,\n    // ⎡\n    0x10a0: 0x3138 // ㄸ (CC char)\n\n  };\n\n  var get708CharFromCode = function (code) {\n    var newCode = CHARACTER_TRANSLATION_708[code] || code;\n\n    if (code & 0x1000 && code === newCode) {\n      // Invalid extended code\n      return '';\n    }\n\n    return String.fromCharCode(newCode);\n  };\n\n  var within708TextBlock = function (b) {\n    return 0x20 <= b && b <= 0x7f || 0xa0 <= b && b <= 0xff;\n  };\n\n  var Cea708Window = function (windowNum) {\n    this.windowNum = windowNum;\n    this.reset();\n  };\n\n  Cea708Window.prototype.reset = function () {\n    this.clearText();\n    this.pendingNewLine = false;\n    this.winAttr = {};\n    this.penAttr = {};\n    this.penLoc = {};\n    this.penColor = {}; // These default values are arbitrary,\n    // defineWindow will usually override them\n\n    this.visible = 0;\n    this.rowLock = 0;\n    this.columnLock = 0;\n    this.priority = 0;\n    this.relativePositioning = 0;\n    this.anchorVertical = 0;\n    this.anchorHorizontal = 0;\n    this.anchorPoint = 0;\n    this.rowCount = 1;\n    this.virtualRowCount = this.rowCount + 1;\n    this.columnCount = 41;\n    this.windowStyle = 0;\n    this.penStyle = 0;\n  };\n\n  Cea708Window.prototype.getText = function () {\n    return this.rows.join('\\n');\n  };\n\n  Cea708Window.prototype.clearText = function () {\n    this.rows = [''];\n    this.rowIdx = 0;\n  };\n\n  Cea708Window.prototype.newLine = function (pts) {\n    if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === 'function') {\n      this.beforeRowOverflow(pts);\n    }\n\n    if (this.rows.length > 0) {\n      this.rows.push('');\n      this.rowIdx++;\n    } // Show all virtual rows since there's no visible scrolling\n\n\n    while (this.rows.length > this.virtualRowCount) {\n      this.rows.shift();\n      this.rowIdx--;\n    }\n  };\n\n  Cea708Window.prototype.isEmpty = function () {\n    if (this.rows.length === 0) {\n      return true;\n    } else if (this.rows.length === 1) {\n      return this.rows[0] === '';\n    }\n\n    return false;\n  };\n\n  Cea708Window.prototype.addText = function (text) {\n    this.rows[this.rowIdx] += text;\n  };\n\n  Cea708Window.prototype.backspace = function () {\n    if (!this.isEmpty()) {\n      var row = this.rows[this.rowIdx];\n      this.rows[this.rowIdx] = row.substr(0, row.length - 1);\n    }\n  };\n\n  var Cea708Service = function (serviceNum, encoding, stream) {\n    this.serviceNum = serviceNum;\n    this.text = '';\n    this.currentWindow = new Cea708Window(-1);\n    this.windows = [];\n    this.stream = stream; // Try to setup a TextDecoder if an `encoding` value was provided\n\n    if (typeof encoding === 'string') {\n      this.createTextDecoder(encoding);\n    }\n  };\n  /**\n   * Initialize service windows\n   * Must be run before service use\n   *\n   * @param  {Integer}  pts               PTS value\n   * @param  {Function} beforeRowOverflow Function to execute before row overflow of a window\n   */\n\n\n  Cea708Service.prototype.init = function (pts, beforeRowOverflow) {\n    this.startPts = pts;\n\n    for (var win = 0; win < 8; win++) {\n      this.windows[win] = new Cea708Window(win);\n\n      if (typeof beforeRowOverflow === 'function') {\n        this.windows[win].beforeRowOverflow = beforeRowOverflow;\n      }\n    }\n  };\n  /**\n   * Set current window of service to be affected by commands\n   *\n   * @param  {Integer} windowNum Window number\n   */\n\n\n  Cea708Service.prototype.setCurrentWindow = function (windowNum) {\n    this.currentWindow = this.windows[windowNum];\n  };\n  /**\n   * Try to create a TextDecoder if it is natively supported\n   */\n\n\n  Cea708Service.prototype.createTextDecoder = function (encoding) {\n    if (typeof TextDecoder === 'undefined') {\n      this.stream.trigger('log', {\n        level: 'warn',\n        message: 'The `encoding` option is unsupported without TextDecoder support'\n      });\n    } else {\n      try {\n        this.textDecoder_ = new TextDecoder(encoding);\n      } catch (error) {\n        this.stream.trigger('log', {\n          level: 'warn',\n          message: 'TextDecoder could not be created with ' + encoding + ' encoding. ' + error\n        });\n      }\n    }\n  };\n\n  var Cea708Stream = function (options) {\n    options = options || {};\n    Cea708Stream.prototype.init.call(this);\n    var self = this;\n    var captionServices = options.captionServices || {};\n    var captionServiceEncodings = {};\n    var serviceProps; // Get service encodings from captionServices option block\n\n    Object.keys(captionServices).forEach(serviceName => {\n      serviceProps = captionServices[serviceName];\n\n      if (/^SERVICE/.test(serviceName)) {\n        captionServiceEncodings[serviceName] = serviceProps.encoding;\n      }\n    });\n    this.serviceEncodings = captionServiceEncodings;\n    this.current708Packet = null;\n    this.services = {};\n\n    this.push = function (packet) {\n      if (packet.type === 3) {\n        // 708 packet start\n        self.new708Packet();\n        self.add708Bytes(packet);\n      } else {\n        if (self.current708Packet === null) {\n          // This should only happen at the start of a file if there's no packet start.\n          self.new708Packet();\n        }\n\n        self.add708Bytes(packet);\n      }\n    };\n  };\n\n  Cea708Stream.prototype = new Stream$7();\n  /**\n   * Push current 708 packet, create new 708 packet.\n   */\n\n  Cea708Stream.prototype.new708Packet = function () {\n    if (this.current708Packet !== null) {\n      this.push708Packet();\n    }\n\n    this.current708Packet = {\n      data: [],\n      ptsVals: []\n    };\n  };\n  /**\n   * Add pts and both bytes from packet into current 708 packet.\n   */\n\n\n  Cea708Stream.prototype.add708Bytes = function (packet) {\n    var data = packet.ccData;\n    var byte0 = data >>> 8;\n    var byte1 = data & 0xff; // I would just keep a list of packets instead of bytes, but it isn't clear in the spec\n    // that service blocks will always line up with byte pairs.\n\n    this.current708Packet.ptsVals.push(packet.pts);\n    this.current708Packet.data.push(byte0);\n    this.current708Packet.data.push(byte1);\n  };\n  /**\n   * Parse completed 708 packet into service blocks and push each service block.\n   */\n\n\n  Cea708Stream.prototype.push708Packet = function () {\n    var packet708 = this.current708Packet;\n    var packetData = packet708.data;\n    var serviceNum = null;\n    var blockSize = null;\n    var i = 0;\n    var b = packetData[i++];\n    packet708.seq = b >> 6;\n    packet708.sizeCode = b & 0x3f; // 0b00111111;\n\n    for (; i < packetData.length; i++) {\n      b = packetData[i++];\n      serviceNum = b >> 5;\n      blockSize = b & 0x1f; // 0b00011111\n\n      if (serviceNum === 7 && blockSize > 0) {\n        // Extended service num\n        b = packetData[i++];\n        serviceNum = b;\n      }\n\n      this.pushServiceBlock(serviceNum, i, blockSize);\n\n      if (blockSize > 0) {\n        i += blockSize - 1;\n      }\n    }\n  };\n  /**\n   * Parse service block, execute commands, read text.\n   *\n   * Note: While many of these commands serve important purposes,\n   * many others just parse out the parameters or attributes, but\n   * nothing is done with them because this is not a full and complete\n   * implementation of the entire 708 spec.\n   *\n   * @param  {Integer} serviceNum Service number\n   * @param  {Integer} start      Start index of the 708 packet data\n   * @param  {Integer} size       Block size\n   */\n\n\n  Cea708Stream.prototype.pushServiceBlock = function (serviceNum, start, size) {\n    var b;\n    var i = start;\n    var packetData = this.current708Packet.data;\n    var service = this.services[serviceNum];\n\n    if (!service) {\n      service = this.initService(serviceNum, i);\n    }\n\n    for (; i < start + size && i < packetData.length; i++) {\n      b = packetData[i];\n\n      if (within708TextBlock(b)) {\n        i = this.handleText(i, service);\n      } else if (b === 0x18) {\n        i = this.multiByteCharacter(i, service);\n      } else if (b === 0x10) {\n        i = this.extendedCommands(i, service);\n      } else if (0x80 <= b && b <= 0x87) {\n        i = this.setCurrentWindow(i, service);\n      } else if (0x98 <= b && b <= 0x9f) {\n        i = this.defineWindow(i, service);\n      } else if (b === 0x88) {\n        i = this.clearWindows(i, service);\n      } else if (b === 0x8c) {\n        i = this.deleteWindows(i, service);\n      } else if (b === 0x89) {\n        i = this.displayWindows(i, service);\n      } else if (b === 0x8a) {\n        i = this.hideWindows(i, service);\n      } else if (b === 0x8b) {\n        i = this.toggleWindows(i, service);\n      } else if (b === 0x97) {\n        i = this.setWindowAttributes(i, service);\n      } else if (b === 0x90) {\n        i = this.setPenAttributes(i, service);\n      } else if (b === 0x91) {\n        i = this.setPenColor(i, service);\n      } else if (b === 0x92) {\n        i = this.setPenLocation(i, service);\n      } else if (b === 0x8f) {\n        service = this.reset(i, service);\n      } else if (b === 0x08) {\n        // BS: Backspace\n        service.currentWindow.backspace();\n      } else if (b === 0x0c) {\n        // FF: Form feed\n        service.currentWindow.clearText();\n      } else if (b === 0x0d) {\n        // CR: Carriage return\n        service.currentWindow.pendingNewLine = true;\n      } else if (b === 0x0e) {\n        // HCR: Horizontal carriage return\n        service.currentWindow.clearText();\n      } else if (b === 0x8d) {\n        // DLY: Delay, nothing to do\n        i++;\n      } else ;\n    }\n  };\n  /**\n   * Execute an extended command\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.extendedCommands = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n\n    if (within708TextBlock(b)) {\n      i = this.handleText(i, service, {\n        isExtended: true\n      });\n    }\n\n    return i;\n  };\n  /**\n   * Get PTS value of a given byte index\n   *\n   * @param  {Integer} byteIndex  Index of the byte\n   * @return {Integer}            PTS\n   */\n\n\n  Cea708Stream.prototype.getPts = function (byteIndex) {\n    // There's 1 pts value per 2 bytes\n    return this.current708Packet.ptsVals[Math.floor(byteIndex / 2)];\n  };\n  /**\n   * Initializes a service\n   *\n   * @param  {Integer} serviceNum Service number\n   * @return {Service}            Initialized service object\n   */\n\n\n  Cea708Stream.prototype.initService = function (serviceNum, i) {\n    var serviceName = 'SERVICE' + serviceNum;\n    var self = this;\n    var serviceName;\n    var encoding;\n\n    if (serviceName in this.serviceEncodings) {\n      encoding = this.serviceEncodings[serviceName];\n    }\n\n    this.services[serviceNum] = new Cea708Service(serviceNum, encoding, self);\n    this.services[serviceNum].init(this.getPts(i), function (pts) {\n      self.flushDisplayed(pts, self.services[serviceNum]);\n    });\n    return this.services[serviceNum];\n  };\n  /**\n   * Execute text writing to current window\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.handleText = function (i, service, options) {\n    var isExtended = options && options.isExtended;\n    var isMultiByte = options && options.isMultiByte;\n    var packetData = this.current708Packet.data;\n    var extended = isExtended ? 0x1000 : 0x0000;\n    var currentByte = packetData[i];\n    var nextByte = packetData[i + 1];\n    var win = service.currentWindow;\n    var char;\n    var charCodeArray; // Converts an array of bytes to a unicode hex string.\n\n    function toHexString(byteArray) {\n      return byteArray.map(byte => {\n        return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n      }).join('');\n    }\n\n    if (isMultiByte) {\n      charCodeArray = [currentByte, nextByte];\n      i++;\n    } else {\n      charCodeArray = [currentByte];\n    } // Use the TextDecoder if one was created for this service\n\n\n    if (service.textDecoder_ && !isExtended) {\n      char = service.textDecoder_.decode(new Uint8Array(charCodeArray));\n    } else {\n      // We assume any multi-byte char without a decoder is unicode.\n      if (isMultiByte) {\n        const unicode = toHexString(charCodeArray); // Takes a unicode hex string and creates a single character.\n\n        char = String.fromCharCode(parseInt(unicode, 16));\n      } else {\n        char = get708CharFromCode(extended | currentByte);\n      }\n    }\n\n    if (win.pendingNewLine && !win.isEmpty()) {\n      win.newLine(this.getPts(i));\n    }\n\n    win.pendingNewLine = false;\n    win.addText(char);\n    return i;\n  };\n  /**\n   * Handle decoding of multibyte character\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.multiByteCharacter = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var firstByte = packetData[i + 1];\n    var secondByte = packetData[i + 2];\n\n    if (within708TextBlock(firstByte) && within708TextBlock(secondByte)) {\n      i = this.handleText(++i, service, {\n        isMultiByte: true\n      });\n    }\n\n    return i;\n  };\n  /**\n   * Parse and execute the CW# command.\n   *\n   * Set the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.setCurrentWindow = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var windowNum = b & 0x07;\n    service.setCurrentWindow(windowNum);\n    return i;\n  };\n  /**\n   * Parse and execute the DF# command.\n   *\n   * Define a window and set it as the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.defineWindow = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var windowNum = b & 0x07;\n    service.setCurrentWindow(windowNum);\n    var win = service.currentWindow;\n    b = packetData[++i];\n    win.visible = (b & 0x20) >> 5; // v\n\n    win.rowLock = (b & 0x10) >> 4; // rl\n\n    win.columnLock = (b & 0x08) >> 3; // cl\n\n    win.priority = b & 0x07; // p\n\n    b = packetData[++i];\n    win.relativePositioning = (b & 0x80) >> 7; // rp\n\n    win.anchorVertical = b & 0x7f; // av\n\n    b = packetData[++i];\n    win.anchorHorizontal = b; // ah\n\n    b = packetData[++i];\n    win.anchorPoint = (b & 0xf0) >> 4; // ap\n\n    win.rowCount = b & 0x0f; // rc\n\n    b = packetData[++i];\n    win.columnCount = b & 0x3f; // cc\n\n    b = packetData[++i];\n    win.windowStyle = (b & 0x38) >> 3; // ws\n\n    win.penStyle = b & 0x07; // ps\n    // The spec says there are (rowCount+1) \"virtual rows\"\n\n    win.virtualRowCount = win.rowCount + 1;\n    return i;\n  };\n  /**\n   * Parse and execute the SWA command.\n   *\n   * Set attributes of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.setWindowAttributes = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var winAttr = service.currentWindow.winAttr;\n    b = packetData[++i];\n    winAttr.fillOpacity = (b & 0xc0) >> 6; // fo\n\n    winAttr.fillRed = (b & 0x30) >> 4; // fr\n\n    winAttr.fillGreen = (b & 0x0c) >> 2; // fg\n\n    winAttr.fillBlue = b & 0x03; // fb\n\n    b = packetData[++i];\n    winAttr.borderType = (b & 0xc0) >> 6; // bt\n\n    winAttr.borderRed = (b & 0x30) >> 4; // br\n\n    winAttr.borderGreen = (b & 0x0c) >> 2; // bg\n\n    winAttr.borderBlue = b & 0x03; // bb\n\n    b = packetData[++i];\n    winAttr.borderType += (b & 0x80) >> 5; // bt\n\n    winAttr.wordWrap = (b & 0x40) >> 6; // ww\n\n    winAttr.printDirection = (b & 0x30) >> 4; // pd\n\n    winAttr.scrollDirection = (b & 0x0c) >> 2; // sd\n\n    winAttr.justify = b & 0x03; // j\n\n    b = packetData[++i];\n    winAttr.effectSpeed = (b & 0xf0) >> 4; // es\n\n    winAttr.effectDirection = (b & 0x0c) >> 2; // ed\n\n    winAttr.displayEffect = b & 0x03; // de\n\n    return i;\n  };\n  /**\n   * Gather text from all displayed windows and push a caption to output.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   */\n\n\n  Cea708Stream.prototype.flushDisplayed = function (pts, service) {\n    var displayedText = []; // TODO: Positioning not supported, displaying multiple windows will not necessarily\n    // display text in the correct order, but sample files so far have not shown any issue.\n\n    for (var winId = 0; winId < 8; winId++) {\n      if (service.windows[winId].visible && !service.windows[winId].isEmpty()) {\n        displayedText.push(service.windows[winId].getText());\n      }\n    }\n\n    service.endPts = pts;\n    service.text = displayedText.join('\\n\\n');\n    this.pushCaption(service);\n    service.startPts = pts;\n  };\n  /**\n   * Push a caption to output if the caption contains text.\n   *\n   * @param  {Service} service  The service object to be affected\n   */\n\n\n  Cea708Stream.prototype.pushCaption = function (service) {\n    if (service.text !== '') {\n      this.trigger('data', {\n        startPts: service.startPts,\n        endPts: service.endPts,\n        text: service.text,\n        stream: 'cc708_' + service.serviceNum\n      });\n      service.text = '';\n      service.startPts = service.endPts;\n    }\n  };\n  /**\n   * Parse and execute the DSW command.\n   *\n   * Set visible property of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.displayWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].visible = 1;\n      }\n    }\n\n    return i;\n  };\n  /**\n   * Parse and execute the HDW command.\n   *\n   * Set visible property of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.hideWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].visible = 0;\n      }\n    }\n\n    return i;\n  };\n  /**\n   * Parse and execute the TGW command.\n   *\n   * Set visible property of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.toggleWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].visible ^= 1;\n      }\n    }\n\n    return i;\n  };\n  /**\n   * Parse and execute the CLW command.\n   *\n   * Clear text of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.clearWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].clearText();\n      }\n    }\n\n    return i;\n  };\n  /**\n   * Parse and execute the DLW command.\n   *\n   * Re-initialize windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.deleteWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].reset();\n      }\n    }\n\n    return i;\n  };\n  /**\n   * Parse and execute the SPA command.\n   *\n   * Set pen attributes of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.setPenAttributes = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var penAttr = service.currentWindow.penAttr;\n    b = packetData[++i];\n    penAttr.textTag = (b & 0xf0) >> 4; // tt\n\n    penAttr.offset = (b & 0x0c) >> 2; // o\n\n    penAttr.penSize = b & 0x03; // s\n\n    b = packetData[++i];\n    penAttr.italics = (b & 0x80) >> 7; // i\n\n    penAttr.underline = (b & 0x40) >> 6; // u\n\n    penAttr.edgeType = (b & 0x38) >> 3; // et\n\n    penAttr.fontStyle = b & 0x07; // fs\n\n    return i;\n  };\n  /**\n   * Parse and execute the SPC command.\n   *\n   * Set pen color of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.setPenColor = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var penColor = service.currentWindow.penColor;\n    b = packetData[++i];\n    penColor.fgOpacity = (b & 0xc0) >> 6; // fo\n\n    penColor.fgRed = (b & 0x30) >> 4; // fr\n\n    penColor.fgGreen = (b & 0x0c) >> 2; // fg\n\n    penColor.fgBlue = b & 0x03; // fb\n\n    b = packetData[++i];\n    penColor.bgOpacity = (b & 0xc0) >> 6; // bo\n\n    penColor.bgRed = (b & 0x30) >> 4; // br\n\n    penColor.bgGreen = (b & 0x0c) >> 2; // bg\n\n    penColor.bgBlue = b & 0x03; // bb\n\n    b = packetData[++i];\n    penColor.edgeRed = (b & 0x30) >> 4; // er\n\n    penColor.edgeGreen = (b & 0x0c) >> 2; // eg\n\n    penColor.edgeBlue = b & 0x03; // eb\n\n    return i;\n  };\n  /**\n   * Parse and execute the SPL command.\n   *\n   * Set pen location of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n\n  Cea708Stream.prototype.setPenLocation = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var penLoc = service.currentWindow.penLoc; // Positioning isn't really supported at the moment, so this essentially just inserts a linebreak\n\n    service.currentWindow.pendingNewLine = true;\n    b = packetData[++i];\n    penLoc.row = b & 0x0f; // r\n\n    b = packetData[++i];\n    penLoc.column = b & 0x3f; // c\n\n    return i;\n  };\n  /**\n   * Execute the RST command.\n   *\n   * Reset service to a clean slate. Re-initialize.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Service}          Re-initialized service\n   */\n\n\n  Cea708Stream.prototype.reset = function (i, service) {\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    return this.initService(service.serviceNum, i);\n  }; // This hash maps non-ASCII, special, and extended character codes to their\n  // proper Unicode equivalent. The first keys that are only a single byte\n  // are the non-standard ASCII characters, which simply map the CEA608 byte\n  // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n  // character codes, but have their MSB bitmasked with 0x03 so that a lookup\n  // can be performed regardless of the field and data channel on which the\n  // character code was received.\n\n\n  var CHARACTER_TRANSLATION = {\n    0x2a: 0xe1,\n    // á\n    0x5c: 0xe9,\n    // é\n    0x5e: 0xed,\n    // í\n    0x5f: 0xf3,\n    // ó\n    0x60: 0xfa,\n    // ú\n    0x7b: 0xe7,\n    // ç\n    0x7c: 0xf7,\n    // ÷\n    0x7d: 0xd1,\n    // Ñ\n    0x7e: 0xf1,\n    // ñ\n    0x7f: 0x2588,\n    // █\n    0x0130: 0xae,\n    // ®\n    0x0131: 0xb0,\n    // °\n    0x0132: 0xbd,\n    // ½\n    0x0133: 0xbf,\n    // ¿\n    0x0134: 0x2122,\n    // ™\n    0x0135: 0xa2,\n    // ¢\n    0x0136: 0xa3,\n    // £\n    0x0137: 0x266a,\n    // ♪\n    0x0138: 0xe0,\n    // à\n    0x0139: 0xa0,\n    //\n    0x013a: 0xe8,\n    // è\n    0x013b: 0xe2,\n    // â\n    0x013c: 0xea,\n    // ê\n    0x013d: 0xee,\n    // î\n    0x013e: 0xf4,\n    // ô\n    0x013f: 0xfb,\n    // û\n    0x0220: 0xc1,\n    // Á\n    0x0221: 0xc9,\n    // É\n    0x0222: 0xd3,\n    // Ó\n    0x0223: 0xda,\n    // Ú\n    0x0224: 0xdc,\n    // Ü\n    0x0225: 0xfc,\n    // ü\n    0x0226: 0x2018,\n    // ‘\n    0x0227: 0xa1,\n    // ¡\n    0x0228: 0x2a,\n    // *\n    0x0229: 0x27,\n    // '\n    0x022a: 0x2014,\n    // —\n    0x022b: 0xa9,\n    // ©\n    0x022c: 0x2120,\n    // ℠\n    0x022d: 0x2022,\n    // •\n    0x022e: 0x201c,\n    // “\n    0x022f: 0x201d,\n    // ”\n    0x0230: 0xc0,\n    // À\n    0x0231: 0xc2,\n    // Â\n    0x0232: 0xc7,\n    // Ç\n    0x0233: 0xc8,\n    // È\n    0x0234: 0xca,\n    // Ê\n    0x0235: 0xcb,\n    // Ë\n    0x0236: 0xeb,\n    // ë\n    0x0237: 0xce,\n    // Î\n    0x0238: 0xcf,\n    // Ï\n    0x0239: 0xef,\n    // ï\n    0x023a: 0xd4,\n    // Ô\n    0x023b: 0xd9,\n    // Ù\n    0x023c: 0xf9,\n    // ù\n    0x023d: 0xdb,\n    // Û\n    0x023e: 0xab,\n    // «\n    0x023f: 0xbb,\n    // »\n    0x0320: 0xc3,\n    // Ã\n    0x0321: 0xe3,\n    // ã\n    0x0322: 0xcd,\n    // Í\n    0x0323: 0xcc,\n    // Ì\n    0x0324: 0xec,\n    // ì\n    0x0325: 0xd2,\n    // Ò\n    0x0326: 0xf2,\n    // ò\n    0x0327: 0xd5,\n    // Õ\n    0x0328: 0xf5,\n    // õ\n    0x0329: 0x7b,\n    // {\n    0x032a: 0x7d,\n    // }\n    0x032b: 0x5c,\n    // \\\n    0x032c: 0x5e,\n    // ^\n    0x032d: 0x5f,\n    // _\n    0x032e: 0x7c,\n    // |\n    0x032f: 0x7e,\n    // ~\n    0x0330: 0xc4,\n    // Ä\n    0x0331: 0xe4,\n    // ä\n    0x0332: 0xd6,\n    // Ö\n    0x0333: 0xf6,\n    // ö\n    0x0334: 0xdf,\n    // ß\n    0x0335: 0xa5,\n    // ¥\n    0x0336: 0xa4,\n    // ¤\n    0x0337: 0x2502,\n    // │\n    0x0338: 0xc5,\n    // Å\n    0x0339: 0xe5,\n    // å\n    0x033a: 0xd8,\n    // Ø\n    0x033b: 0xf8,\n    // ø\n    0x033c: 0x250c,\n    // ┌\n    0x033d: 0x2510,\n    // ┐\n    0x033e: 0x2514,\n    // └\n    0x033f: 0x2518 // ┘\n\n  };\n\n  var getCharFromCode = function (code) {\n    if (code === null) {\n      return '';\n    }\n\n    code = CHARACTER_TRANSLATION[code] || code;\n    return String.fromCharCode(code);\n  }; // the index of the last row in a CEA-608 display buffer\n\n\n  var BOTTOM_ROW = 14; // This array is used for mapping PACs -> row #, since there's no way of\n  // getting it through bit logic.\n\n  var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420]; // CEA-608 captions are rendered onto a 34x15 matrix of character\n  // cells. The \"bottom\" row is the last element in the outer array.\n  // We keep track of positioning information as we go by storing the\n  // number of indentations and the tab offset in this buffer.\n\n  var createDisplayBuffer = function () {\n    var result = [],\n        i = BOTTOM_ROW + 1;\n\n    while (i--) {\n      result.push({\n        text: '',\n        indent: 0,\n        offset: 0\n      });\n    }\n\n    return result;\n  };\n\n  var Cea608Stream = function (field, dataChannel) {\n    Cea608Stream.prototype.init.call(this);\n    this.field_ = field || 0;\n    this.dataChannel_ = dataChannel || 0;\n    this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);\n    this.setConstants();\n    this.reset();\n\n    this.push = function (packet) {\n      var data, swap, char0, char1, text; // remove the parity bits\n\n      data = packet.ccData & 0x7f7f; // ignore duplicate control codes; the spec demands they're sent twice\n\n      if (data === this.lastControlCode_) {\n        this.lastControlCode_ = null;\n        return;\n      } // Store control codes\n\n\n      if ((data & 0xf000) === 0x1000) {\n        this.lastControlCode_ = data;\n      } else if (data !== this.PADDING_) {\n        this.lastControlCode_ = null;\n      }\n\n      char0 = data >>> 8;\n      char1 = data & 0xff;\n\n      if (data === this.PADDING_) {\n        return;\n      } else if (data === this.RESUME_CAPTION_LOADING_) {\n        this.mode_ = 'popOn';\n      } else if (data === this.END_OF_CAPTION_) {\n        // If an EOC is received while in paint-on mode, the displayed caption\n        // text should be swapped to non-displayed memory as if it was a pop-on\n        // caption. Because of that, we should explicitly switch back to pop-on\n        // mode\n        this.mode_ = 'popOn';\n        this.clearFormatting(packet.pts); // if a caption was being displayed, it's gone now\n\n        this.flushDisplayed(packet.pts); // flip memory\n\n        swap = this.displayed_;\n        this.displayed_ = this.nonDisplayed_;\n        this.nonDisplayed_ = swap; // start measuring the time to display the caption\n\n        this.startPts_ = packet.pts;\n      } else if (data === this.ROLL_UP_2_ROWS_) {\n        this.rollUpRows_ = 2;\n        this.setRollUp(packet.pts);\n      } else if (data === this.ROLL_UP_3_ROWS_) {\n        this.rollUpRows_ = 3;\n        this.setRollUp(packet.pts);\n      } else if (data === this.ROLL_UP_4_ROWS_) {\n        this.rollUpRows_ = 4;\n        this.setRollUp(packet.pts);\n      } else if (data === this.CARRIAGE_RETURN_) {\n        this.clearFormatting(packet.pts);\n        this.flushDisplayed(packet.pts);\n        this.shiftRowsUp_();\n        this.startPts_ = packet.pts;\n      } else if (data === this.BACKSPACE_) {\n        if (this.mode_ === 'popOn') {\n          this.nonDisplayed_[this.row_].text = this.nonDisplayed_[this.row_].text.slice(0, -1);\n        } else {\n          this.displayed_[this.row_].text = this.displayed_[this.row_].text.slice(0, -1);\n        }\n      } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n        this.flushDisplayed(packet.pts);\n        this.displayed_ = createDisplayBuffer();\n      } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n        this.nonDisplayed_ = createDisplayBuffer();\n      } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n        if (this.mode_ !== 'paintOn') {\n          // NOTE: This should be removed when proper caption positioning is\n          // implemented\n          this.flushDisplayed(packet.pts);\n          this.displayed_ = createDisplayBuffer();\n        }\n\n        this.mode_ = 'paintOn';\n        this.startPts_ = packet.pts; // Append special characters to caption text\n      } else if (this.isSpecialCharacter(char0, char1)) {\n        // Bitmask char0 so that we can apply character transformations\n        // regardless of field and data channel.\n        // Then byte-shift to the left and OR with char1 so we can pass the\n        // entire character code to `getCharFromCode`.\n        char0 = (char0 & 0x03) << 8;\n        text = getCharFromCode(char0 | char1);\n        this[this.mode_](packet.pts, text);\n        this.column_++; // Append extended characters to caption text\n      } else if (this.isExtCharacter(char0, char1)) {\n        // Extended characters always follow their \"non-extended\" equivalents.\n        // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n        // decoders are supposed to drop the \"è\", while compliant decoders\n        // backspace the \"e\" and insert \"è\".\n        // Delete the previous character\n        if (this.mode_ === 'popOn') {\n          this.nonDisplayed_[this.row_].text = this.nonDisplayed_[this.row_].text.slice(0, -1);\n        } else {\n          this.displayed_[this.row_].text = this.displayed_[this.row_].text.slice(0, -1);\n        } // Bitmask char0 so that we can apply character transformations\n        // regardless of field and data channel.\n        // Then byte-shift to the left and OR with char1 so we can pass the\n        // entire character code to `getCharFromCode`.\n\n\n        char0 = (char0 & 0x03) << 8;\n        text = getCharFromCode(char0 | char1);\n        this[this.mode_](packet.pts, text);\n        this.column_++; // Process mid-row codes\n      } else if (this.isMidRowCode(char0, char1)) {\n        // Attributes are not additive, so clear all formatting\n        this.clearFormatting(packet.pts); // According to the standard, mid-row codes\n        // should be replaced with spaces, so add one now\n\n        this[this.mode_](packet.pts, ' ');\n        this.column_++;\n\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n\n        if ((char1 & 0x1) === 0x1) {\n          this.addFormatting(packet.pts, ['u']);\n        } // Detect offset control codes and adjust cursor\n\n      } else if (this.isOffsetControlCode(char0, char1)) {\n        // Cursor position is set by indent PAC (see below) in 4-column\n        // increments, with an additional offset code of 1-3 to reach any\n        // of the 32 columns specified by CEA-608. So all we need to do\n        // here is increment the column cursor by the given offset.\n        const offset = char1 & 0x03; // For an offest value 1-3, set the offset for that caption\n        // in the non-displayed array.\n\n        this.nonDisplayed_[this.row_].offset = offset;\n        this.column_ += offset; // Detect PACs (Preamble Address Codes)\n      } else if (this.isPAC(char0, char1)) {\n        // There's no logic for PAC -> row mapping, so we have to just\n        // find the row code in an array and use its index :(\n        var row = ROWS.indexOf(data & 0x1f20); // Configure the caption window if we're in roll-up mode\n\n        if (this.mode_ === 'rollUp') {\n          // This implies that the base row is incorrectly set.\n          // As per the recommendation in CEA-608(Base Row Implementation), defer to the number\n          // of roll-up rows set.\n          if (row - this.rollUpRows_ + 1 < 0) {\n            row = this.rollUpRows_ - 1;\n          }\n\n          this.setRollUp(packet.pts, row);\n        } // Ensure the row is between 0 and 14, otherwise use the most\n        // recent or default row.\n\n\n        if (row !== this.row_ && row >= 0 && row <= 14) {\n          // formatting is only persistent for current row\n          this.clearFormatting(packet.pts);\n          this.row_ = row;\n        } // All PACs can apply underline, so detect and apply\n        // (All odd-numbered second bytes set underline)\n\n\n        if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {\n          this.addFormatting(packet.pts, ['u']);\n        }\n\n        if ((data & 0x10) === 0x10) {\n          // We've got an indent level code. Each successive even number\n          // increments the column cursor by 4, so we can get the desired\n          // column position by bit-shifting to the right (to get n/2)\n          // and multiplying by 4.\n          const indentations = (data & 0xe) >> 1;\n          this.column_ = indentations * 4; // add to the number of indentations for positioning\n\n          this.nonDisplayed_[this.row_].indent += indentations;\n        }\n\n        if (this.isColorPAC(char1)) {\n          // it's a color code, though we only support white, which\n          // can be either normal or italicized. white italics can be\n          // either 0x4e or 0x6e depending on the row, so we just\n          // bitwise-and with 0xe to see if italics should be turned on\n          if ((char1 & 0xe) === 0xe) {\n            this.addFormatting(packet.pts, ['i']);\n          }\n        } // We have a normal character in char0, and possibly one in char1\n\n      } else if (this.isNormalChar(char0)) {\n        if (char1 === 0x00) {\n          char1 = null;\n        }\n\n        text = getCharFromCode(char0);\n        text += getCharFromCode(char1);\n        this[this.mode_](packet.pts, text);\n        this.column_ += text.length;\n      } // finish data processing\n\n    };\n  };\n\n  Cea608Stream.prototype = new Stream$7(); // Trigger a cue point that captures the current state of the\n  // display buffer\n\n  Cea608Stream.prototype.flushDisplayed = function (pts) {\n    const logWarning = index => {\n      this.trigger('log', {\n        level: 'warn',\n        message: 'Skipping a malformed 608 caption at index ' + index + '.'\n      });\n    };\n\n    const content = [];\n    this.displayed_.forEach((row, i) => {\n      if (row && row.text && row.text.length) {\n        try {\n          // remove spaces from the start and end of the string\n          row.text = row.text.trim();\n        } catch (e) {\n          // Ordinarily, this shouldn't happen. However, caption\n          // parsing errors should not throw exceptions and\n          // break playback.\n          logWarning(i);\n        } // See the below link for more details on the following fields:\n        // https://dvcs.w3.org/hg/text-tracks/raw-file/default/608toVTT/608toVTT.html#positioning-in-cea-608\n\n\n        if (row.text.length) {\n          content.push({\n            // The text to be displayed in the caption from this specific row, with whitespace removed.\n            text: row.text,\n            // Value between 1 and 15 representing the PAC row used to calculate line height.\n            line: i + 1,\n            // A number representing the indent position by percentage (CEA-608 PAC indent code).\n            // The value will be a number between 10 and 80. Offset is used to add an aditional\n            // value to the position if necessary.\n            position: 10 + Math.min(70, row.indent * 10) + row.offset * 2.5\n          });\n        }\n      } else if (row === undefined || row === null) {\n        logWarning(i);\n      }\n    });\n\n    if (content.length) {\n      this.trigger('data', {\n        startPts: this.startPts_,\n        endPts: pts,\n        content,\n        stream: this.name_\n      });\n    }\n  };\n  /**\n   * Zero out the data, used for startup and on seek\n   */\n\n\n  Cea608Stream.prototype.reset = function () {\n    this.mode_ = 'popOn'; // When in roll-up mode, the index of the last row that will\n    // actually display captions. If a caption is shifted to a row\n    // with a lower index than this, it is cleared from the display\n    // buffer\n\n    this.topRow_ = 0;\n    this.startPts_ = 0;\n    this.displayed_ = createDisplayBuffer();\n    this.nonDisplayed_ = createDisplayBuffer();\n    this.lastControlCode_ = null; // Track row and column for proper line-breaking and spacing\n\n    this.column_ = 0;\n    this.row_ = BOTTOM_ROW;\n    this.rollUpRows_ = 2; // This variable holds currently-applied formatting\n\n    this.formatting_ = [];\n  };\n  /**\n   * Sets up control code and related constants for this instance\n   */\n\n\n  Cea608Stream.prototype.setConstants = function () {\n    // The following attributes have these uses:\n    // ext_ :    char0 for mid-row codes, and the base for extended\n    //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n    //           extended codes)\n    // control_: char0 for control codes, except byte-shifted to the\n    //           left so that we can do this.control_ | CONTROL_CODE\n    // offset_:  char0 for tab offset codes\n    //\n    // It's also worth noting that control codes, and _only_ control codes,\n    // differ between field 1 and field2. Field 2 control codes are always\n    // their field 1 value plus 1. That's why there's the \"| field\" on the\n    // control value.\n    if (this.dataChannel_ === 0) {\n      this.BASE_ = 0x10;\n      this.EXT_ = 0x11;\n      this.CONTROL_ = (0x14 | this.field_) << 8;\n      this.OFFSET_ = 0x17;\n    } else if (this.dataChannel_ === 1) {\n      this.BASE_ = 0x18;\n      this.EXT_ = 0x19;\n      this.CONTROL_ = (0x1c | this.field_) << 8;\n      this.OFFSET_ = 0x1f;\n    } // Constants for the LSByte command codes recognized by Cea608Stream. This\n    // list is not exhaustive. For a more comprehensive listing and semantics see\n    // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n    // Padding\n\n\n    this.PADDING_ = 0x0000; // Pop-on Mode\n\n    this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;\n    this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f; // Roll-up Mode\n\n    this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;\n    this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;\n    this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;\n    this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d; // paint-on mode\n\n    this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29; // Erasure\n\n    this.BACKSPACE_ = this.CONTROL_ | 0x21;\n    this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;\n    this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n  };\n  /**\n   * Detects if the 2-byte packet data is a special character\n   *\n   * Special characters have a second byte in the range 0x30 to 0x3f,\n   * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n   * data channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are an special character\n   */\n\n\n  Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {\n    return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;\n  };\n  /**\n   * Detects if the 2-byte packet data is an extended character\n   *\n   * Extended characters have a second byte in the range 0x20 to 0x3f,\n   * with the first byte being 0x12 or 0x13 (for data channel 1) or\n   * 0x1a or 0x1b (for data channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are an extended character\n   */\n\n\n  Cea608Stream.prototype.isExtCharacter = function (char0, char1) {\n    return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;\n  };\n  /**\n   * Detects if the 2-byte packet is a mid-row code\n   *\n   * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n   * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n   * channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are a mid-row code\n   */\n\n\n  Cea608Stream.prototype.isMidRowCode = function (char0, char1) {\n    return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;\n  };\n  /**\n   * Detects if the 2-byte packet is an offset control code\n   *\n   * Offset control codes have a second byte in the range 0x21 to 0x23,\n   * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n   * data channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are an offset control code\n   */\n\n\n  Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {\n    return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;\n  };\n  /**\n   * Detects if the 2-byte packet is a Preamble Address Code\n   *\n   * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n   * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n   * range 0x40 to 0x7f.\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are a PAC\n   */\n\n\n  Cea608Stream.prototype.isPAC = function (char0, char1) {\n    return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;\n  };\n  /**\n   * Detects if a packet's second byte is in the range of a PAC color code\n   *\n   * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n   * 0x60 to 0x6f.\n   *\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the byte is a color PAC\n   */\n\n\n  Cea608Stream.prototype.isColorPAC = function (char1) {\n    return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;\n  };\n  /**\n   * Detects if a single byte is in the range of a normal character\n   *\n   * Normal text bytes are in the range 0x20 to 0x7f.\n   *\n   * @param  {Integer} char  The byte\n   * @return {Boolean}       Whether the byte is a normal character\n   */\n\n\n  Cea608Stream.prototype.isNormalChar = function (char) {\n    return char >= 0x20 && char <= 0x7f;\n  };\n  /**\n   * Configures roll-up\n   *\n   * @param  {Integer} pts         Current PTS\n   * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n   *                               a new position\n   */\n\n\n  Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {\n    // Reset the base row to the bottom row when switching modes\n    if (this.mode_ !== 'rollUp') {\n      this.row_ = BOTTOM_ROW;\n      this.mode_ = 'rollUp'; // Spec says to wipe memories when switching to roll-up\n\n      this.flushDisplayed(pts);\n      this.nonDisplayed_ = createDisplayBuffer();\n      this.displayed_ = createDisplayBuffer();\n    }\n\n    if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n      // move currently displayed captions (up or down) to the new base row\n      for (var i = 0; i < this.rollUpRows_; i++) {\n        this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n        this.displayed_[this.row_ - i] = {\n          text: '',\n          indent: 0,\n          offset: 0\n        };\n      }\n    }\n\n    if (newBaseRow === undefined) {\n      newBaseRow = this.row_;\n    }\n\n    this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n  }; // Adds the opening HTML tag for the passed character to the caption text,\n  // and keeps track of it for later closing\n\n\n  Cea608Stream.prototype.addFormatting = function (pts, format) {\n    this.formatting_ = this.formatting_.concat(format);\n    var text = format.reduce(function (text, format) {\n      return text + '<' + format + '>';\n    }, '');\n    this[this.mode_](pts, text);\n  }; // Adds HTML closing tags for current formatting to caption text and\n  // clears remembered formatting\n\n\n  Cea608Stream.prototype.clearFormatting = function (pts) {\n    if (!this.formatting_.length) {\n      return;\n    }\n\n    var text = this.formatting_.reverse().reduce(function (text, format) {\n      return text + '</' + format + '>';\n    }, '');\n    this.formatting_ = [];\n    this[this.mode_](pts, text);\n  }; // Mode Implementations\n\n\n  Cea608Stream.prototype.popOn = function (pts, text) {\n    var baseRow = this.nonDisplayed_[this.row_].text; // buffer characters\n\n    baseRow += text;\n    this.nonDisplayed_[this.row_].text = baseRow;\n  };\n\n  Cea608Stream.prototype.rollUp = function (pts, text) {\n    var baseRow = this.displayed_[this.row_].text;\n    baseRow += text;\n    this.displayed_[this.row_].text = baseRow;\n  };\n\n  Cea608Stream.prototype.shiftRowsUp_ = function () {\n    var i; // clear out inactive rows\n\n    for (i = 0; i < this.topRow_; i++) {\n      this.displayed_[i] = {\n        text: '',\n        indent: 0,\n        offset: 0\n      };\n    }\n\n    for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n      this.displayed_[i] = {\n        text: '',\n        indent: 0,\n        offset: 0\n      };\n    } // shift displayed rows up\n\n\n    for (i = this.topRow_; i < this.row_; i++) {\n      this.displayed_[i] = this.displayed_[i + 1];\n    } // clear out the bottom row\n\n\n    this.displayed_[this.row_] = {\n      text: '',\n      indent: 0,\n      offset: 0\n    };\n  };\n\n  Cea608Stream.prototype.paintOn = function (pts, text) {\n    var baseRow = this.displayed_[this.row_].text;\n    baseRow += text;\n    this.displayed_[this.row_].text = baseRow;\n  }; // exports\n\n\n  var captionStream = {\n    CaptionStream: CaptionStream$2,\n    Cea608Stream: Cea608Stream,\n    Cea708Stream: Cea708Stream\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var streamTypes = {\n    H264_STREAM_TYPE: 0x1B,\n    ADTS_STREAM_TYPE: 0x0F,\n    METADATA_STREAM_TYPE: 0x15\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Accepts program elementary stream (PES) data events and corrects\n   * decode and presentation time stamps to account for a rollover\n   * of the 33 bit value.\n   */\n\n  var Stream$6 = stream;\n  var MAX_TS = 8589934592;\n  var RO_THRESH = 4294967296;\n  var TYPE_SHARED = 'shared';\n\n  var handleRollover$1 = function (value, reference) {\n    var direction = 1;\n\n    if (value > reference) {\n      // If the current timestamp value is greater than our reference timestamp and we detect a\n      // timestamp rollover, this means the roll over is happening in the opposite direction.\n      // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n      // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n      // rollover point. In loading this segment, the timestamp values will be very large,\n      // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n      // the time stamp to be `value - 2^33`.\n      direction = -1;\n    } // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n    // cause an incorrect adjustment.\n\n\n    while (Math.abs(reference - value) > RO_THRESH) {\n      value += direction * MAX_TS;\n    }\n\n    return value;\n  };\n\n  var TimestampRolloverStream$1 = function (type) {\n    var lastDTS, referenceDTS;\n    TimestampRolloverStream$1.prototype.init.call(this); // The \"shared\" type is used in cases where a stream will contain muxed\n    // video and audio. We could use `undefined` here, but having a string\n    // makes debugging a little clearer.\n\n    this.type_ = type || TYPE_SHARED;\n\n    this.push = function (data) {\n      /**\n       * Rollover stream expects data from elementary stream.\n       * Elementary stream can push forward 2 types of data\n       * - Parsed Video/Audio/Timed-metadata PES (packetized elementary stream) packets\n       * - Tracks metadata from PMT (Program Map Table)\n       * Rollover stream expects pts/dts info to be available, since it stores lastDTS\n       * We should ignore non-PES packets since they may override lastDTS to undefined.\n       * lastDTS is important to signal the next segments\n       * about rollover from the previous segments.\n       */\n      if (data.type === 'metadata') {\n        this.trigger('data', data);\n        return;\n      } // Any \"shared\" rollover streams will accept _all_ data. Otherwise,\n      // streams will only accept data that matches their type.\n\n\n      if (this.type_ !== TYPE_SHARED && data.type !== this.type_) {\n        return;\n      }\n\n      if (referenceDTS === undefined) {\n        referenceDTS = data.dts;\n      }\n\n      data.dts = handleRollover$1(data.dts, referenceDTS);\n      data.pts = handleRollover$1(data.pts, referenceDTS);\n      lastDTS = data.dts;\n      this.trigger('data', data);\n    };\n\n    this.flush = function () {\n      referenceDTS = lastDTS;\n      this.trigger('done');\n    };\n\n    this.endTimeline = function () {\n      this.flush();\n      this.trigger('endedtimeline');\n    };\n\n    this.discontinuity = function () {\n      referenceDTS = void 0;\n      lastDTS = void 0;\n    };\n\n    this.reset = function () {\n      this.discontinuity();\n      this.trigger('reset');\n    };\n  };\n\n  TimestampRolloverStream$1.prototype = new Stream$6();\n  var timestampRolloverStream = {\n    TimestampRolloverStream: TimestampRolloverStream$1,\n    handleRollover: handleRollover$1\n  }; // Once IE11 support is dropped, this function should be removed.\n\n  var typedArrayIndexOf$1 = (typedArray, element, fromIndex) => {\n    if (!typedArray) {\n      return -1;\n    }\n\n    var currentIndex = fromIndex;\n\n    for (; currentIndex < typedArray.length; currentIndex++) {\n      if (typedArray[currentIndex] === element) {\n        return currentIndex;\n      }\n    }\n\n    return -1;\n  };\n\n  var typedArray = {\n    typedArrayIndexOf: typedArrayIndexOf$1\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Tools for parsing ID3 frame data\n   * @see http://id3.org/id3v2.3.0\n   */\n\n  var typedArrayIndexOf = typedArray.typedArrayIndexOf,\n      // Frames that allow different types of text encoding contain a text\n  // encoding description byte [ID3v2.4.0 section 4.]\n  textEncodingDescriptionByte = {\n    Iso88591: 0x00,\n    // ISO-8859-1, terminated with \\0.\n    Utf16: 0x01,\n    // UTF-16 encoded Unicode BOM, terminated with \\0\\0\n    Utf16be: 0x02,\n    // UTF-16BE encoded Unicode, without BOM, terminated with \\0\\0\n    Utf8: 0x03 // UTF-8 encoded Unicode, terminated with \\0\n\n  },\n      // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding \n  percentEncode$1 = function (bytes, start, end) {\n    var i,\n        result = '';\n\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n\n    return result;\n  },\n      // return the string representation of the specified byte range,\n  // interpreted as UTf-8.\n  parseUtf8 = function (bytes, start, end) {\n    return decodeURIComponent(percentEncode$1(bytes, start, end));\n  },\n      // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n  parseIso88591$1 = function (bytes, start, end) {\n    return unescape(percentEncode$1(bytes, start, end)); // jshint ignore:line\n  },\n      parseSyncSafeInteger$1 = function (data) {\n    return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n  },\n      frameParsers = {\n    'APIC': function (frame) {\n      var i = 1,\n          mimeTypeEndIndex,\n          descriptionEndIndex,\n          LINK_MIME_TYPE = '-->';\n\n      if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n        // ignore frames with unrecognized character encodings\n        return;\n      } // parsing fields [ID3v2.4.0 section 4.14.]\n\n\n      mimeTypeEndIndex = typedArrayIndexOf(frame.data, 0, i);\n\n      if (mimeTypeEndIndex < 0) {\n        // malformed frame\n        return;\n      } // parsing Mime type field (terminated with \\0)\n\n\n      frame.mimeType = parseIso88591$1(frame.data, i, mimeTypeEndIndex);\n      i = mimeTypeEndIndex + 1; // parsing 1-byte Picture Type field\n\n      frame.pictureType = frame.data[i];\n      i++;\n      descriptionEndIndex = typedArrayIndexOf(frame.data, 0, i);\n\n      if (descriptionEndIndex < 0) {\n        // malformed frame\n        return;\n      } // parsing Description field (terminated with \\0)\n\n\n      frame.description = parseUtf8(frame.data, i, descriptionEndIndex);\n      i = descriptionEndIndex + 1;\n\n      if (frame.mimeType === LINK_MIME_TYPE) {\n        // parsing Picture Data field as URL (always represented as ISO-8859-1 [ID3v2.4.0 section 4.])\n        frame.url = parseIso88591$1(frame.data, i, frame.data.length);\n      } else {\n        // parsing Picture Data field as binary data\n        frame.pictureData = frame.data.subarray(i, frame.data.length);\n      }\n    },\n    'T*': function (frame) {\n      if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n        // ignore frames with unrecognized character encodings\n        return;\n      } // parse text field, do not include null terminator in the frame value\n      // frames that allow different types of encoding contain terminated text [ID3v2.4.0 section 4.]\n\n\n      frame.value = parseUtf8(frame.data, 1, frame.data.length).replace(/\\0*$/, ''); // text information frames supports multiple strings, stored as a terminator separated list [ID3v2.4.0 section 4.2.]\n\n      frame.values = frame.value.split('\\0');\n    },\n    'TXXX': function (frame) {\n      var descriptionEndIndex;\n\n      if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      descriptionEndIndex = typedArrayIndexOf(frame.data, 0, 1);\n\n      if (descriptionEndIndex === -1) {\n        return;\n      } // parse the text fields\n\n\n      frame.description = parseUtf8(frame.data, 1, descriptionEndIndex); // do not include the null terminator in the tag value\n      // frames that allow different types of encoding contain terminated text\n      // [ID3v2.4.0 section 4.]\n\n      frame.value = parseUtf8(frame.data, descriptionEndIndex + 1, frame.data.length).replace(/\\0*$/, '');\n      frame.data = frame.value;\n    },\n    'W*': function (frame) {\n      // parse URL field; URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]\n      // if the value is followed by a string termination all the following information should be ignored [ID3v2.4.0 section 4.3]\n      frame.url = parseIso88591$1(frame.data, 0, frame.data.length).replace(/\\0.*$/, '');\n    },\n    'WXXX': function (frame) {\n      var descriptionEndIndex;\n\n      if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n        // ignore frames with unrecognized character encodings\n        return;\n      }\n\n      descriptionEndIndex = typedArrayIndexOf(frame.data, 0, 1);\n\n      if (descriptionEndIndex === -1) {\n        return;\n      } // parse the description and URL fields\n\n\n      frame.description = parseUtf8(frame.data, 1, descriptionEndIndex); // URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]\n      // if the value is followed by a string termination all the following information\n      // should be ignored [ID3v2.4.0 section 4.3]\n\n      frame.url = parseIso88591$1(frame.data, descriptionEndIndex + 1, frame.data.length).replace(/\\0.*$/, '');\n    },\n    'PRIV': function (frame) {\n      var i;\n\n      for (i = 0; i < frame.data.length; i++) {\n        if (frame.data[i] === 0) {\n          // parse the description and URL fields\n          frame.owner = parseIso88591$1(frame.data, 0, i);\n          break;\n        }\n      }\n\n      frame.privateData = frame.data.subarray(i + 1);\n      frame.data = frame.privateData;\n    }\n  };\n\n  var parseId3Frames$1 = function (data) {\n    var frameSize,\n        frameHeader,\n        frameStart = 10,\n        tagSize = 0,\n        frames = []; // If we don't have enough data for a header, 10 bytes, \n    // or 'ID3' in the first 3 bytes this is not a valid ID3 tag.\n\n    if (data.length < 10 || data[0] !== 'I'.charCodeAt(0) || data[1] !== 'D'.charCodeAt(0) || data[2] !== '3'.charCodeAt(0)) {\n      return;\n    } // the frame size is transmitted as a 28-bit integer in the\n    // last four bytes of the ID3 header.\n    // The most significant bit of each byte is dropped and the\n    // results concatenated to recover the actual value.\n\n\n    tagSize = parseSyncSafeInteger$1(data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more\n    // convenient for our comparisons to include it\n\n    tagSize += 10; // check bit 6 of byte 5 for the extended header flag.\n\n    var hasExtendedHeader = data[5] & 0x40;\n\n    if (hasExtendedHeader) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n\n      frameStart += parseSyncSafeInteger$1(data.subarray(10, 14));\n      tagSize -= parseSyncSafeInteger$1(data.subarray(16, 20)); // clip any padding off the end\n    } // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger$1(data.subarray(frameStart + 4, frameStart + 8));\n\n      if (frameSize < 1) {\n        break;\n      }\n\n      frameHeader = String.fromCharCode(data[frameStart], data[frameStart + 1], data[frameStart + 2], data[frameStart + 3]);\n      var frame = {\n        id: frameHeader,\n        data: data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id; // parse frame values\n\n      if (frameParsers[frame.id]) {\n        // use frame specific parser\n        frameParsers[frame.id](frame);\n      } else if (frame.id[0] === 'T') {\n        // use text frame generic parser\n        frameParsers['T*'](frame);\n      } else if (frame.id[0] === 'W') {\n        // use URL link frame generic parser\n        frameParsers['W*'](frame);\n      }\n\n      frames.push(frame);\n      frameStart += 10; // advance past the frame header\n\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n\n    return frames;\n  };\n\n  var parseId3 = {\n    parseId3Frames: parseId3Frames$1,\n    parseSyncSafeInteger: parseSyncSafeInteger$1,\n    frameParsers: frameParsers\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Accepts program elementary stream (PES) data events and parses out\n   * ID3 metadata from them, if present.\n   * @see http://id3.org/id3v2.3.0\n   */\n\n  var Stream$5 = stream,\n      StreamTypes$3 = streamTypes,\n      id3 = parseId3,\n      MetadataStream;\n\n  MetadataStream = function (options) {\n    var settings = {\n      // the bytes of the program-level descriptor field in MP2T\n      // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n      // program element descriptors\"\n      descriptor: options && options.descriptor\n    },\n        // the total size in bytes of the ID3 tag being parsed\n    tagSize = 0,\n        // tag data that is not complete enough to be parsed\n    buffer = [],\n        // the total number of bytes currently in the buffer\n    bufferSize = 0,\n        i;\n    MetadataStream.prototype.init.call(this); // calculate the text track in-band metadata track dispatch type\n    // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n\n    this.dispatchType = StreamTypes$3.METADATA_STREAM_TYPE.toString(16);\n\n    if (settings.descriptor) {\n      for (i = 0; i < settings.descriptor.length; i++) {\n        this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n      }\n    }\n\n    this.push = function (chunk) {\n      var tag, frameStart, frameSize, frame, i, frameHeader;\n\n      if (chunk.type !== 'timed-metadata') {\n        return;\n      } // if data_alignment_indicator is set in the PES header,\n      // we must have the start of a new ID3 tag. Assume anything\n      // remaining in the buffer was malformed and throw it out\n\n\n      if (chunk.dataAlignmentIndicator) {\n        bufferSize = 0;\n        buffer.length = 0;\n      } // ignore events that don't look like ID3 data\n\n\n      if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {\n        this.trigger('log', {\n          level: 'warn',\n          message: 'Skipping unrecognized metadata packet'\n        });\n        return;\n      } // add this chunk to the data we've collected so far\n\n\n      buffer.push(chunk);\n      bufferSize += chunk.data.byteLength; // grab the size of the entire frame from the ID3 header\n\n      if (buffer.length === 1) {\n        // the frame size is transmitted as a 28-bit integer in the\n        // last four bytes of the ID3 header.\n        // The most significant bit of each byte is dropped and the\n        // results concatenated to recover the actual value.\n        tagSize = id3.parseSyncSafeInteger(chunk.data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more\n        // convenient for our comparisons to include it\n\n        tagSize += 10;\n      } // if the entire frame has not arrived, wait for more data\n\n\n      if (bufferSize < tagSize) {\n        return;\n      } // collect the entire frame so it can be parsed\n\n\n      tag = {\n        data: new Uint8Array(tagSize),\n        frames: [],\n        pts: buffer[0].pts,\n        dts: buffer[0].dts\n      };\n\n      for (i = 0; i < tagSize;) {\n        tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n        i += buffer[0].data.byteLength;\n        bufferSize -= buffer[0].data.byteLength;\n        buffer.shift();\n      } // find the start of the first frame and the end of the tag\n\n\n      frameStart = 10;\n\n      if (tag.data[5] & 0x40) {\n        // advance the frame start past the extended header\n        frameStart += 4; // header size field\n\n        frameStart += id3.parseSyncSafeInteger(tag.data.subarray(10, 14)); // clip any padding off the end\n\n        tagSize -= id3.parseSyncSafeInteger(tag.data.subarray(16, 20));\n      } // parse one or more ID3 frames\n      // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n\n      do {\n        // determine the number of bytes in this frame\n        frameSize = id3.parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n\n        if (frameSize < 1) {\n          this.trigger('log', {\n            level: 'warn',\n            message: 'Malformed ID3 frame encountered. Skipping remaining metadata parsing.'\n          }); // If the frame is malformed, don't parse any further frames but allow previous valid parsed frames\n          // to be sent along.\n\n          break;\n        }\n\n        frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);\n        frame = {\n          id: frameHeader,\n          data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n        };\n        frame.key = frame.id; // parse frame values\n\n        if (id3.frameParsers[frame.id]) {\n          // use frame specific parser\n          id3.frameParsers[frame.id](frame);\n        } else if (frame.id[0] === 'T') {\n          // use text frame generic parser\n          id3.frameParsers['T*'](frame);\n        } else if (frame.id[0] === 'W') {\n          // use URL link frame generic parser\n          id3.frameParsers['W*'](frame);\n        } // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n\n\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var d = frame.data,\n              size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size; // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n\n          this.trigger('timestamp', frame);\n        }\n\n        tag.frames.push(frame);\n        frameStart += 10; // advance past the frame header\n\n        frameStart += frameSize; // advance past the frame body\n      } while (frameStart < tagSize);\n\n      this.trigger('data', tag);\n    };\n  };\n\n  MetadataStream.prototype = new Stream$5();\n  var metadataStream = MetadataStream;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A stream-based mp2t to mp4 converter. This utility can be used to\n   * deliver mp4s to a SourceBuffer on platforms that support native\n   * Media Source Extensions.\n   */\n\n  var Stream$4 = stream,\n      CaptionStream$1 = captionStream,\n      StreamTypes$2 = streamTypes,\n      TimestampRolloverStream = timestampRolloverStream.TimestampRolloverStream; // object types\n\n  var TransportPacketStream, TransportParseStream, ElementaryStream; // constants\n\n  var MP2T_PACKET_LENGTH$1 = 188,\n      // bytes\n  SYNC_BYTE$1 = 0x47;\n  /**\n   * Splits an incoming stream of binary data into MPEG-2 Transport\n   * Stream packets.\n   */\n\n  TransportPacketStream = function () {\n    var buffer = new Uint8Array(MP2T_PACKET_LENGTH$1),\n        bytesInBuffer = 0;\n    TransportPacketStream.prototype.init.call(this); // Deliver new bytes to the stream.\n\n    /**\n     * Split a stream of data into M2TS packets\n    **/\n\n    this.push = function (bytes) {\n      var startIndex = 0,\n          endIndex = MP2T_PACKET_LENGTH$1,\n          everything; // If there are bytes remaining from the last segment, prepend them to the\n      // bytes that were pushed in\n\n      if (bytesInBuffer) {\n        everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n        everything.set(buffer.subarray(0, bytesInBuffer));\n        everything.set(bytes, bytesInBuffer);\n        bytesInBuffer = 0;\n      } else {\n        everything = bytes;\n      } // While we have enough data for a packet\n\n\n      while (endIndex < everything.byteLength) {\n        // Look for a pair of start and end sync bytes in the data..\n        if (everything[startIndex] === SYNC_BYTE$1 && everything[endIndex] === SYNC_BYTE$1) {\n          // We found a packet so emit it and jump one whole packet forward in\n          // the stream\n          this.trigger('data', everything.subarray(startIndex, endIndex));\n          startIndex += MP2T_PACKET_LENGTH$1;\n          endIndex += MP2T_PACKET_LENGTH$1;\n          continue;\n        } // If we get here, we have somehow become de-synchronized and we need to step\n        // forward one byte at a time until we find a pair of sync bytes that denote\n        // a packet\n\n\n        startIndex++;\n        endIndex++;\n      } // If there was some data left over at the end of the segment that couldn't\n      // possibly be a whole packet, keep it because it might be the start of a packet\n      // that continues in the next segment\n\n\n      if (startIndex < everything.byteLength) {\n        buffer.set(everything.subarray(startIndex), 0);\n        bytesInBuffer = everything.byteLength - startIndex;\n      }\n    };\n    /**\n     * Passes identified M2TS packets to the TransportParseStream to be parsed\n    **/\n\n\n    this.flush = function () {\n      // If the buffer contains a whole packet when we are being flushed, emit it\n      // and empty the buffer. Otherwise hold onto the data because it may be\n      // important for decoding the next segment\n      if (bytesInBuffer === MP2T_PACKET_LENGTH$1 && buffer[0] === SYNC_BYTE$1) {\n        this.trigger('data', buffer);\n        bytesInBuffer = 0;\n      }\n\n      this.trigger('done');\n    };\n\n    this.endTimeline = function () {\n      this.flush();\n      this.trigger('endedtimeline');\n    };\n\n    this.reset = function () {\n      bytesInBuffer = 0;\n      this.trigger('reset');\n    };\n  };\n\n  TransportPacketStream.prototype = new Stream$4();\n  /**\n   * Accepts an MP2T TransportPacketStream and emits data events with parsed\n   * forms of the individual transport stream packets.\n   */\n\n  TransportParseStream = function () {\n    var parsePsi, parsePat, parsePmt, self;\n    TransportParseStream.prototype.init.call(this);\n    self = this;\n    this.packetsWaitingForPmt = [];\n    this.programMapTable = undefined;\n\n    parsePsi = function (payload, psi) {\n      var offset = 0; // PSI packets may be split into multiple sections and those\n      // sections may be split into multiple packets. If a PSI\n      // section starts in this packet, the payload_unit_start_indicator\n      // will be true and the first byte of the payload will indicate\n      // the offset from the current position to the start of the\n      // section.\n\n      if (psi.payloadUnitStartIndicator) {\n        offset += payload[offset] + 1;\n      }\n\n      if (psi.type === 'pat') {\n        parsePat(payload.subarray(offset), psi);\n      } else {\n        parsePmt(payload.subarray(offset), psi);\n      }\n    };\n\n    parsePat = function (payload, pat) {\n      pat.section_number = payload[7]; // eslint-disable-line camelcase\n\n      pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n      // skip the PSI header and parse the first PMT entry\n\n      self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n      pat.pmtPid = self.pmtPid;\n    };\n    /**\n     * Parse out the relevant fields of a Program Map Table (PMT).\n     * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n     * packet. The first byte in this array should be the table_id\n     * field.\n     * @param pmt {object} the object that should be decorated with\n     * fields parsed from the PMT.\n     */\n\n\n    parsePmt = function (payload, pmt) {\n      var sectionLength, tableEnd, programInfoLength, offset; // PMTs can be sent ahead of the time when they should actually\n      // take effect. We don't believe this should ever be the case\n      // for HLS but we'll ignore \"forward\" PMT declarations if we see\n      // them. Future PMT declarations have the current_next_indicator\n      // set to zero.\n\n      if (!(payload[5] & 0x01)) {\n        return;\n      } // overwrite any existing program map table\n\n\n      self.programMapTable = {\n        video: null,\n        audio: null,\n        'timed-metadata': {}\n      }; // the mapping table ends at the end of the current section\n\n      sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n      tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n      // long the program info descriptors are\n\n      programInfoLength = (payload[10] & 0x0f) << 8 | payload[11]; // advance the offset to the first entry in the mapping table\n\n      offset = 12 + programInfoLength;\n\n      while (offset < tableEnd) {\n        var streamType = payload[offset];\n        var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]; // only map a single elementary_pid for audio and video stream types\n        // TODO: should this be done for metadata too? for now maintain behavior of\n        //       multiple metadata streams\n\n        if (streamType === StreamTypes$2.H264_STREAM_TYPE && self.programMapTable.video === null) {\n          self.programMapTable.video = pid;\n        } else if (streamType === StreamTypes$2.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\n          self.programMapTable.audio = pid;\n        } else if (streamType === StreamTypes$2.METADATA_STREAM_TYPE) {\n          // map pid to stream type for metadata streams\n          self.programMapTable['timed-metadata'][pid] = streamType;\n        } // move to the next table entry\n        // skip past the elementary stream descriptors, if present\n\n\n        offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n      } // record the map on the packet as well\n\n\n      pmt.programMapTable = self.programMapTable;\n    };\n    /**\n     * Deliver a new MP2T packet to the next stream in the pipeline.\n     */\n\n\n    this.push = function (packet) {\n      var result = {},\n          offset = 4;\n      result.payloadUnitStartIndicator = !!(packet[1] & 0x40); // pid is a 13-bit field starting at the last bit of packet[1]\n\n      result.pid = packet[1] & 0x1f;\n      result.pid <<= 8;\n      result.pid |= packet[2]; // if an adaption field is present, its length is specified by the\n      // fifth byte of the TS packet header. The adaptation field is\n      // used to add stuffing to PES packets that don't fill a complete\n      // TS packet, and to specify some forms of timing and control data\n      // that we do not currently use.\n\n      if ((packet[3] & 0x30) >>> 4 > 0x01) {\n        offset += packet[offset] + 1;\n      } // parse the rest of the packet based on the type\n\n\n      if (result.pid === 0) {\n        result.type = 'pat';\n        parsePsi(packet.subarray(offset), result);\n        this.trigger('data', result);\n      } else if (result.pid === this.pmtPid) {\n        result.type = 'pmt';\n        parsePsi(packet.subarray(offset), result);\n        this.trigger('data', result); // if there are any packets waiting for a PMT to be found, process them now\n\n        while (this.packetsWaitingForPmt.length) {\n          this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n        }\n      } else if (this.programMapTable === undefined) {\n        // When we have not seen a PMT yet, defer further processing of\n        // PES packets until one has been parsed\n        this.packetsWaitingForPmt.push([packet, offset, result]);\n      } else {\n        this.processPes_(packet, offset, result);\n      }\n    };\n\n    this.processPes_ = function (packet, offset, result) {\n      // set the appropriate stream type\n      if (result.pid === this.programMapTable.video) {\n        result.streamType = StreamTypes$2.H264_STREAM_TYPE;\n      } else if (result.pid === this.programMapTable.audio) {\n        result.streamType = StreamTypes$2.ADTS_STREAM_TYPE;\n      } else {\n        // if not video or audio, it is timed-metadata or unknown\n        // if unknown, streamType will be undefined\n        result.streamType = this.programMapTable['timed-metadata'][result.pid];\n      }\n\n      result.type = 'pes';\n      result.data = packet.subarray(offset);\n      this.trigger('data', result);\n    };\n  };\n\n  TransportParseStream.prototype = new Stream$4();\n  TransportParseStream.STREAM_TYPES = {\n    h264: 0x1b,\n    adts: 0x0f\n  };\n  /**\n   * Reconsistutes program elementary stream (PES) packets from parsed\n   * transport stream packets. That is, if you pipe an\n   * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n   * events will be events which capture the bytes for individual PES\n   * packets plus relevant metadata that has been extracted from the\n   * container.\n   */\n\n  ElementaryStream = function () {\n    var self = this,\n        segmentHadPmt = false,\n        // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n        audio = {\n      data: [],\n      size: 0\n    },\n        timedMetadata = {\n      data: [],\n      size: 0\n    },\n        programMapTable,\n        parsePes = function (payload, pes) {\n      var ptsDtsFlags;\n      const startPrefix = payload[0] << 16 | payload[1] << 8 | payload[2]; // default to an empty array\n\n      pes.data = new Uint8Array(); // In certain live streams, the start of a TS fragment has ts packets\n      // that are frame data that is continuing from the previous fragment. This\n      // is to check that the pes data is the start of a new pes payload\n\n      if (startPrefix !== 1) {\n        return;\n      } // get the packet length, this will be 0 for video\n\n\n      pes.packetLength = 6 + (payload[4] << 8 | payload[5]); // find out if this packets starts a new keyframe\n\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0; // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n\n      ptsDtsFlags = payload[7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\n        pes.pts *= 4; // Left shift by 2\n\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n\n        pes.dts = pes.pts;\n\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      } // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n\n\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n\n    /**\n      * Pass completely parsed PES packets to the next stream in the pipeline\n     **/\n    flushStream = function (stream, type, forceFlush) {\n      var packetData = new Uint8Array(stream.size),\n          event = {\n        type: type\n      },\n          i = 0,\n          offset = 0,\n          packetFlushable = false,\n          fragment; // do nothing if there is not enough buffered data for a complete\n      // PES header\n\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n\n      event.trackId = stream.data[0].pid; // reassemble the packet\n\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      } // parse assembled packet's PES header\n\n\n      parsePes(packetData, event); // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that there is enough stream data to fill the packet\n\n      packetFlushable = type === 'video' || event.packetLength <= stream.size; // flush pending packets if the conditions are right\n\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      } // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n\n\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n    ElementaryStream.prototype.init.call(this);\n    /**\n     * Identifies M2TS packet types and parses PES packets using metadata\n     * parsed from the PMT\n     **/\n\n    this.push = function (data) {\n      ({\n        pat: function () {// we have to wait for the PMT to arrive as well before we\n          // have any meaningful metadata\n        },\n        pes: function () {\n          var stream, streamType;\n\n          switch (data.streamType) {\n            case StreamTypes$2.H264_STREAM_TYPE:\n              stream = video;\n              streamType = 'video';\n              break;\n\n            case StreamTypes$2.ADTS_STREAM_TYPE:\n              stream = audio;\n              streamType = 'audio';\n              break;\n\n            case StreamTypes$2.METADATA_STREAM_TYPE:\n              stream = timedMetadata;\n              streamType = 'timed-metadata';\n              break;\n\n            default:\n              // ignore unknown stream types\n              return;\n          } // if a new packet is starting, we can flush the completed\n          // packet\n\n\n          if (data.payloadUnitStartIndicator) {\n            flushStream(stream, streamType, true);\n          } // buffer this fragment until we are sure we've received the\n          // complete payload\n\n\n          stream.data.push(data);\n          stream.size += data.data.byteLength;\n        },\n        pmt: function () {\n          var event = {\n            type: 'metadata',\n            tracks: []\n          };\n          programMapTable = data.programMapTable; // translate audio and video streams to tracks\n\n          if (programMapTable.video !== null) {\n            event.tracks.push({\n              timelineStartInfo: {\n                baseMediaDecodeTime: 0\n              },\n              id: +programMapTable.video,\n              codec: 'avc',\n              type: 'video'\n            });\n          }\n\n          if (programMapTable.audio !== null) {\n            event.tracks.push({\n              timelineStartInfo: {\n                baseMediaDecodeTime: 0\n              },\n              id: +programMapTable.audio,\n              codec: 'adts',\n              type: 'audio'\n            });\n          }\n\n          segmentHadPmt = true;\n          self.trigger('data', event);\n        }\n      })[data.type]();\n    };\n\n    this.reset = function () {\n      video.size = 0;\n      video.data.length = 0;\n      audio.size = 0;\n      audio.data.length = 0;\n      this.trigger('reset');\n    };\n    /**\n     * Flush any remaining input. Video PES packets may be of variable\n     * length. Normally, the start of a new video packet can trigger the\n     * finalization of the previous packet. That is not possible if no\n     * more video is forthcoming, however. In that case, some other\n     * mechanism (like the end of the file) has to be employed. When it is\n     * clear that no additional data is forthcoming, calling this method\n     * will flush the buffered packets.\n     */\n\n\n    this.flushStreams_ = function () {\n      // !!THIS ORDER IS IMPORTANT!!\n      // video first then audio\n      flushStream(video, 'video');\n      flushStream(audio, 'audio');\n      flushStream(timedMetadata, 'timed-metadata');\n    };\n\n    this.flush = function () {\n      // if on flush we haven't had a pmt emitted\n      // and we have a pmt to emit. emit the pmt\n      // so that we trigger a trackinfo downstream.\n      if (!segmentHadPmt && programMapTable) {\n        var pmt = {\n          type: 'metadata',\n          tracks: []\n        }; // translate audio and video streams to tracks\n\n        if (programMapTable.video !== null) {\n          pmt.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n\n        if (programMapTable.audio !== null) {\n          pmt.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n\n        self.trigger('data', pmt);\n      }\n\n      segmentHadPmt = false;\n      this.flushStreams_();\n      this.trigger('done');\n    };\n  };\n\n  ElementaryStream.prototype = new Stream$4();\n  var m2ts$1 = {\n    PAT_PID: 0x0000,\n    MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH$1,\n    TransportPacketStream: TransportPacketStream,\n    TransportParseStream: TransportParseStream,\n    ElementaryStream: ElementaryStream,\n    TimestampRolloverStream: TimestampRolloverStream,\n    CaptionStream: CaptionStream$1.CaptionStream,\n    Cea608Stream: CaptionStream$1.Cea608Stream,\n    Cea708Stream: CaptionStream$1.Cea708Stream,\n    MetadataStream: metadataStream\n  };\n\n  for (var type in StreamTypes$2) {\n    if (StreamTypes$2.hasOwnProperty(type)) {\n      m2ts$1[type] = StreamTypes$2[type];\n    }\n  }\n\n  var m2ts_1 = m2ts$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var Stream$3 = stream;\n  var ONE_SECOND_IN_TS$2 = clock$2.ONE_SECOND_IN_TS;\n  var AdtsStream$1;\n  var ADTS_SAMPLING_FREQUENCIES$1 = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n  /*\n   * Accepts a ElementaryStream and emits data events with parsed\n   * AAC Audio Frames of the individual packets. Input audio in ADTS\n   * format is unpacked and re-emitted as AAC frames.\n   *\n   * @see http://wiki.multimedia.cx/index.php?title=ADTS\n   * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n   */\n\n  AdtsStream$1 = function (handlePartialSegments) {\n    var buffer,\n        frameNum = 0;\n    AdtsStream$1.prototype.init.call(this);\n\n    this.skipWarn_ = function (start, end) {\n      this.trigger('log', {\n        level: 'warn',\n        message: `adts skiping bytes ${start} to ${end} in frame ${frameNum} outside syncword`\n      });\n    };\n\n    this.push = function (packet) {\n      var i = 0,\n          frameLength,\n          protectionSkipBytes,\n          oldBuffer,\n          sampleCount,\n          adtsFrameDuration;\n\n      if (!handlePartialSegments) {\n        frameNum = 0;\n      }\n\n      if (packet.type !== 'audio') {\n        // ignore non-audio data\n        return;\n      } // Prepend any data in the buffer to the input data so that we can parse\n      // aac frames the cross a PES packet boundary\n\n\n      if (buffer && buffer.length) {\n        oldBuffer = buffer;\n        buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n        buffer.set(oldBuffer);\n        buffer.set(packet.data, oldBuffer.byteLength);\n      } else {\n        buffer = packet.data;\n      } // unpack any ADTS frames which have been fully received\n      // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n\n\n      var skip; // We use i + 7 here because we want to be able to parse the entire header.\n      // If we don't have enough bytes to do that, then we definitely won't have a full frame.\n\n      while (i + 7 < buffer.length) {\n        // Look for the start of an ADTS header..\n        if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n          if (typeof skip !== 'number') {\n            skip = i;\n          } // If a valid header was not found,  jump one forward and attempt to\n          // find a valid ADTS header starting at the next byte\n\n\n          i++;\n          continue;\n        }\n\n        if (typeof skip === 'number') {\n          this.skipWarn_(skip, i);\n          skip = null;\n        } // The protection skip bit tells us if we have 2 bytes of CRC data at the\n        // end of the ADTS header\n\n\n        protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2; // Frame length is a 13 bit integer starting 16 bits from the\n        // end of the sync sequence\n        // NOTE: frame length includes the size of the header\n\n        frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;\n        sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n        adtsFrameDuration = sampleCount * ONE_SECOND_IN_TS$2 / ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 0x3c) >>> 2]; // If we don't have enough data to actually finish this ADTS frame,\n        // then we have to wait for more data\n\n        if (buffer.byteLength - i < frameLength) {\n          break;\n        } // Otherwise, deliver the complete AAC frame\n\n\n        this.trigger('data', {\n          pts: packet.pts + frameNum * adtsFrameDuration,\n          dts: packet.dts + frameNum * adtsFrameDuration,\n          sampleCount: sampleCount,\n          audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,\n          channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,\n          samplerate: ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 0x3c) >>> 2],\n          samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n          // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n          samplesize: 16,\n          // data is the frame without it's header\n          data: buffer.subarray(i + 7 + protectionSkipBytes, i + frameLength)\n        });\n        frameNum++;\n        i += frameLength;\n      }\n\n      if (typeof skip === 'number') {\n        this.skipWarn_(skip, i);\n        skip = null;\n      } // remove processed bytes from the buffer.\n\n\n      buffer = buffer.subarray(i);\n    };\n\n    this.flush = function () {\n      frameNum = 0;\n      this.trigger('done');\n    };\n\n    this.reset = function () {\n      buffer = void 0;\n      this.trigger('reset');\n    };\n\n    this.endTimeline = function () {\n      buffer = void 0;\n      this.trigger('endedtimeline');\n    };\n  };\n\n  AdtsStream$1.prototype = new Stream$3();\n  var adts = AdtsStream$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var ExpGolomb$1;\n  /**\n   * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n   * scheme used by h264.\n   */\n\n  ExpGolomb$1 = function (workingData) {\n    var // the number of bytes left to examine in workingData\n    workingBytesAvailable = workingData.byteLength,\n        // the current word being examined\n    workingWord = 0,\n        // :uint\n    // the number of bits left to examine in the current word\n    workingBitsAvailable = 0; // :uint;\n    // ():uint\n\n    this.length = function () {\n      return 8 * workingBytesAvailable;\n    }; // ():uint\n\n\n    this.bitsAvailable = function () {\n      return 8 * workingBytesAvailable + workingBitsAvailable;\n    }; // ():void\n\n\n    this.loadWord = function () {\n      var position = workingData.byteLength - workingBytesAvailable,\n          workingBytes = new Uint8Array(4),\n          availableBytes = Math.min(4, workingBytesAvailable);\n\n      if (availableBytes === 0) {\n        throw new Error('no bytes available');\n      }\n\n      workingBytes.set(workingData.subarray(position, position + availableBytes));\n      workingWord = new DataView(workingBytes.buffer).getUint32(0); // track the amount of workingData that has been processed\n\n      workingBitsAvailable = availableBytes * 8;\n      workingBytesAvailable -= availableBytes;\n    }; // (count:int):void\n\n\n    this.skipBits = function (count) {\n      var skipBytes; // :int\n\n      if (workingBitsAvailable > count) {\n        workingWord <<= count;\n        workingBitsAvailable -= count;\n      } else {\n        count -= workingBitsAvailable;\n        skipBytes = Math.floor(count / 8);\n        count -= skipBytes * 8;\n        workingBytesAvailable -= skipBytes;\n        this.loadWord();\n        workingWord <<= count;\n        workingBitsAvailable -= count;\n      }\n    }; // (size:int):uint\n\n\n    this.readBits = function (size) {\n      var bits = Math.min(workingBitsAvailable, size),\n          // :uint\n      valu = workingWord >>> 32 - bits; // :uint\n      // if size > 31, handle error\n\n      workingBitsAvailable -= bits;\n\n      if (workingBitsAvailable > 0) {\n        workingWord <<= bits;\n      } else if (workingBytesAvailable > 0) {\n        this.loadWord();\n      }\n\n      bits = size - bits;\n\n      if (bits > 0) {\n        return valu << bits | this.readBits(bits);\n      }\n\n      return valu;\n    }; // ():uint\n\n\n    this.skipLeadingZeros = function () {\n      var leadingZeroCount; // :uint\n\n      for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n        if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {\n          // the first bit of working word is 1\n          workingWord <<= leadingZeroCount;\n          workingBitsAvailable -= leadingZeroCount;\n          return leadingZeroCount;\n        }\n      } // we exhausted workingWord and still have not found a 1\n\n\n      this.loadWord();\n      return leadingZeroCount + this.skipLeadingZeros();\n    }; // ():void\n\n\n    this.skipUnsignedExpGolomb = function () {\n      this.skipBits(1 + this.skipLeadingZeros());\n    }; // ():void\n\n\n    this.skipExpGolomb = function () {\n      this.skipBits(1 + this.skipLeadingZeros());\n    }; // ():uint\n\n\n    this.readUnsignedExpGolomb = function () {\n      var clz = this.skipLeadingZeros(); // :uint\n\n      return this.readBits(clz + 1) - 1;\n    }; // ():int\n\n\n    this.readExpGolomb = function () {\n      var valu = this.readUnsignedExpGolomb(); // :int\n\n      if (0x01 & valu) {\n        // the number is odd if the low order bit is set\n        return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n      }\n\n      return -1 * (valu >>> 1); // divide by two then make it negative\n    }; // Some convenience functions\n    // :Boolean\n\n\n    this.readBoolean = function () {\n      return this.readBits(1) === 1;\n    }; // ():int\n\n\n    this.readUnsignedByte = function () {\n      return this.readBits(8);\n    };\n\n    this.loadWord();\n  };\n\n  var expGolomb = ExpGolomb$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var Stream$2 = stream;\n  var ExpGolomb = expGolomb;\n  var H264Stream$1, NalByteStream;\n  var PROFILES_WITH_OPTIONAL_SPS_DATA;\n  /**\n   * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n   */\n\n  NalByteStream = function () {\n    var syncPoint = 0,\n        i,\n        buffer;\n    NalByteStream.prototype.init.call(this);\n    /*\n     * Scans a byte stream and triggers a data event with the NAL units found.\n     * @param {Object} data Event received from H264Stream\n     * @param {Uint8Array} data.data The h264 byte stream to be scanned\n     *\n     * @see H264Stream.push\n     */\n\n    this.push = function (data) {\n      var swapBuffer;\n\n      if (!buffer) {\n        buffer = data.data;\n      } else {\n        swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n        swapBuffer.set(buffer);\n        swapBuffer.set(data.data, buffer.byteLength);\n        buffer = swapBuffer;\n      }\n\n      var len = buffer.byteLength; // Rec. ITU-T H.264, Annex B\n      // scan for NAL unit boundaries\n      // a match looks like this:\n      // 0 0 1 .. NAL .. 0 0 1\n      // ^ sync point        ^ i\n      // or this:\n      // 0 0 1 .. NAL .. 0 0 0\n      // ^ sync point        ^ i\n      // advance the sync point to a NAL start, if necessary\n\n      for (; syncPoint < len - 3; syncPoint++) {\n        if (buffer[syncPoint + 2] === 1) {\n          // the sync point is properly aligned\n          i = syncPoint + 5;\n          break;\n        }\n      }\n\n      while (i < len) {\n        // look at the current byte to determine if we've hit the end of\n        // a NAL unit boundary\n        switch (buffer[i]) {\n          case 0:\n            // skip past non-sync sequences\n            if (buffer[i - 1] !== 0) {\n              i += 2;\n              break;\n            } else if (buffer[i - 2] !== 0) {\n              i++;\n              break;\n            } // deliver the NAL unit if it isn't empty\n\n\n            if (syncPoint + 3 !== i - 2) {\n              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n            } // drop trailing zeroes\n\n\n            do {\n              i++;\n            } while (buffer[i] !== 1 && i < len);\n\n            syncPoint = i - 2;\n            i += 3;\n            break;\n\n          case 1:\n            // skip past non-sync sequences\n            if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {\n              i += 3;\n              break;\n            } // deliver the NAL unit\n\n\n            this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n            syncPoint = i - 2;\n            i += 3;\n            break;\n\n          default:\n            // the current byte isn't a one or zero, so it cannot be part\n            // of a sync sequence\n            i += 3;\n            break;\n        }\n      } // filter out the NAL units that were delivered\n\n\n      buffer = buffer.subarray(syncPoint);\n      i -= syncPoint;\n      syncPoint = 0;\n    };\n\n    this.reset = function () {\n      buffer = null;\n      syncPoint = 0;\n      this.trigger('reset');\n    };\n\n    this.flush = function () {\n      // deliver the last buffered NAL unit\n      if (buffer && buffer.byteLength > 3) {\n        this.trigger('data', buffer.subarray(syncPoint + 3));\n      } // reset the stream state\n\n\n      buffer = null;\n      syncPoint = 0;\n      this.trigger('done');\n    };\n\n    this.endTimeline = function () {\n      this.flush();\n      this.trigger('endedtimeline');\n    };\n  };\n\n  NalByteStream.prototype = new Stream$2(); // values of profile_idc that indicate additional fields are included in the SPS\n  // see Recommendation ITU-T H.264 (4/2013),\n  // 7.3.2.1.1 Sequence parameter set data syntax\n\n  PROFILES_WITH_OPTIONAL_SPS_DATA = {\n    100: true,\n    110: true,\n    122: true,\n    244: true,\n    44: true,\n    83: true,\n    86: true,\n    118: true,\n    128: true,\n    // TODO: the three profiles below don't\n    // appear to have sps data in the specificiation anymore?\n    138: true,\n    139: true,\n    134: true\n  };\n  /**\n   * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n   * events.\n   */\n\n  H264Stream$1 = function () {\n    var nalByteStream = new NalByteStream(),\n        self,\n        trackId,\n        currentPts,\n        currentDts,\n        discardEmulationPreventionBytes,\n        readSequenceParameterSet,\n        skipScalingList;\n    H264Stream$1.prototype.init.call(this);\n    self = this;\n    /*\n     * Pushes a packet from a stream onto the NalByteStream\n     *\n     * @param {Object} packet - A packet received from a stream\n     * @param {Uint8Array} packet.data - The raw bytes of the packet\n     * @param {Number} packet.dts - Decode timestamp of the packet\n     * @param {Number} packet.pts - Presentation timestamp of the packet\n     * @param {Number} packet.trackId - The id of the h264 track this packet came from\n     * @param {('video'|'audio')} packet.type - The type of packet\n     *\n     */\n\n    this.push = function (packet) {\n      if (packet.type !== 'video') {\n        return;\n      }\n\n      trackId = packet.trackId;\n      currentPts = packet.pts;\n      currentDts = packet.dts;\n      nalByteStream.push(packet);\n    };\n    /*\n     * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n     * for the NALUs to the next stream component.\n     * Also, preprocess caption and sequence parameter NALUs.\n     *\n     * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n     * @see NalByteStream.push\n     */\n\n\n    nalByteStream.on('data', function (data) {\n      var event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data,\n        nalUnitTypeCode: data[0] & 0x1f\n      };\n\n      switch (event.nalUnitTypeCode) {\n        case 0x05:\n          event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n          break;\n\n        case 0x06:\n          event.nalUnitType = 'sei_rbsp';\n          event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n          break;\n\n        case 0x07:\n          event.nalUnitType = 'seq_parameter_set_rbsp';\n          event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n          event.config = readSequenceParameterSet(event.escapedRBSP);\n          break;\n\n        case 0x08:\n          event.nalUnitType = 'pic_parameter_set_rbsp';\n          break;\n\n        case 0x09:\n          event.nalUnitType = 'access_unit_delimiter_rbsp';\n          break;\n      } // This triggers data on the H264Stream\n\n\n      self.trigger('data', event);\n    });\n    nalByteStream.on('done', function () {\n      self.trigger('done');\n    });\n    nalByteStream.on('partialdone', function () {\n      self.trigger('partialdone');\n    });\n    nalByteStream.on('reset', function () {\n      self.trigger('reset');\n    });\n    nalByteStream.on('endedtimeline', function () {\n      self.trigger('endedtimeline');\n    });\n\n    this.flush = function () {\n      nalByteStream.flush();\n    };\n\n    this.partialFlush = function () {\n      nalByteStream.partialFlush();\n    };\n\n    this.reset = function () {\n      nalByteStream.reset();\n    };\n\n    this.endTimeline = function () {\n      nalByteStream.endTimeline();\n    };\n    /**\n     * Advance the ExpGolomb decoder past a scaling list. The scaling\n     * list is optionally transmitted as part of a sequence parameter\n     * set and is not relevant to transmuxing.\n     * @param count {number} the number of entries in this scaling list\n     * @param expGolombDecoder {object} an ExpGolomb pointed to the\n     * start of a scaling list\n     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n     */\n\n\n    skipScalingList = function (count, expGolombDecoder) {\n      var lastScale = 8,\n          nextScale = 8,\n          j,\n          deltaScale;\n\n      for (j = 0; j < count; j++) {\n        if (nextScale !== 0) {\n          deltaScale = expGolombDecoder.readExpGolomb();\n          nextScale = (lastScale + deltaScale + 256) % 256;\n        }\n\n        lastScale = nextScale === 0 ? lastScale : nextScale;\n      }\n    };\n    /**\n     * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n     * Sequence Payload\"\n     * @param data {Uint8Array} the bytes of a RBSP from a NAL\n     * unit\n     * @return {Uint8Array} the RBSP without any Emulation\n     * Prevention Bytes\n     */\n\n\n    discardEmulationPreventionBytes = function (data) {\n      var length = data.byteLength,\n          emulationPreventionBytesPositions = [],\n          i = 1,\n          newLength,\n          newData; // Find all `Emulation Prevention Bytes`\n\n      while (i < length - 2) {\n        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n          emulationPreventionBytesPositions.push(i + 2);\n          i += 2;\n        } else {\n          i++;\n        }\n      } // If no Emulation Prevention Bytes were found just return the original\n      // array\n\n\n      if (emulationPreventionBytesPositions.length === 0) {\n        return data;\n      } // Create a new array to hold the NAL unit data\n\n\n      newLength = length - emulationPreventionBytesPositions.length;\n      newData = new Uint8Array(newLength);\n      var sourceIndex = 0;\n\n      for (i = 0; i < newLength; sourceIndex++, i++) {\n        if (sourceIndex === emulationPreventionBytesPositions[0]) {\n          // Skip this byte\n          sourceIndex++; // Remove this position index\n\n          emulationPreventionBytesPositions.shift();\n        }\n\n        newData[i] = data[sourceIndex];\n      }\n\n      return newData;\n    };\n    /**\n     * Read a sequence parameter set and return some interesting video\n     * properties. A sequence parameter set is the H264 metadata that\n     * describes the properties of upcoming video frames.\n     * @param data {Uint8Array} the bytes of a sequence parameter set\n     * @return {object} an object with configuration parsed from the\n     * sequence parameter set, including the dimensions of the\n     * associated video frames.\n     */\n\n\n    readSequenceParameterSet = function (data) {\n      var frameCropLeftOffset = 0,\n          frameCropRightOffset = 0,\n          frameCropTopOffset = 0,\n          frameCropBottomOffset = 0,\n          expGolombDecoder,\n          profileIdc,\n          levelIdc,\n          profileCompatibility,\n          chromaFormatIdc,\n          picOrderCntType,\n          numRefFramesInPicOrderCntCycle,\n          picWidthInMbsMinus1,\n          picHeightInMapUnitsMinus1,\n          frameMbsOnlyFlag,\n          scalingListCount,\n          sarRatio = [1, 1],\n          aspectRatioIdc,\n          i;\n      expGolombDecoder = new ExpGolomb(data);\n      profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n\n      profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n\n      levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n\n      expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n      // some profiles have more optional data we don't need\n\n      if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n        chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n\n        if (chromaFormatIdc === 3) {\n          expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n\n        expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n\n        if (expGolombDecoder.readBoolean()) {\n          // seq_scaling_matrix_present_flag\n          scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n\n          for (i = 0; i < scalingListCount; i++) {\n            if (expGolombDecoder.readBoolean()) {\n              // seq_scaling_list_present_flag[ i ]\n              if (i < 6) {\n                skipScalingList(16, expGolombDecoder);\n              } else {\n                skipScalingList(64, expGolombDecoder);\n              }\n            }\n          }\n        }\n      }\n\n      expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n\n      picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n      if (picOrderCntType === 0) {\n        expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n      } else if (picOrderCntType === 1) {\n        expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n\n        expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n\n        expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n\n        numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n\n        for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n          expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n        }\n      }\n\n      expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n\n      expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n      picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n      picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n      frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n\n      if (frameMbsOnlyFlag === 0) {\n        expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n      }\n\n      expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n\n      if (expGolombDecoder.readBoolean()) {\n        // frame_cropping_flag\n        frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n        frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n        frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n        frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n      }\n\n      if (expGolombDecoder.readBoolean()) {\n        // vui_parameters_present_flag\n        if (expGolombDecoder.readBoolean()) {\n          // aspect_ratio_info_present_flag\n          aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n\n          switch (aspectRatioIdc) {\n            case 1:\n              sarRatio = [1, 1];\n              break;\n\n            case 2:\n              sarRatio = [12, 11];\n              break;\n\n            case 3:\n              sarRatio = [10, 11];\n              break;\n\n            case 4:\n              sarRatio = [16, 11];\n              break;\n\n            case 5:\n              sarRatio = [40, 33];\n              break;\n\n            case 6:\n              sarRatio = [24, 11];\n              break;\n\n            case 7:\n              sarRatio = [20, 11];\n              break;\n\n            case 8:\n              sarRatio = [32, 11];\n              break;\n\n            case 9:\n              sarRatio = [80, 33];\n              break;\n\n            case 10:\n              sarRatio = [18, 11];\n              break;\n\n            case 11:\n              sarRatio = [15, 11];\n              break;\n\n            case 12:\n              sarRatio = [64, 33];\n              break;\n\n            case 13:\n              sarRatio = [160, 99];\n              break;\n\n            case 14:\n              sarRatio = [4, 3];\n              break;\n\n            case 15:\n              sarRatio = [3, 2];\n              break;\n\n            case 16:\n              sarRatio = [2, 1];\n              break;\n\n            case 255:\n              {\n                sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];\n                break;\n              }\n          }\n\n          if (sarRatio) {\n            sarRatio[0] / sarRatio[1];\n          }\n        }\n      }\n\n      return {\n        profileIdc: profileIdc,\n        levelIdc: levelIdc,\n        profileCompatibility: profileCompatibility,\n        width: (picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2,\n        height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2,\n        // sar is sample aspect ratio\n        sarRatio: sarRatio\n      };\n    };\n  };\n\n  H264Stream$1.prototype = new Stream$2();\n  var h264 = {\n    H264Stream: H264Stream$1,\n    NalByteStream: NalByteStream\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Utilities to detect basic properties and metadata about Aac data.\n   */\n\n  var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n  var parseId3TagSize = function (header, byteIndex) {\n    var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],\n        flags = header[byteIndex + 5],\n        footerPresent = (flags & 16) >> 4; // if we get a negative returnSize clamp it to 0\n\n    returnSize = returnSize >= 0 ? returnSize : 0;\n\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n\n    return returnSize + 10;\n  };\n\n  var getId3Offset = function (data, offset) {\n    if (data.length - offset < 10 || data[offset] !== 'I'.charCodeAt(0) || data[offset + 1] !== 'D'.charCodeAt(0) || data[offset + 2] !== '3'.charCodeAt(0)) {\n      return offset;\n    }\n\n    offset += parseId3TagSize(data, offset);\n    return getId3Offset(data, offset);\n  }; // TODO: use vhs-utils\n\n\n  var isLikelyAacData$1 = function (data) {\n    var offset = getId3Offset(data, 0);\n    return data.length >= offset + 2 && (data[offset] & 0xFF) === 0xFF && (data[offset + 1] & 0xF0) === 0xF0 && // verify that the 2 layer bits are 0, aka this\n    // is not mp3 data but aac data.\n    (data[offset + 1] & 0x16) === 0x10;\n  };\n\n  var parseSyncSafeInteger = function (data) {\n    return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n  }; // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n\n\n  var percentEncode = function (bytes, start, end) {\n    var i,\n        result = '';\n\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n\n    return result;\n  }; // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n\n\n  var parseIso88591 = function (bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  };\n\n  var parseAdtsSize = function (header, byteIndex) {\n    var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n        middle = header[byteIndex + 4] << 3,\n        highTwo = header[byteIndex + 3] & 0x3 << 11;\n    return highTwo | middle | lowThree;\n  };\n\n  var parseType$5 = function (header, byteIndex) {\n    if (header[byteIndex] === 'I'.charCodeAt(0) && header[byteIndex + 1] === 'D'.charCodeAt(0) && header[byteIndex + 2] === '3'.charCodeAt(0)) {\n      return 'timed-metadata';\n    } else if (header[byteIndex] & 0xff === 0xff && (header[byteIndex + 1] & 0xf0) === 0xf0) {\n      return 'audio';\n    }\n\n    return null;\n  };\n\n  var parseSampleRate = function (packet) {\n    var i = 0;\n\n    while (i + 5 < packet.length) {\n      if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n    }\n\n    return null;\n  };\n\n  var parseAacTimestamp = function (packet) {\n    var frameStart, frameSize, frame, frameHeader; // find the start of the first frame and the end of the tag\n\n    frameStart = 10;\n\n    if (packet[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n\n      frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n    } // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n\n      if (frameSize < 1) {\n        return null;\n      }\n\n      frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);\n\n      if (frameHeader === 'PRIV') {\n        frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n\n        for (var i = 0; i < frame.byteLength; i++) {\n          if (frame[i] === 0) {\n            var owner = parseIso88591(frame, 0, i);\n\n            if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n              var d = frame.subarray(i + 1);\n              var size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n              size *= 4;\n              size += d[7] & 0x03;\n              return size;\n            }\n\n            break;\n          }\n        }\n      }\n\n      frameStart += 10; // advance past the frame header\n\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < packet.byteLength);\n\n    return null;\n  };\n\n  var utils = {\n    isLikelyAacData: isLikelyAacData$1,\n    parseId3TagSize: parseId3TagSize,\n    parseAdtsSize: parseAdtsSize,\n    parseType: parseType$5,\n    parseSampleRate: parseSampleRate,\n    parseAacTimestamp: parseAacTimestamp\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A stream-based aac to mp4 converter. This utility can be used to\n   * deliver mp4s to a SourceBuffer on platforms that support native\n   * Media Source Extensions.\n   */\n\n  var Stream$1 = stream;\n  var aacUtils = utils; // Constants\n\n  var AacStream$1;\n  /**\n   * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n   */\n\n  AacStream$1 = function () {\n    var everything = new Uint8Array(),\n        timeStamp = 0;\n    AacStream$1.prototype.init.call(this);\n\n    this.setTimestamp = function (timestamp) {\n      timeStamp = timestamp;\n    };\n\n    this.push = function (bytes) {\n      var frameSize = 0,\n          byteIndex = 0,\n          bytesLeft,\n          chunk,\n          packet,\n          tempLength; // If there are bytes remaining from the last segment, prepend them to the\n      // bytes that were pushed in\n\n      if (everything.length) {\n        tempLength = everything.length;\n        everything = new Uint8Array(bytes.byteLength + tempLength);\n        everything.set(everything.subarray(0, tempLength));\n        everything.set(bytes, tempLength);\n      } else {\n        everything = bytes;\n      }\n\n      while (everything.length - byteIndex >= 3) {\n        if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {\n          // Exit early because we don't have enough to parse\n          // the ID3 tag header\n          if (everything.length - byteIndex < 10) {\n            break;\n          } // check framesize\n\n\n          frameSize = aacUtils.parseId3TagSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n          // Add to byteIndex to support multiple ID3 tags in sequence\n\n          if (byteIndex + frameSize > everything.length) {\n            break;\n          }\n\n          chunk = {\n            type: 'timed-metadata',\n            data: everything.subarray(byteIndex, byteIndex + frameSize)\n          };\n          this.trigger('data', chunk);\n          byteIndex += frameSize;\n          continue;\n        } else if ((everything[byteIndex] & 0xff) === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {\n          // Exit early because we don't have enough to parse\n          // the ADTS frame header\n          if (everything.length - byteIndex < 7) {\n            break;\n          }\n\n          frameSize = aacUtils.parseAdtsSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n\n          if (byteIndex + frameSize > everything.length) {\n            break;\n          }\n\n          packet = {\n            type: 'audio',\n            data: everything.subarray(byteIndex, byteIndex + frameSize),\n            pts: timeStamp,\n            dts: timeStamp\n          };\n          this.trigger('data', packet);\n          byteIndex += frameSize;\n          continue;\n        }\n\n        byteIndex++;\n      }\n\n      bytesLeft = everything.length - byteIndex;\n\n      if (bytesLeft > 0) {\n        everything = everything.subarray(byteIndex);\n      } else {\n        everything = new Uint8Array();\n      }\n    };\n\n    this.reset = function () {\n      everything = new Uint8Array();\n      this.trigger('reset');\n    };\n\n    this.endTimeline = function () {\n      everything = new Uint8Array();\n      this.trigger('endedtimeline');\n    };\n  };\n\n  AacStream$1.prototype = new Stream$1();\n  var aac = AacStream$1;\n  var AUDIO_PROPERTIES$1 = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];\n  var audioProperties = AUDIO_PROPERTIES$1;\n  var VIDEO_PROPERTIES$1 = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility', 'sarRatio'];\n  var videoProperties = VIDEO_PROPERTIES$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A stream-based mp2t to mp4 converter. This utility can be used to\n   * deliver mp4s to a SourceBuffer on platforms that support native\n   * Media Source Extensions.\n   */\n\n  var Stream = stream;\n  var mp4 = mp4Generator;\n  var frameUtils = frameUtils$1;\n  var audioFrameUtils = audioFrameUtils$1;\n  var trackDecodeInfo = trackDecodeInfo$1;\n  var m2ts = m2ts_1;\n  var clock = clock$2;\n  var AdtsStream = adts;\n  var H264Stream = h264.H264Stream;\n  var AacStream = aac;\n  var isLikelyAacData = utils.isLikelyAacData;\n  var ONE_SECOND_IN_TS$1 = clock$2.ONE_SECOND_IN_TS;\n  var AUDIO_PROPERTIES = audioProperties;\n  var VIDEO_PROPERTIES = videoProperties; // object types\n\n  var VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n\n  var retriggerForStream = function (key, event) {\n    event.stream = key;\n    this.trigger('log', event);\n  };\n\n  var addPipelineLogRetriggers = function (transmuxer, pipeline) {\n    var keys = Object.keys(pipeline);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]; // skip non-stream keys and headOfPipeline\n      // which is just a duplicate\n\n      if (key === 'headOfPipeline' || !pipeline[key].on) {\n        continue;\n      }\n\n      pipeline[key].on('log', retriggerForStream.bind(transmuxer, key));\n    }\n  };\n  /**\n   * Compare two arrays (even typed) for same-ness\n   */\n\n\n  var arrayEquals = function (a, b) {\n    var i;\n\n    if (a.length !== b.length) {\n      return false;\n    } // compare the value of each element in the array\n\n\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var generateSegmentTimingInfo = function (baseMediaDecodeTime, startDts, startPts, endDts, endPts, prependedContentDuration) {\n    var ptsOffsetFromDts = startPts - startDts,\n        decodeDuration = endDts - startDts,\n        presentationDuration = endPts - startPts; // The PTS and DTS values are based on the actual stream times from the segment,\n    // however, the player time values will reflect a start from the baseMediaDecodeTime.\n    // In order to provide relevant values for the player times, base timing info on the\n    // baseMediaDecodeTime and the DTS and PTS durations of the segment.\n\n    return {\n      start: {\n        dts: baseMediaDecodeTime,\n        pts: baseMediaDecodeTime + ptsOffsetFromDts\n      },\n      end: {\n        dts: baseMediaDecodeTime + decodeDuration,\n        pts: baseMediaDecodeTime + presentationDuration\n      },\n      prependedContentDuration: prependedContentDuration,\n      baseMediaDecodeTime: baseMediaDecodeTime\n    };\n  };\n  /**\n   * Constructs a single-track, ISO BMFF media segment from AAC data\n   * events. The output of this stream can be fed to a SourceBuffer\n   * configured with a suitable initialization segment.\n   * @param track {object} track metadata configuration\n   * @param options {object} transmuxer options object\n   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at 0.\n   */\n\n\n  AudioSegmentStream = function (track, options) {\n    var adtsFrames = [],\n        sequenceNumber,\n        earliestAllowedDts = 0,\n        audioAppendStartTs = 0,\n        videoBaseMediaDecodeTime = Infinity;\n    options = options || {};\n    sequenceNumber = options.firstSequenceNumber || 0;\n    AudioSegmentStream.prototype.init.call(this);\n\n    this.push = function (data) {\n      trackDecodeInfo.collectDtsInfo(track, data);\n\n      if (track) {\n        AUDIO_PROPERTIES.forEach(function (prop) {\n          track[prop] = data[prop];\n        });\n      } // buffer audio data until end() is called\n\n\n      adtsFrames.push(data);\n    };\n\n    this.setEarliestDts = function (earliestDts) {\n      earliestAllowedDts = earliestDts;\n    };\n\n    this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n      videoBaseMediaDecodeTime = baseMediaDecodeTime;\n    };\n\n    this.setAudioAppendStart = function (timestamp) {\n      audioAppendStartTs = timestamp;\n    };\n\n    this.flush = function () {\n      var frames, moof, mdat, boxes, frameDuration, segmentDuration, videoClockCyclesOfSilencePrefixed; // return early if no audio data has been observed\n\n      if (adtsFrames.length === 0) {\n        this.trigger('done', 'AudioSegmentStream');\n        return;\n      }\n\n      frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);\n      track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps); // amount of audio filled but the value is in video clock rather than audio clock\n\n      videoClockCyclesOfSilencePrefixed = audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime); // we have to build the index from byte locations to\n      // samples (that is, adts frames) in the audio data\n\n      track.samples = audioFrameUtils.generateSampleTable(frames); // concatenate the audio data to constuct the mdat\n\n      mdat = mp4.mdat(audioFrameUtils.concatenateFrameData(frames));\n      adtsFrames = [];\n      moof = mp4.moof(sequenceNumber, [track]);\n      boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // bump the sequence number for next time\n\n      sequenceNumber++;\n      boxes.set(moof);\n      boxes.set(mdat, moof.byteLength);\n      trackDecodeInfo.clearDtsInfo(track);\n      frameDuration = Math.ceil(ONE_SECOND_IN_TS$1 * 1024 / track.samplerate); // TODO this check was added to maintain backwards compatibility (particularly with\n      // tests) on adding the timingInfo event. However, it seems unlikely that there's a\n      // valid use-case where an init segment/data should be triggered without associated\n      // frames. Leaving for now, but should be looked into.\n\n      if (frames.length) {\n        segmentDuration = frames.length * frameDuration;\n        this.trigger('segmentTimingInfo', generateSegmentTimingInfo( // The audio track's baseMediaDecodeTime is in audio clock cycles, but the\n        // frame info is in video clock cycles. Convert to match expectation of\n        // listeners (that all timestamps will be based on video clock cycles).\n        clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate), // frame times are already in video clock, as is segment duration\n        frames[0].dts, frames[0].pts, frames[0].dts + segmentDuration, frames[0].pts + segmentDuration, videoClockCyclesOfSilencePrefixed || 0));\n        this.trigger('timingInfo', {\n          start: frames[0].pts,\n          end: frames[0].pts + segmentDuration\n        });\n      }\n\n      this.trigger('data', {\n        track: track,\n        boxes: boxes\n      });\n      this.trigger('done', 'AudioSegmentStream');\n    };\n\n    this.reset = function () {\n      trackDecodeInfo.clearDtsInfo(track);\n      adtsFrames = [];\n      this.trigger('reset');\n    };\n  };\n\n  AudioSegmentStream.prototype = new Stream();\n  /**\n   * Constructs a single-track, ISO BMFF media segment from H264 data\n   * events. The output of this stream can be fed to a SourceBuffer\n   * configured with a suitable initialization segment.\n   * @param track {object} track metadata configuration\n   * @param options {object} transmuxer options object\n   * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n   *        gopsToAlignWith list when attempting to align gop pts\n   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at 0.\n   */\n\n  VideoSegmentStream = function (track, options) {\n    var sequenceNumber,\n        nalUnits = [],\n        gopsToAlignWith = [],\n        config,\n        pps;\n    options = options || {};\n    sequenceNumber = options.firstSequenceNumber || 0;\n    VideoSegmentStream.prototype.init.call(this);\n    delete track.minPTS;\n    this.gopCache_ = [];\n    /**\n      * Constructs a ISO BMFF segment given H264 nalUnits\n      * @param {Object} nalUnit A data event representing a nalUnit\n      * @param {String} nalUnit.nalUnitType\n      * @param {Object} nalUnit.config Properties for a mp4 track\n      * @param {Uint8Array} nalUnit.data The nalUnit bytes\n      * @see lib/codecs/h264.js\n     **/\n\n    this.push = function (nalUnit) {\n      trackDecodeInfo.collectDtsInfo(track, nalUnit); // record the track config\n\n      if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n        config = nalUnit.config;\n        track.sps = [nalUnit.data];\n        VIDEO_PROPERTIES.forEach(function (prop) {\n          track[prop] = config[prop];\n        }, this);\n      }\n\n      if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {\n        pps = nalUnit.data;\n        track.pps = [nalUnit.data];\n      } // buffer video until flush() is called\n\n\n      nalUnits.push(nalUnit);\n    };\n    /**\n      * Pass constructed ISO BMFF track and boxes on to the\n      * next stream in the pipeline\n     **/\n\n\n    this.flush = function () {\n      var frames,\n          gopForFusion,\n          gops,\n          moof,\n          mdat,\n          boxes,\n          prependedContentDuration = 0,\n          firstGop,\n          lastGop; // Throw away nalUnits at the start of the byte stream until\n      // we find the first AUD\n\n      while (nalUnits.length) {\n        if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n          break;\n        }\n\n        nalUnits.shift();\n      } // Return early if no video data has been observed\n\n\n      if (nalUnits.length === 0) {\n        this.resetStream_();\n        this.trigger('done', 'VideoSegmentStream');\n        return;\n      } // Organize the raw nal-units into arrays that represent\n      // higher-level constructs such as frames and gops\n      // (group-of-pictures)\n\n\n      frames = frameUtils.groupNalsIntoFrames(nalUnits);\n      gops = frameUtils.groupFramesIntoGops(frames); // If the first frame of this fragment is not a keyframe we have\n      // a problem since MSE (on Chrome) requires a leading keyframe.\n      //\n      // We have two approaches to repairing this situation:\n      // 1) GOP-FUSION:\n      //    This is where we keep track of the GOPS (group-of-pictures)\n      //    from previous fragments and attempt to find one that we can\n      //    prepend to the current fragment in order to create a valid\n      //    fragment.\n      // 2) KEYFRAME-PULLING:\n      //    Here we search for the first keyframe in the fragment and\n      //    throw away all the frames between the start of the fragment\n      //    and that keyframe. We then extend the duration and pull the\n      //    PTS of the keyframe forward so that it covers the time range\n      //    of the frames that were disposed of.\n      //\n      // #1 is far prefereable over #2 which can cause \"stuttering\" but\n      // requires more things to be just right.\n\n      if (!gops[0][0].keyFrame) {\n        // Search for a gop for fusion from our gopCache\n        gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n\n        if (gopForFusion) {\n          // in order to provide more accurate timing information about the segment, save\n          // the number of seconds prepended to the original segment due to GOP fusion\n          prependedContentDuration = gopForFusion.duration;\n          gops.unshift(gopForFusion); // Adjust Gops' metadata to account for the inclusion of the\n          // new gop at the beginning\n\n          gops.byteLength += gopForFusion.byteLength;\n          gops.nalCount += gopForFusion.nalCount;\n          gops.pts = gopForFusion.pts;\n          gops.dts = gopForFusion.dts;\n          gops.duration += gopForFusion.duration;\n        } else {\n          // If we didn't find a candidate gop fall back to keyframe-pulling\n          gops = frameUtils.extendFirstKeyFrame(gops);\n        }\n      } // Trim gops to align with gopsToAlignWith\n\n\n      if (gopsToAlignWith.length) {\n        var alignedGops;\n\n        if (options.alignGopsAtEnd) {\n          alignedGops = this.alignGopsAtEnd_(gops);\n        } else {\n          alignedGops = this.alignGopsAtStart_(gops);\n        }\n\n        if (!alignedGops) {\n          // save all the nals in the last GOP into the gop cache\n          this.gopCache_.unshift({\n            gop: gops.pop(),\n            pps: track.pps,\n            sps: track.sps\n          }); // Keep a maximum of 6 GOPs in the cache\n\n          this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\n\n          nalUnits = []; // return early no gops can be aligned with desired gopsToAlignWith\n\n          this.resetStream_();\n          this.trigger('done', 'VideoSegmentStream');\n          return;\n        } // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n        // when recalculated before sending off to CoalesceStream\n\n\n        trackDecodeInfo.clearDtsInfo(track);\n        gops = alignedGops;\n      }\n\n      trackDecodeInfo.collectDtsInfo(track, gops); // First, we have to build the index from byte locations to\n      // samples (that is, frames) in the video data\n\n      track.samples = frameUtils.generateSampleTable(gops); // Concatenate the video data and construct the mdat\n\n      mdat = mp4.mdat(frameUtils.concatenateNalData(gops));\n      track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n      this.trigger('processedGopsInfo', gops.map(function (gop) {\n        return {\n          pts: gop.pts,\n          dts: gop.dts,\n          byteLength: gop.byteLength\n        };\n      }));\n      firstGop = gops[0];\n      lastGop = gops[gops.length - 1];\n      this.trigger('segmentTimingInfo', generateSegmentTimingInfo(track.baseMediaDecodeTime, firstGop.dts, firstGop.pts, lastGop.dts + lastGop.duration, lastGop.pts + lastGop.duration, prependedContentDuration));\n      this.trigger('timingInfo', {\n        start: gops[0].pts,\n        end: gops[gops.length - 1].pts + gops[gops.length - 1].duration\n      }); // save all the nals in the last GOP into the gop cache\n\n      this.gopCache_.unshift({\n        gop: gops.pop(),\n        pps: track.pps,\n        sps: track.sps\n      }); // Keep a maximum of 6 GOPs in the cache\n\n      this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\n\n      nalUnits = [];\n      this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n      this.trigger('timelineStartInfo', track.timelineStartInfo);\n      moof = mp4.moof(sequenceNumber, [track]); // it would be great to allocate this array up front instead of\n      // throwing away hundreds of media segment fragments\n\n      boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // Bump the sequence number for next time\n\n      sequenceNumber++;\n      boxes.set(moof);\n      boxes.set(mdat, moof.byteLength);\n      this.trigger('data', {\n        track: track,\n        boxes: boxes\n      });\n      this.resetStream_(); // Continue with the flush process now\n\n      this.trigger('done', 'VideoSegmentStream');\n    };\n\n    this.reset = function () {\n      this.resetStream_();\n      nalUnits = [];\n      this.gopCache_.length = 0;\n      gopsToAlignWith.length = 0;\n      this.trigger('reset');\n    };\n\n    this.resetStream_ = function () {\n      trackDecodeInfo.clearDtsInfo(track); // reset config and pps because they may differ across segments\n      // for instance, when we are rendition switching\n\n      config = undefined;\n      pps = undefined;\n    }; // Search for a candidate Gop for gop-fusion from the gop cache and\n    // return it or return null if no good candidate was found\n\n\n    this.getGopForFusion_ = function (nalUnit) {\n      var halfSecond = 45000,\n          // Half-a-second in a 90khz clock\n      allowableOverlap = 10000,\n          // About 3 frames @ 30fps\n      nearestDistance = Infinity,\n          dtsDistance,\n          nearestGopObj,\n          currentGop,\n          currentGopObj,\n          i; // Search for the GOP nearest to the beginning of this nal unit\n\n      for (i = 0; i < this.gopCache_.length; i++) {\n        currentGopObj = this.gopCache_[i];\n        currentGop = currentGopObj.gop; // Reject Gops with different SPS or PPS\n\n        if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n          continue;\n        } // Reject Gops that would require a negative baseMediaDecodeTime\n\n\n        if (currentGop.dts < track.timelineStartInfo.dts) {\n          continue;\n        } // The distance between the end of the gop and the start of the nalUnit\n\n\n        dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration; // Only consider GOPS that start before the nal unit and end within\n        // a half-second of the nal unit\n\n        if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {\n          // Always use the closest GOP we found if there is more than\n          // one candidate\n          if (!nearestGopObj || nearestDistance > dtsDistance) {\n            nearestGopObj = currentGopObj;\n            nearestDistance = dtsDistance;\n          }\n        }\n      }\n\n      if (nearestGopObj) {\n        return nearestGopObj.gop;\n      }\n\n      return null;\n    }; // trim gop list to the first gop found that has a matching pts with a gop in the list\n    // of gopsToAlignWith starting from the START of the list\n\n\n    this.alignGopsAtStart_ = function (gops) {\n      var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n      byteLength = gops.byteLength;\n      nalCount = gops.nalCount;\n      duration = gops.duration;\n      alignIndex = gopIndex = 0;\n\n      while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n        align = gopsToAlignWith[alignIndex];\n        gop = gops[gopIndex];\n\n        if (align.pts === gop.pts) {\n          break;\n        }\n\n        if (gop.pts > align.pts) {\n          // this current gop starts after the current gop we want to align on, so increment\n          // align index\n          alignIndex++;\n          continue;\n        } // current gop starts before the current gop we want to align on. so increment gop\n        // index\n\n\n        gopIndex++;\n        byteLength -= gop.byteLength;\n        nalCount -= gop.nalCount;\n        duration -= gop.duration;\n      }\n\n      if (gopIndex === 0) {\n        // no gops to trim\n        return gops;\n      }\n\n      if (gopIndex === gops.length) {\n        // all gops trimmed, skip appending all gops\n        return null;\n      }\n\n      alignedGops = gops.slice(gopIndex);\n      alignedGops.byteLength = byteLength;\n      alignedGops.duration = duration;\n      alignedGops.nalCount = nalCount;\n      alignedGops.pts = alignedGops[0].pts;\n      alignedGops.dts = alignedGops[0].dts;\n      return alignedGops;\n    }; // trim gop list to the first gop found that has a matching pts with a gop in the list\n    // of gopsToAlignWith starting from the END of the list\n\n\n    this.alignGopsAtEnd_ = function (gops) {\n      var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n      alignIndex = gopsToAlignWith.length - 1;\n      gopIndex = gops.length - 1;\n      alignEndIndex = null;\n      matchFound = false;\n\n      while (alignIndex >= 0 && gopIndex >= 0) {\n        align = gopsToAlignWith[alignIndex];\n        gop = gops[gopIndex];\n\n        if (align.pts === gop.pts) {\n          matchFound = true;\n          break;\n        }\n\n        if (align.pts > gop.pts) {\n          alignIndex--;\n          continue;\n        }\n\n        if (alignIndex === gopsToAlignWith.length - 1) {\n          // gop.pts is greater than the last alignment candidate. If no match is found\n          // by the end of this loop, we still want to append gops that come after this\n          // point\n          alignEndIndex = gopIndex;\n        }\n\n        gopIndex--;\n      }\n\n      if (!matchFound && alignEndIndex === null) {\n        return null;\n      }\n\n      var trimIndex;\n\n      if (matchFound) {\n        trimIndex = gopIndex;\n      } else {\n        trimIndex = alignEndIndex;\n      }\n\n      if (trimIndex === 0) {\n        return gops;\n      }\n\n      var alignedGops = gops.slice(trimIndex);\n      var metadata = alignedGops.reduce(function (total, gop) {\n        total.byteLength += gop.byteLength;\n        total.duration += gop.duration;\n        total.nalCount += gop.nalCount;\n        return total;\n      }, {\n        byteLength: 0,\n        duration: 0,\n        nalCount: 0\n      });\n      alignedGops.byteLength = metadata.byteLength;\n      alignedGops.duration = metadata.duration;\n      alignedGops.nalCount = metadata.nalCount;\n      alignedGops.pts = alignedGops[0].pts;\n      alignedGops.dts = alignedGops[0].dts;\n      return alignedGops;\n    };\n\n    this.alignGopsWith = function (newGopsToAlignWith) {\n      gopsToAlignWith = newGopsToAlignWith;\n    };\n  };\n\n  VideoSegmentStream.prototype = new Stream();\n  /**\n   * A Stream that can combine multiple streams (ie. audio & video)\n   * into a single output segment for MSE. Also supports audio-only\n   * and video-only streams.\n   * @param options {object} transmuxer options object\n   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at media timeline start.\n   */\n\n  CoalesceStream = function (options, metadataStream) {\n    // Number of Tracks per output segment\n    // If greater than 1, we combine multiple\n    // tracks into a single segment\n    this.numberOfTracks = 0;\n    this.metadataStream = metadataStream;\n    options = options || {};\n\n    if (typeof options.remux !== 'undefined') {\n      this.remuxTracks = !!options.remux;\n    } else {\n      this.remuxTracks = true;\n    }\n\n    if (typeof options.keepOriginalTimestamps === 'boolean') {\n      this.keepOriginalTimestamps = options.keepOriginalTimestamps;\n    } else {\n      this.keepOriginalTimestamps = false;\n    }\n\n    this.pendingTracks = [];\n    this.videoTrack = null;\n    this.pendingBoxes = [];\n    this.pendingCaptions = [];\n    this.pendingMetadata = [];\n    this.pendingBytes = 0;\n    this.emittedTracks = 0;\n    CoalesceStream.prototype.init.call(this); // Take output from multiple\n\n    this.push = function (output) {\n      // buffer incoming captions until the associated video segment\n      // finishes\n      if (output.content || output.text) {\n        return this.pendingCaptions.push(output);\n      } // buffer incoming id3 tags until the final flush\n\n\n      if (output.frames) {\n        return this.pendingMetadata.push(output);\n      } // Add this track to the list of pending tracks and store\n      // important information required for the construction of\n      // the final segment\n\n\n      this.pendingTracks.push(output.track);\n      this.pendingBytes += output.boxes.byteLength; // TODO: is there an issue for this against chrome?\n      // We unshift audio and push video because\n      // as of Chrome 75 when switching from\n      // one init segment to another if the video\n      // mdat does not appear after the audio mdat\n      // only audio will play for the duration of our transmux.\n\n      if (output.track.type === 'video') {\n        this.videoTrack = output.track;\n        this.pendingBoxes.push(output.boxes);\n      }\n\n      if (output.track.type === 'audio') {\n        this.audioTrack = output.track;\n        this.pendingBoxes.unshift(output.boxes);\n      }\n    };\n  };\n\n  CoalesceStream.prototype = new Stream();\n\n  CoalesceStream.prototype.flush = function (flushSource) {\n    var offset = 0,\n        event = {\n      captions: [],\n      captionStreams: {},\n      metadata: [],\n      info: {}\n    },\n        caption,\n        id3,\n        initSegment,\n        timelineStartPts = 0,\n        i;\n\n    if (this.pendingTracks.length < this.numberOfTracks) {\n      if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {\n        // Return because we haven't received a flush from a data-generating\n        // portion of the segment (meaning that we have only recieved meta-data\n        // or captions.)\n        return;\n      } else if (this.remuxTracks) {\n        // Return until we have enough tracks from the pipeline to remux (if we\n        // are remuxing audio and video into a single MP4)\n        return;\n      } else if (this.pendingTracks.length === 0) {\n        // In the case where we receive a flush without any data having been\n        // received we consider it an emitted track for the purposes of coalescing\n        // `done` events.\n        // We do this for the case where there is an audio and video track in the\n        // segment but no audio data. (seen in several playlists with alternate\n        // audio tracks and no audio present in the main TS segments.)\n        this.emittedTracks++;\n\n        if (this.emittedTracks >= this.numberOfTracks) {\n          this.trigger('done');\n          this.emittedTracks = 0;\n        }\n\n        return;\n      }\n    }\n\n    if (this.videoTrack) {\n      timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n      VIDEO_PROPERTIES.forEach(function (prop) {\n        event.info[prop] = this.videoTrack[prop];\n      }, this);\n    } else if (this.audioTrack) {\n      timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n      AUDIO_PROPERTIES.forEach(function (prop) {\n        event.info[prop] = this.audioTrack[prop];\n      }, this);\n    }\n\n    if (this.videoTrack || this.audioTrack) {\n      if (this.pendingTracks.length === 1) {\n        event.type = this.pendingTracks[0].type;\n      } else {\n        event.type = 'combined';\n      }\n\n      this.emittedTracks += this.pendingTracks.length;\n      initSegment = mp4.initSegment(this.pendingTracks); // Create a new typed array to hold the init segment\n\n      event.initSegment = new Uint8Array(initSegment.byteLength); // Create an init segment containing a moov\n      // and track definitions\n\n      event.initSegment.set(initSegment); // Create a new typed array to hold the moof+mdats\n\n      event.data = new Uint8Array(this.pendingBytes); // Append each moof+mdat (one per track) together\n\n      for (i = 0; i < this.pendingBoxes.length; i++) {\n        event.data.set(this.pendingBoxes[i], offset);\n        offset += this.pendingBoxes[i].byteLength;\n      } // Translate caption PTS times into second offsets to match the\n      // video timeline for the segment, and add track info\n\n\n      for (i = 0; i < this.pendingCaptions.length; i++) {\n        caption = this.pendingCaptions[i];\n        caption.startTime = clock.metadataTsToSeconds(caption.startPts, timelineStartPts, this.keepOriginalTimestamps);\n        caption.endTime = clock.metadataTsToSeconds(caption.endPts, timelineStartPts, this.keepOriginalTimestamps);\n        event.captionStreams[caption.stream] = true;\n        event.captions.push(caption);\n      } // Translate ID3 frame PTS times into second offsets to match the\n      // video timeline for the segment\n\n\n      for (i = 0; i < this.pendingMetadata.length; i++) {\n        id3 = this.pendingMetadata[i];\n        id3.cueTime = clock.metadataTsToSeconds(id3.pts, timelineStartPts, this.keepOriginalTimestamps);\n        event.metadata.push(id3);\n      } // We add this to every single emitted segment even though we only need\n      // it for the first\n\n\n      event.metadata.dispatchType = this.metadataStream.dispatchType; // Reset stream state\n\n      this.pendingTracks.length = 0;\n      this.videoTrack = null;\n      this.pendingBoxes.length = 0;\n      this.pendingCaptions.length = 0;\n      this.pendingBytes = 0;\n      this.pendingMetadata.length = 0; // Emit the built segment\n      // We include captions and ID3 tags for backwards compatibility,\n      // ideally we should send only video and audio in the data event\n\n      this.trigger('data', event); // Emit each caption to the outside world\n      // Ideally, this would happen immediately on parsing captions,\n      // but we need to ensure that video data is sent back first\n      // so that caption timing can be adjusted to match video timing\n\n      for (i = 0; i < event.captions.length; i++) {\n        caption = event.captions[i];\n        this.trigger('caption', caption);\n      } // Emit each id3 tag to the outside world\n      // Ideally, this would happen immediately on parsing the tag,\n      // but we need to ensure that video data is sent back first\n      // so that ID3 frame timing can be adjusted to match video timing\n\n\n      for (i = 0; i < event.metadata.length; i++) {\n        id3 = event.metadata[i];\n        this.trigger('id3Frame', id3);\n      }\n    } // Only emit `done` if all tracks have been flushed and emitted\n\n\n    if (this.emittedTracks >= this.numberOfTracks) {\n      this.trigger('done');\n      this.emittedTracks = 0;\n    }\n  };\n\n  CoalesceStream.prototype.setRemux = function (val) {\n    this.remuxTracks = val;\n  };\n  /**\n   * A Stream that expects MP2T binary data as input and produces\n   * corresponding media segments, suitable for use with Media Source\n   * Extension (MSE) implementations that support the ISO BMFF byte\n   * stream format, like Chrome.\n   */\n\n\n  Transmuxer = function (options) {\n    var self = this,\n        hasFlushed = true,\n        videoTrack,\n        audioTrack;\n    Transmuxer.prototype.init.call(this);\n    options = options || {};\n    this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n    this.transmuxPipeline_ = {};\n\n    this.setupAacPipeline = function () {\n      var pipeline = {};\n      this.transmuxPipeline_ = pipeline;\n      pipeline.type = 'aac';\n      pipeline.metadataStream = new m2ts.MetadataStream(); // set up the parsing pipeline\n\n      pipeline.aacStream = new AacStream();\n      pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n      pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n      pipeline.adtsStream = new AdtsStream();\n      pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n      pipeline.headOfPipeline = pipeline.aacStream;\n      pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n      pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n      pipeline.metadataStream.on('timestamp', function (frame) {\n        pipeline.aacStream.setTimestamp(frame.timeStamp);\n      });\n      pipeline.aacStream.on('data', function (data) {\n        if (data.type !== 'timed-metadata' && data.type !== 'audio' || pipeline.audioSegmentStream) {\n          return;\n        }\n\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        }; // hook up the audio segment stream to the first track with aac data\n\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n        pipeline.audioSegmentStream.on('log', self.getLogTrigger_('audioSegmentStream'));\n        pipeline.audioSegmentStream.on('timingInfo', self.trigger.bind(self, 'audioTimingInfo')); // Set up the final part of the audio pipeline\n\n        pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream); // emit pmt info\n\n        self.trigger('trackinfo', {\n          hasAudio: !!audioTrack,\n          hasVideo: !!videoTrack\n        });\n      }); // Re-emit any data coming from the coalesce stream to the outside world\n\n      pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data')); // Let the consumer know we have finished flushing the entire pipeline\n\n      pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      addPipelineLogRetriggers(this, pipeline);\n    };\n\n    this.setupTsPipeline = function () {\n      var pipeline = {};\n      this.transmuxPipeline_ = pipeline;\n      pipeline.type = 'ts';\n      pipeline.metadataStream = new m2ts.MetadataStream(); // set up the parsing pipeline\n\n      pipeline.packetStream = new m2ts.TransportPacketStream();\n      pipeline.parseStream = new m2ts.TransportParseStream();\n      pipeline.elementaryStream = new m2ts.ElementaryStream();\n      pipeline.timestampRolloverStream = new m2ts.TimestampRolloverStream();\n      pipeline.adtsStream = new AdtsStream();\n      pipeline.h264Stream = new H264Stream();\n      pipeline.captionStream = new m2ts.CaptionStream(options);\n      pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n      pipeline.headOfPipeline = pipeline.packetStream; // disassemble MPEG2-TS packets into elementary streams\n\n      pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream).pipe(pipeline.timestampRolloverStream); // !!THIS ORDER IS IMPORTANT!!\n      // demux the streams\n\n      pipeline.timestampRolloverStream.pipe(pipeline.h264Stream);\n      pipeline.timestampRolloverStream.pipe(pipeline.adtsStream);\n      pipeline.timestampRolloverStream.pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream); // Hook up CEA-608/708 caption stream\n\n      pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);\n      pipeline.elementaryStream.on('data', function (data) {\n        var i;\n\n        if (data.type === 'metadata') {\n          i = data.tracks.length; // scan the tracks listed in the metadata\n\n          while (i--) {\n            if (!videoTrack && data.tracks[i].type === 'video') {\n              videoTrack = data.tracks[i];\n              videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n            } else if (!audioTrack && data.tracks[i].type === 'audio') {\n              audioTrack = data.tracks[i];\n              audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n            }\n          } // hook up the video segment stream to the first track with h264 data\n\n\n          if (videoTrack && !pipeline.videoSegmentStream) {\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack, options);\n            pipeline.videoSegmentStream.on('log', self.getLogTrigger_('videoSegmentStream'));\n            pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {\n              // When video emits timelineStartInfo data after a flush, we forward that\n              // info to the AudioSegmentStream, if it exists, because video timeline\n              // data takes precedence.  Do not do this if keepOriginalTimestamps is set,\n              // because this is a particularly subtle form of timestamp alteration.\n              if (audioTrack && !options.keepOriginalTimestamps) {\n                audioTrack.timelineStartInfo = timelineStartInfo; // On the first segment we trim AAC frames that exist before the\n                // very earliest DTS we have seen in video because Chrome will\n                // interpret any video track with a baseMediaDecodeTime that is\n                // non-zero as a gap.\n\n                pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts - self.baseMediaDecodeTime);\n              }\n            });\n            pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));\n            pipeline.videoSegmentStream.on('segmentTimingInfo', self.trigger.bind(self, 'videoSegmentTimingInfo'));\n            pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {\n              if (audioTrack) {\n                pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n              }\n            });\n            pipeline.videoSegmentStream.on('timingInfo', self.trigger.bind(self, 'videoTimingInfo')); // Set up the final part of the video pipeline\n\n            pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);\n          }\n\n          if (audioTrack && !pipeline.audioSegmentStream) {\n            // hook up the audio segment stream to the first track with aac data\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n            pipeline.audioSegmentStream.on('log', self.getLogTrigger_('audioSegmentStream'));\n            pipeline.audioSegmentStream.on('timingInfo', self.trigger.bind(self, 'audioTimingInfo'));\n            pipeline.audioSegmentStream.on('segmentTimingInfo', self.trigger.bind(self, 'audioSegmentTimingInfo')); // Set up the final part of the audio pipeline\n\n            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n          } // emit pmt info\n\n\n          self.trigger('trackinfo', {\n            hasAudio: !!audioTrack,\n            hasVideo: !!videoTrack\n          });\n        }\n      }); // Re-emit any data coming from the coalesce stream to the outside world\n\n      pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n      pipeline.coalesceStream.on('id3Frame', function (id3Frame) {\n        id3Frame.dispatchType = pipeline.metadataStream.dispatchType;\n        self.trigger('id3Frame', id3Frame);\n      });\n      pipeline.coalesceStream.on('caption', this.trigger.bind(this, 'caption')); // Let the consumer know we have finished flushing the entire pipeline\n\n      pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      addPipelineLogRetriggers(this, pipeline);\n    }; // hook up the segment streams once track metadata is delivered\n\n\n    this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n      var pipeline = this.transmuxPipeline_;\n\n      if (!options.keepOriginalTimestamps) {\n        this.baseMediaDecodeTime = baseMediaDecodeTime;\n      }\n\n      if (audioTrack) {\n        audioTrack.timelineStartInfo.dts = undefined;\n        audioTrack.timelineStartInfo.pts = undefined;\n        trackDecodeInfo.clearDtsInfo(audioTrack);\n\n        if (pipeline.audioTimestampRolloverStream) {\n          pipeline.audioTimestampRolloverStream.discontinuity();\n        }\n      }\n\n      if (videoTrack) {\n        if (pipeline.videoSegmentStream) {\n          pipeline.videoSegmentStream.gopCache_ = [];\n        }\n\n        videoTrack.timelineStartInfo.dts = undefined;\n        videoTrack.timelineStartInfo.pts = undefined;\n        trackDecodeInfo.clearDtsInfo(videoTrack);\n        pipeline.captionStream.reset();\n      }\n\n      if (pipeline.timestampRolloverStream) {\n        pipeline.timestampRolloverStream.discontinuity();\n      }\n    };\n\n    this.setAudioAppendStart = function (timestamp) {\n      if (audioTrack) {\n        this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n      }\n    };\n\n    this.setRemux = function (val) {\n      var pipeline = this.transmuxPipeline_;\n      options.remux = val;\n\n      if (pipeline && pipeline.coalesceStream) {\n        pipeline.coalesceStream.setRemux(val);\n      }\n    };\n\n    this.alignGopsWith = function (gopsToAlignWith) {\n      if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n        this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n      }\n    };\n\n    this.getLogTrigger_ = function (key) {\n      var self = this;\n      return function (event) {\n        event.stream = key;\n        self.trigger('log', event);\n      };\n    }; // feed incoming data to the front of the parsing pipeline\n\n\n    this.push = function (data) {\n      if (hasFlushed) {\n        var isAac = isLikelyAacData(data);\n\n        if (isAac && this.transmuxPipeline_.type !== 'aac') {\n          this.setupAacPipeline();\n        } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n          this.setupTsPipeline();\n        }\n\n        hasFlushed = false;\n      }\n\n      this.transmuxPipeline_.headOfPipeline.push(data);\n    }; // flush any buffered data\n\n\n    this.flush = function () {\n      hasFlushed = true; // Start at the top of the pipeline and flush all pending work\n\n      this.transmuxPipeline_.headOfPipeline.flush();\n    };\n\n    this.endTimeline = function () {\n      this.transmuxPipeline_.headOfPipeline.endTimeline();\n    };\n\n    this.reset = function () {\n      if (this.transmuxPipeline_.headOfPipeline) {\n        this.transmuxPipeline_.headOfPipeline.reset();\n      }\n    }; // Caption data has to be reset when seeking outside buffered range\n\n\n    this.resetCaptions = function () {\n      if (this.transmuxPipeline_.captionStream) {\n        this.transmuxPipeline_.captionStream.reset();\n      }\n    };\n  };\n\n  Transmuxer.prototype = new Stream();\n  var transmuxer = {\n    Transmuxer: Transmuxer,\n    VideoSegmentStream: VideoSegmentStream,\n    AudioSegmentStream: AudioSegmentStream,\n    AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n    VIDEO_PROPERTIES: VIDEO_PROPERTIES,\n    // exported for testing\n    generateSegmentTimingInfo: generateSegmentTimingInfo\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var toUnsigned$3 = function (value) {\n    return value >>> 0;\n  };\n\n  var toHexString$1 = function (value) {\n    return ('00' + value.toString(16)).slice(-2);\n  };\n\n  var bin = {\n    toUnsigned: toUnsigned$3,\n    toHexString: toHexString$1\n  };\n\n  var parseType$4 = function (buffer) {\n    var result = '';\n    result += String.fromCharCode(buffer[0]);\n    result += String.fromCharCode(buffer[1]);\n    result += String.fromCharCode(buffer[2]);\n    result += String.fromCharCode(buffer[3]);\n    return result;\n  };\n\n  var parseType_1 = parseType$4;\n  var toUnsigned$2 = bin.toUnsigned;\n  var parseType$3 = parseType_1;\n\n  var findBox$5 = function (data, path) {\n    var results = [],\n        i,\n        size,\n        type,\n        end,\n        subresults;\n\n    if (!path.length) {\n      // short-circuit the search for empty paths\n      return null;\n    }\n\n    for (i = 0; i < data.byteLength;) {\n      size = toUnsigned$2(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n      type = parseType$3(data.subarray(i + 4, i + 8));\n      end = size > 1 ? i + size : data.byteLength;\n\n      if (type === path[0]) {\n        if (path.length === 1) {\n          // this is the end of the path and we've found the box we were\n          // looking for\n          results.push(data.subarray(i + 8, end));\n        } else {\n          // recursively search for the next box along the path\n          subresults = findBox$5(data.subarray(i + 8, end), path.slice(1));\n\n          if (subresults.length) {\n            results = results.concat(subresults);\n          }\n        }\n      }\n\n      i = end;\n    } // we've finished searching all of data\n\n\n    return results;\n  };\n\n  var findBox_1 = findBox$5;\n  var toUnsigned$1 = bin.toUnsigned;\n  var getUint64$4 = numbers.getUint64;\n\n  var tfdt = function (data) {\n    var result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4))\n    };\n\n    if (result.version === 1) {\n      result.baseMediaDecodeTime = getUint64$4(data.subarray(4));\n    } else {\n      result.baseMediaDecodeTime = toUnsigned$1(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]);\n    }\n\n    return result;\n  };\n\n  var parseTfdt$3 = tfdt;\n\n  var tfhd = function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      trackId: view.getUint32(4)\n    },\n        baseDataOffsetPresent = result.flags[2] & 0x01,\n        sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n        defaultSampleDurationPresent = result.flags[2] & 0x08,\n        defaultSampleSizePresent = result.flags[2] & 0x10,\n        defaultSampleFlagsPresent = result.flags[2] & 0x20,\n        durationIsEmpty = result.flags[0] & 0x010000,\n        defaultBaseIsMoof = result.flags[0] & 0x020000,\n        i;\n    i = 8;\n\n    if (baseDataOffsetPresent) {\n      i += 4; // truncate top 4 bytes\n      // FIXME: should we read the full 64 bits?\n\n      result.baseDataOffset = view.getUint32(12);\n      i += 4;\n    }\n\n    if (sampleDescriptionIndexPresent) {\n      result.sampleDescriptionIndex = view.getUint32(i);\n      i += 4;\n    }\n\n    if (defaultSampleDurationPresent) {\n      result.defaultSampleDuration = view.getUint32(i);\n      i += 4;\n    }\n\n    if (defaultSampleSizePresent) {\n      result.defaultSampleSize = view.getUint32(i);\n      i += 4;\n    }\n\n    if (defaultSampleFlagsPresent) {\n      result.defaultSampleFlags = view.getUint32(i);\n    }\n\n    if (durationIsEmpty) {\n      result.durationIsEmpty = true;\n    }\n\n    if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n      result.baseDataOffsetIsMoof = true;\n    }\n\n    return result;\n  };\n\n  var parseTfhd$2 = tfhd;\n  var getUint64$3 = numbers.getUint64;\n\n  var parseSidx = function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      references: [],\n      referenceId: view.getUint32(4),\n      timescale: view.getUint32(8)\n    },\n        i = 12;\n\n    if (result.version === 0) {\n      result.earliestPresentationTime = view.getUint32(i);\n      result.firstOffset = view.getUint32(i + 4);\n      i += 8;\n    } else {\n      // read 64 bits\n      result.earliestPresentationTime = getUint64$3(data.subarray(i));\n      result.firstOffset = getUint64$3(data.subarray(i + 8));\n      i += 16;\n    }\n\n    i += 2; // reserved\n\n    var referenceCount = view.getUint16(i);\n    i += 2; // start of references\n\n    for (; referenceCount > 0; i += 12, referenceCount--) {\n      result.references.push({\n        referenceType: (data[i] & 0x80) >>> 7,\n        referencedSize: view.getUint32(i) & 0x7FFFFFFF,\n        subsegmentDuration: view.getUint32(i + 4),\n        startsWithSap: !!(data[i + 8] & 0x80),\n        sapType: (data[i + 8] & 0x70) >>> 4,\n        sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\n      });\n    }\n\n    return result;\n  };\n\n  var parseSidx_1 = parseSidx;\n\n  var parseSampleFlags$1 = function (flags) {\n    return {\n      isLeading: (flags[0] & 0x0c) >>> 2,\n      dependsOn: flags[0] & 0x03,\n      isDependedOn: (flags[1] & 0xc0) >>> 6,\n      hasRedundancy: (flags[1] & 0x30) >>> 4,\n      paddingValue: (flags[1] & 0x0e) >>> 1,\n      isNonSyncSample: flags[1] & 0x01,\n      degradationPriority: flags[2] << 8 | flags[3]\n    };\n  };\n\n  var parseSampleFlags_1 = parseSampleFlags$1;\n  var parseSampleFlags = parseSampleFlags_1;\n\n  var trun = function (data) {\n    var result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4)),\n      samples: []\n    },\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n        // Flag interpretation\n    dataOffsetPresent = result.flags[2] & 0x01,\n        // compare with 2nd byte of 0x1\n    firstSampleFlagsPresent = result.flags[2] & 0x04,\n        // compare with 2nd byte of 0x4\n    sampleDurationPresent = result.flags[1] & 0x01,\n        // compare with 2nd byte of 0x100\n    sampleSizePresent = result.flags[1] & 0x02,\n        // compare with 2nd byte of 0x200\n    sampleFlagsPresent = result.flags[1] & 0x04,\n        // compare with 2nd byte of 0x400\n    sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\n        // compare with 2nd byte of 0x800\n    sampleCount = view.getUint32(4),\n        offset = 8,\n        sample;\n\n    if (dataOffsetPresent) {\n      // 32 bit signed integer\n      result.dataOffset = view.getInt32(offset);\n      offset += 4;\n    } // Overrides the flags for the first sample only. The order of\n    // optional values will be: duration, size, compositionTimeOffset\n\n\n    if (firstSampleFlagsPresent && sampleCount) {\n      sample = {\n        flags: parseSampleFlags(data.subarray(offset, offset + 4))\n      };\n      offset += 4;\n\n      if (sampleDurationPresent) {\n        sample.duration = view.getUint32(offset);\n        offset += 4;\n      }\n\n      if (sampleSizePresent) {\n        sample.size = view.getUint32(offset);\n        offset += 4;\n      }\n\n      if (sampleCompositionTimeOffsetPresent) {\n        if (result.version === 1) {\n          sample.compositionTimeOffset = view.getInt32(offset);\n        } else {\n          sample.compositionTimeOffset = view.getUint32(offset);\n        }\n\n        offset += 4;\n      }\n\n      result.samples.push(sample);\n      sampleCount--;\n    }\n\n    while (sampleCount--) {\n      sample = {};\n\n      if (sampleDurationPresent) {\n        sample.duration = view.getUint32(offset);\n        offset += 4;\n      }\n\n      if (sampleSizePresent) {\n        sample.size = view.getUint32(offset);\n        offset += 4;\n      }\n\n      if (sampleFlagsPresent) {\n        sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n        offset += 4;\n      }\n\n      if (sampleCompositionTimeOffsetPresent) {\n        if (result.version === 1) {\n          sample.compositionTimeOffset = view.getInt32(offset);\n        } else {\n          sample.compositionTimeOffset = view.getUint32(offset);\n        }\n\n        offset += 4;\n      }\n\n      result.samples.push(sample);\n    }\n\n    return result;\n  };\n\n  var parseTrun$2 = trun;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Parse the internal MP4 structure into an equivalent javascript\n   * object.\n   */\n\n  var numberHelpers = numbers;\n  var getUint64$2 = numberHelpers.getUint64;\n\n  var inspectMp4,\n      textifyMp4,\n      parseMp4Date = function (seconds) {\n    return new Date(seconds * 1000 - 2082844800000);\n  },\n      parseType$2 = parseType_1,\n      findBox$4 = findBox_1,\n      nalParse = function (avcStream) {\n    var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n        result = [],\n        i,\n        length;\n\n    for (i = 0; i + 4 < avcStream.length; i += length) {\n      length = avcView.getUint32(i);\n      i += 4; // bail if this doesn't appear to be an H264 stream\n\n      if (length <= 0) {\n        result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\n        continue;\n      }\n\n      switch (avcStream[i] & 0x1F) {\n        case 0x01:\n          result.push('slice_layer_without_partitioning_rbsp');\n          break;\n\n        case 0x05:\n          result.push('slice_layer_without_partitioning_rbsp_idr');\n          break;\n\n        case 0x06:\n          result.push('sei_rbsp');\n          break;\n\n        case 0x07:\n          result.push('seq_parameter_set_rbsp');\n          break;\n\n        case 0x08:\n          result.push('pic_parameter_set_rbsp');\n          break;\n\n        case 0x09:\n          result.push('access_unit_delimiter_rbsp');\n          break;\n\n        default:\n          result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\n          break;\n      }\n    }\n\n    return result;\n  },\n      // registry of handlers for individual mp4 box types\n  parse = {\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    avc1: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        dataReferenceIndex: view.getUint16(6),\n        width: view.getUint16(24),\n        height: view.getUint16(26),\n        horizresolution: view.getUint16(28) + view.getUint16(30) / 16,\n        vertresolution: view.getUint16(32) + view.getUint16(34) / 16,\n        frameCount: view.getUint16(40),\n        depth: view.getUint16(74),\n        config: inspectMp4(data.subarray(78, data.byteLength))\n      };\n    },\n    avcC: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n        configurationVersion: data[0],\n        avcProfileIndication: data[1],\n        profileCompatibility: data[2],\n        avcLevelIndication: data[3],\n        lengthSizeMinusOne: data[4] & 0x03,\n        sps: [],\n        pps: []\n      },\n          numOfSequenceParameterSets = data[5] & 0x1f,\n          numOfPictureParameterSets,\n          nalSize,\n          offset,\n          i; // iterate past any SPSs\n\n      offset = 6;\n\n      for (i = 0; i < numOfSequenceParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      } // iterate past any PPSs\n\n\n      numOfPictureParameterSets = data[offset];\n      offset++;\n\n      for (i = 0; i < numOfPictureParameterSets; i++) {\n        nalSize = view.getUint16(offset);\n        offset += 2;\n        result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\n        offset += nalSize;\n      }\n\n      return result;\n    },\n    btrt: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        bufferSizeDB: view.getUint32(0),\n        maxBitrate: view.getUint32(4),\n        avgBitrate: view.getUint32(8)\n      };\n    },\n    edts: function edts(data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    elst: function elst(data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        edits: []\n      },\n          entryCount = view.getUint32(4),\n          i;\n\n      for (i = 8; entryCount; entryCount--) {\n        if (result.version === 0) {\n          result.edits.push({\n            segmentDuration: view.getUint32(i),\n            mediaTime: view.getInt32(i + 4),\n            mediaRate: view.getUint16(i + 8) + view.getUint16(i + 10) / (256 * 256)\n          });\n          i += 12;\n        } else {\n          result.edits.push({\n            segmentDuration: getUint64$2(data.subarray(i)),\n            mediaTime: getUint64$2(data.subarray(i + 8)),\n            mediaRate: view.getUint16(i + 16) + view.getUint16(i + 18) / (256 * 256)\n          });\n          i += 20;\n        }\n      }\n\n      return result;\n    },\n    esds: function (data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        esId: data[6] << 8 | data[7],\n        streamPriority: data[8] & 0x1f,\n        decoderConfig: {\n          objectProfileIndication: data[11],\n          streamType: data[12] >>> 2 & 0x3f,\n          bufferSize: data[13] << 16 | data[14] << 8 | data[15],\n          maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],\n          avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],\n          decoderConfigDescriptor: {\n            tag: data[24],\n            length: data[25],\n            audioObjectType: data[26] >>> 3 & 0x1f,\n            samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,\n            channelConfiguration: data[27] >>> 3 & 0x0f\n          }\n        }\n      };\n    },\n    ftyp: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n        majorBrand: parseType$2(data.subarray(0, 4)),\n        minorVersion: view.getUint32(4),\n        compatibleBrands: []\n      },\n          i = 8;\n\n      while (i < data.byteLength) {\n        result.compatibleBrands.push(parseType$2(data.subarray(i, i + 4)));\n        i += 4;\n      }\n\n      return result;\n    },\n    dinf: function (data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    dref: function (data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        dataReferences: inspectMp4(data.subarray(8))\n      };\n    },\n    hdlr: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        handlerType: parseType$2(data.subarray(8, 12)),\n        name: ''\n      },\n          i = 8; // parse out the name field\n\n      for (i = 24; i < data.byteLength; i++) {\n        if (data[i] === 0x00) {\n          // the name field is null-terminated\n          i++;\n          break;\n        }\n\n        result.name += String.fromCharCode(data[i]);\n      } // decode UTF-8 to javascript's internal representation\n      // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\n\n\n      result.name = decodeURIComponent(escape(result.name));\n      return result;\n    },\n    mdat: function (data) {\n      return {\n        byteLength: data.byteLength,\n        nals: nalParse(data)\n      };\n    },\n    mdhd: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          i = 4,\n          language,\n          result = {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        language: ''\n      };\n\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n\n      i += 4; // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\n      // each field is the packed difference between its ASCII value and 0x60\n\n      language = view.getUint16(i);\n      result.language += String.fromCharCode((language >> 10) + 0x60);\n      result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\n      result.language += String.fromCharCode((language & 0x1f) + 0x60);\n      return result;\n    },\n    mdia: function (data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mfhd: function (data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\n      };\n    },\n    minf: function (data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    // codingname, not a first-class box type. stsd entries share the\n    // same format as real boxes so the parsing infrastructure can be\n    // shared\n    mp4a: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n        // 6 bytes reserved\n        dataReferenceIndex: view.getUint16(6),\n        // 4 + 4 bytes reserved\n        channelcount: view.getUint16(16),\n        samplesize: view.getUint16(18),\n        // 2 bytes pre_defined\n        // 2 bytes reserved\n        samplerate: view.getUint16(24) + view.getUint16(26) / 65536\n      }; // if there are more bytes to process, assume this is an ISO/IEC\n      // 14496-14 MP4AudioSampleEntry and parse the ESDBox\n\n      if (data.byteLength > 28) {\n        result.streamDescriptor = inspectMp4(data.subarray(28))[0];\n      }\n\n      return result;\n    },\n    moof: function (data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    moov: function (data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvex: function (data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    mvhd: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          i = 4,\n          result = {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4))\n      };\n\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.timescale = view.getUint32(i);\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n\n      i += 4; // convert fixed-point, base 16 back to a number\n\n      result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;\n      i += 4;\n      result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n      i += 2;\n      i += 2;\n      i += 2 * 4;\n      result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n      i += 9 * 4;\n      i += 6 * 4;\n      result.nextTrackId = view.getUint32(i);\n      return result;\n    },\n    pdin: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        rate: view.getUint32(4),\n        initialDelay: view.getUint32(8)\n      };\n    },\n    sdtp: function (data) {\n      var result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        samples: []\n      },\n          i;\n\n      for (i = 4; i < data.byteLength; i++) {\n        result.samples.push({\n          dependsOn: (data[i] & 0x30) >> 4,\n          isDependedOn: (data[i] & 0x0c) >> 2,\n          hasRedundancy: data[i] & 0x03\n        });\n      }\n\n      return result;\n    },\n    sidx: parseSidx_1,\n    smhd: function (data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        balance: data[4] + data[5] / 256\n      };\n    },\n    stbl: function (data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    ctts: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        compositionOffsets: []\n      },\n          entryCount = view.getUint32(4),\n          i;\n\n      for (i = 8; entryCount; i += 8, entryCount--) {\n        result.compositionOffsets.push({\n          sampleCount: view.getUint32(i),\n          sampleOffset: view[result.version === 0 ? 'getUint32' : 'getInt32'](i + 4)\n        });\n      }\n\n      return result;\n    },\n    stss: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4)),\n        syncSamples: []\n      },\n          entryCount = view.getUint32(4),\n          i;\n\n      for (i = 8; entryCount; i += 4, entryCount--) {\n        result.syncSamples.push(view.getUint32(i));\n      }\n\n      return result;\n    },\n    stco: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        chunkOffsets: []\n      },\n          entryCount = view.getUint32(4),\n          i;\n\n      for (i = 8; entryCount; i += 4, entryCount--) {\n        result.chunkOffsets.push(view.getUint32(i));\n      }\n\n      return result;\n    },\n    stsc: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          entryCount = view.getUint32(4),\n          result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sampleToChunks: []\n      },\n          i;\n\n      for (i = 8; entryCount; i += 12, entryCount--) {\n        result.sampleToChunks.push({\n          firstChunk: view.getUint32(i),\n          samplesPerChunk: view.getUint32(i + 4),\n          sampleDescriptionIndex: view.getUint32(i + 8)\n        });\n      }\n\n      return result;\n    },\n    stsd: function (data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sampleDescriptions: inspectMp4(data.subarray(8))\n      };\n    },\n    stsz: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        sampleSize: view.getUint32(4),\n        entries: []\n      },\n          i;\n\n      for (i = 12; i < data.byteLength; i += 4) {\n        result.entries.push(view.getUint32(i));\n      }\n\n      return result;\n    },\n    stts: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        timeToSamples: []\n      },\n          entryCount = view.getUint32(4),\n          i;\n\n      for (i = 8; entryCount; i += 8, entryCount--) {\n        result.timeToSamples.push({\n          sampleCount: view.getUint32(i),\n          sampleDelta: view.getUint32(i + 4)\n        });\n      }\n\n      return result;\n    },\n    styp: function (data) {\n      return parse.ftyp(data);\n    },\n    tfdt: parseTfdt$3,\n    tfhd: parseTfhd$2,\n    tkhd: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n          i = 4,\n          result = {\n        version: view.getUint8(0),\n        flags: new Uint8Array(data.subarray(1, 4))\n      };\n\n      if (result.version === 1) {\n        i += 4;\n        result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n        i += 8;\n        result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\n\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 8;\n        result.duration = view.getUint32(i); // truncating top 4 bytes\n      } else {\n        result.creationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.modificationTime = parseMp4Date(view.getUint32(i));\n        i += 4;\n        result.trackId = view.getUint32(i);\n        i += 4;\n        i += 4;\n        result.duration = view.getUint32(i);\n      }\n\n      i += 4;\n      i += 2 * 4;\n      result.layer = view.getUint16(i);\n      i += 2;\n      result.alternateGroup = view.getUint16(i);\n      i += 2; // convert fixed-point, base 16 back to a number\n\n      result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\n      i += 2;\n      i += 2;\n      result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\n      i += 9 * 4;\n      result.width = view.getUint16(i) + view.getUint16(i + 2) / 65536;\n      i += 4;\n      result.height = view.getUint16(i) + view.getUint16(i + 2) / 65536;\n      return result;\n    },\n    traf: function (data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trak: function (data) {\n      return {\n        boxes: inspectMp4(data)\n      };\n    },\n    trex: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        trackId: view.getUint32(4),\n        defaultSampleDescriptionIndex: view.getUint32(8),\n        defaultSampleDuration: view.getUint32(12),\n        defaultSampleSize: view.getUint32(16),\n        sampleDependsOn: data[20] & 0x03,\n        sampleIsDependedOn: (data[21] & 0xc0) >> 6,\n        sampleHasRedundancy: (data[21] & 0x30) >> 4,\n        samplePaddingValue: (data[21] & 0x0e) >> 1,\n        sampleIsDifferenceSample: !!(data[21] & 0x01),\n        sampleDegradationPriority: view.getUint16(22)\n      };\n    },\n    trun: parseTrun$2,\n    'url ': function (data) {\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4))\n      };\n    },\n    vmhd: function (data) {\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      return {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        graphicsmode: view.getUint16(4),\n        opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])\n      };\n    }\n  };\n  /**\n   * Return a javascript array of box objects parsed from an ISO base\n   * media file.\n   * @param data {Uint8Array} the binary data of the media to be inspected\n   * @return {array} a javascript array of potentially nested box objects\n   */\n\n\n  inspectMp4 = function (data) {\n    var i = 0,\n        result = [],\n        view,\n        size,\n        type,\n        end,\n        box; // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\n\n    var ab = new ArrayBuffer(data.length);\n    var v = new Uint8Array(ab);\n\n    for (var z = 0; z < data.length; ++z) {\n      v[z] = data[z];\n    }\n\n    view = new DataView(ab);\n\n    while (i < data.byteLength) {\n      // parse box data\n      size = view.getUint32(i);\n      type = parseType$2(data.subarray(i + 4, i + 8));\n      end = size > 1 ? i + size : data.byteLength; // parse type-specific data\n\n      box = (parse[type] || function (data) {\n        return {\n          data: data\n        };\n      })(data.subarray(i + 8, end));\n\n      box.size = size;\n      box.type = type; // store this box and move to the next\n\n      result.push(box);\n      i = end;\n    }\n\n    return result;\n  };\n  /**\n   * Returns a textual representation of the javascript represtentation\n   * of an MP4 file. You can use it as an alternative to\n   * JSON.stringify() to compare inspected MP4s.\n   * @param inspectedMp4 {array} the parsed array of boxes in an MP4\n   * file\n   * @param depth {number} (optional) the number of ancestor boxes of\n   * the elements of inspectedMp4. Assumed to be zero if unspecified.\n   * @return {string} a text representation of the parsed MP4\n   */\n\n\n  textifyMp4 = function (inspectedMp4, depth) {\n    var indent;\n    depth = depth || 0;\n    indent = new Array(depth * 2 + 1).join(' '); // iterate over all the boxes\n\n    return inspectedMp4.map(function (box, index) {\n      // list the box type first at the current indentation level\n      return indent + box.type + '\\n' + // the type is already included and handle child boxes separately\n      Object.keys(box).filter(function (key) {\n        return key !== 'type' && key !== 'boxes'; // output all the box properties\n      }).map(function (key) {\n        var prefix = indent + '  ' + key + ': ',\n            value = box[key]; // print out raw bytes as hexademical\n\n        if (value instanceof Uint8Array || value instanceof Uint32Array) {\n          var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (byte) {\n            return ' ' + ('00' + byte.toString(16)).slice(-2);\n          }).join('').match(/.{1,24}/g);\n\n          if (!bytes) {\n            return prefix + '<>';\n          }\n\n          if (bytes.length === 1) {\n            return prefix + '<' + bytes.join('').slice(1) + '>';\n          }\n\n          return prefix + '<\\n' + bytes.map(function (line) {\n            return indent + '  ' + line;\n          }).join('\\n') + '\\n' + indent + '  >';\n        } // stringify generic objects\n\n\n        return prefix + JSON.stringify(value, null, 2).split('\\n').map(function (line, index) {\n          if (index === 0) {\n            return line;\n          }\n\n          return indent + '  ' + line;\n        }).join('\\n');\n      }).join('\\n') + ( // recursively textify the child boxes\n      box.boxes ? '\\n' + textifyMp4(box.boxes, depth + 1) : '');\n    }).join('\\n');\n  };\n\n  var mp4Inspector = {\n    inspect: inspectMp4,\n    textify: textifyMp4,\n    parseType: parseType$2,\n    findBox: findBox$4,\n    parseTraf: parse.traf,\n    parseTfdt: parse.tfdt,\n    parseHdlr: parse.hdlr,\n    parseTfhd: parse.tfhd,\n    parseTrun: parse.trun,\n    parseSidx: parse.sidx\n  };\n  /**\n   * Returns the first string in the data array ending with a null char '\\0'\n   * @param {UInt8} data \n   * @returns the string with the null char\n   */\n\n  var uint8ToCString$1 = function (data) {\n    var index = 0;\n    var curChar = String.fromCharCode(data[index]);\n    var retString = '';\n\n    while (curChar !== '\\0') {\n      retString += curChar;\n      index++;\n      curChar = String.fromCharCode(data[index]);\n    } // Add nullChar\n\n\n    retString += curChar;\n    return retString;\n  };\n\n  var string = {\n    uint8ToCString: uint8ToCString$1\n  };\n  var uint8ToCString = string.uint8ToCString;\n  var getUint64$1 = numbers.getUint64;\n  /**\n   * Based on: ISO/IEC 23009 Section: 5.10.3.3\n   * References:\n   * https://dashif-documents.azurewebsites.net/Events/master/event.html#emsg-format\n   * https://aomediacodec.github.io/id3-emsg/\n   * \n   * Takes emsg box data as a uint8 array and returns a emsg box object\n   * @param {UInt8Array} boxData data from emsg box\n   * @returns A parsed emsg box object\n   */\n\n  var parseEmsgBox = function (boxData) {\n    // version + flags\n    var offset = 4;\n    var version = boxData[0];\n    var scheme_id_uri, value, timescale, presentation_time, presentation_time_delta, event_duration, id, message_data;\n\n    if (version === 0) {\n      scheme_id_uri = uint8ToCString(boxData.subarray(offset));\n      offset += scheme_id_uri.length;\n      value = uint8ToCString(boxData.subarray(offset));\n      offset += value.length;\n      var dv = new DataView(boxData.buffer);\n      timescale = dv.getUint32(offset);\n      offset += 4;\n      presentation_time_delta = dv.getUint32(offset);\n      offset += 4;\n      event_duration = dv.getUint32(offset);\n      offset += 4;\n      id = dv.getUint32(offset);\n      offset += 4;\n    } else if (version === 1) {\n      var dv = new DataView(boxData.buffer);\n      timescale = dv.getUint32(offset);\n      offset += 4;\n      presentation_time = getUint64$1(boxData.subarray(offset));\n      offset += 8;\n      event_duration = dv.getUint32(offset);\n      offset += 4;\n      id = dv.getUint32(offset);\n      offset += 4;\n      scheme_id_uri = uint8ToCString(boxData.subarray(offset));\n      offset += scheme_id_uri.length;\n      value = uint8ToCString(boxData.subarray(offset));\n      offset += value.length;\n    }\n\n    message_data = new Uint8Array(boxData.subarray(offset, boxData.byteLength));\n    var emsgBox = {\n      scheme_id_uri,\n      value,\n      // if timescale is undefined or 0 set to 1 \n      timescale: timescale ? timescale : 1,\n      presentation_time,\n      presentation_time_delta,\n      event_duration,\n      id,\n      message_data\n    };\n    return isValidEmsgBox(version, emsgBox) ? emsgBox : undefined;\n  };\n  /**\n   * Scales a presentation time or time delta with an offset with a provided timescale\n   * @param {number} presentationTime \n   * @param {number} timescale \n   * @param {number} timeDelta \n   * @param {number} offset \n   * @returns the scaled time as a number\n   */\n\n\n  var scaleTime = function (presentationTime, timescale, timeDelta, offset) {\n    return presentationTime || presentationTime === 0 ? presentationTime / timescale : offset + timeDelta / timescale;\n  };\n  /**\n   * Checks the emsg box data for validity based on the version\n   * @param {number} version of the emsg box to validate\n   * @param {Object} emsg the emsg data to validate\n   * @returns if the box is valid as a boolean\n   */\n\n\n  var isValidEmsgBox = function (version, emsg) {\n    var hasScheme = emsg.scheme_id_uri !== '\\0';\n    var isValidV0Box = version === 0 && isDefined(emsg.presentation_time_delta) && hasScheme;\n    var isValidV1Box = version === 1 && isDefined(emsg.presentation_time) && hasScheme; // Only valid versions of emsg are 0 and 1\n\n    return !(version > 1) && isValidV0Box || isValidV1Box;\n  }; // Utility function to check if an object is defined\n\n\n  var isDefined = function (data) {\n    return data !== undefined || data !== null;\n  };\n\n  var emsg$1 = {\n    parseEmsgBox: parseEmsgBox,\n    scaleTime: scaleTime\n  };\n  var win;\n\n  if (typeof window !== \"undefined\") {\n    win = window;\n  } else if (typeof commonjsGlobal !== \"undefined\") {\n    win = commonjsGlobal;\n  } else if (typeof self !== \"undefined\") {\n    win = self;\n  } else {\n    win = {};\n  }\n\n  var window_1 = win;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Utilities to detect basic properties and metadata about MP4s.\n   */\n\n  var toUnsigned = bin.toUnsigned;\n  var toHexString = bin.toHexString;\n  var findBox$3 = findBox_1;\n  var parseType$1 = parseType_1;\n  var emsg = emsg$1;\n  var parseTfhd$1 = parseTfhd$2;\n  var parseTrun$1 = parseTrun$2;\n  var parseTfdt$2 = parseTfdt$3;\n  var getUint64 = numbers.getUint64;\n  var timescale, startTime, compositionStartTime, getVideoTrackIds, getTracks, getTimescaleFromMediaHeader$1, getEmsgID3;\n  var window$2 = window_1;\n  var parseId3Frames = parseId3.parseId3Frames;\n  /**\n   * Parses an MP4 initialization segment and extracts the timescale\n   * values for any declared tracks. Timescale values indicate the\n   * number of clock ticks per second to assume for time-based values\n   * elsewhere in the MP4.\n   *\n   * To determine the start time of an MP4, you need two pieces of\n   * information: the timescale unit and the earliest base media decode\n   * time. Multiple timescales can be specified within an MP4 but the\n   * base media decode time is always expressed in the timescale from\n   * the media header box for the track:\n   * ```\n   * moov > trak > mdia > mdhd.timescale\n   * ```\n   * @param init {Uint8Array} the bytes of the init segment\n   * @return {object} a hash of track ids to timescale values or null if\n   * the init segment is malformed.\n   */\n\n  timescale = function (init) {\n    var result = {},\n        traks = findBox$3(init, ['moov', 'trak']); // mdhd timescale\n\n    return traks.reduce(function (result, trak) {\n      var tkhd, version, index, id, mdhd;\n      tkhd = findBox$3(trak, ['tkhd'])[0];\n\n      if (!tkhd) {\n        return null;\n      }\n\n      version = tkhd[0];\n      index = version === 0 ? 12 : 20;\n      id = toUnsigned(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\n      mdhd = findBox$3(trak, ['mdia', 'mdhd'])[0];\n\n      if (!mdhd) {\n        return null;\n      }\n\n      version = mdhd[0];\n      index = version === 0 ? 12 : 20;\n      result[id] = toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n      return result;\n    }, result);\n  };\n  /**\n   * Determine the base media decode start time, in seconds, for an MP4\n   * fragment. If multiple fragments are specified, the earliest time is\n   * returned.\n   *\n   * The base media decode time can be parsed from track fragment\n   * metadata:\n   * ```\n   * moof > traf > tfdt.baseMediaDecodeTime\n   * ```\n   * It requires the timescale value from the mdhd to interpret.\n   *\n   * @param timescale {object} a hash of track ids to timescale values.\n   * @return {number} the earliest base media decode start time for the\n   * fragment, in seconds\n   */\n\n\n  startTime = function (timescale, fragment) {\n    var trafs; // we need info from two childrend of each track fragment box\n\n    trafs = findBox$3(fragment, ['moof', 'traf']); // determine the start times for each track\n\n    var lowestTime = trafs.reduce(function (acc, traf) {\n      var tfhd = findBox$3(traf, ['tfhd'])[0]; // get the track id from the tfhd\n\n      var id = toUnsigned(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]); // assume a 90kHz clock if no timescale was specified\n\n      var scale = timescale[id] || 90e3; // get the base media decode time from the tfdt\n\n      var tfdt = findBox$3(traf, ['tfdt'])[0];\n      var dv = new DataView(tfdt.buffer, tfdt.byteOffset, tfdt.byteLength);\n      var baseTime; // version 1 is 64 bit\n\n      if (tfdt[0] === 1) {\n        baseTime = getUint64(tfdt.subarray(4, 12));\n      } else {\n        baseTime = dv.getUint32(4);\n      } // convert base time to seconds if it is a valid number.\n\n\n      let seconds;\n\n      if (typeof baseTime === 'bigint') {\n        seconds = baseTime / window$2.BigInt(scale);\n      } else if (typeof baseTime === 'number' && !isNaN(baseTime)) {\n        seconds = baseTime / scale;\n      }\n\n      if (seconds < Number.MAX_SAFE_INTEGER) {\n        seconds = Number(seconds);\n      }\n\n      if (seconds < acc) {\n        acc = seconds;\n      }\n\n      return acc;\n    }, Infinity);\n    return typeof lowestTime === 'bigint' || isFinite(lowestTime) ? lowestTime : 0;\n  };\n  /**\n   * Determine the composition start, in seconds, for an MP4\n   * fragment.\n   *\n   * The composition start time of a fragment can be calculated using the base\n   * media decode time, composition time offset, and timescale, as follows:\n   *\n   * compositionStartTime = (baseMediaDecodeTime + compositionTimeOffset) / timescale\n   *\n   * All of the aforementioned information is contained within a media fragment's\n   * `traf` box, except for timescale info, which comes from the initialization\n   * segment, so a track id (also contained within a `traf`) is also necessary to\n   * associate it with a timescale\n   *\n   *\n   * @param timescales {object} - a hash of track ids to timescale values.\n   * @param fragment {Unit8Array} - the bytes of a media segment\n   * @return {number} the composition start time for the fragment, in seconds\n   **/\n\n\n  compositionStartTime = function (timescales, fragment) {\n    var trafBoxes = findBox$3(fragment, ['moof', 'traf']);\n    var baseMediaDecodeTime = 0;\n    var compositionTimeOffset = 0;\n    var trackId;\n\n    if (trafBoxes && trafBoxes.length) {\n      // The spec states that track run samples contained within a `traf` box are contiguous, but\n      // it does not explicitly state whether the `traf` boxes themselves are contiguous.\n      // We will assume that they are, so we only need the first to calculate start time.\n      var tfhd = findBox$3(trafBoxes[0], ['tfhd'])[0];\n      var trun = findBox$3(trafBoxes[0], ['trun'])[0];\n      var tfdt = findBox$3(trafBoxes[0], ['tfdt'])[0];\n\n      if (tfhd) {\n        var parsedTfhd = parseTfhd$1(tfhd);\n        trackId = parsedTfhd.trackId;\n      }\n\n      if (tfdt) {\n        var parsedTfdt = parseTfdt$2(tfdt);\n        baseMediaDecodeTime = parsedTfdt.baseMediaDecodeTime;\n      }\n\n      if (trun) {\n        var parsedTrun = parseTrun$1(trun);\n\n        if (parsedTrun.samples && parsedTrun.samples.length) {\n          compositionTimeOffset = parsedTrun.samples[0].compositionTimeOffset || 0;\n        }\n      }\n    } // Get timescale for this specific track. Assume a 90kHz clock if no timescale was\n    // specified.\n\n\n    var timescale = timescales[trackId] || 90e3; // return the composition start time, in seconds\n\n    if (typeof baseMediaDecodeTime === 'bigint') {\n      compositionTimeOffset = window$2.BigInt(compositionTimeOffset);\n      timescale = window$2.BigInt(timescale);\n    }\n\n    var result = (baseMediaDecodeTime + compositionTimeOffset) / timescale;\n\n    if (typeof result === 'bigint' && result < Number.MAX_SAFE_INTEGER) {\n      result = Number(result);\n    }\n\n    return result;\n  };\n  /**\n    * Find the trackIds of the video tracks in this source.\n    * Found by parsing the Handler Reference and Track Header Boxes:\n    *   moov > trak > mdia > hdlr\n    *   moov > trak > tkhd\n    *\n    * @param {Uint8Array} init - The bytes of the init segment for this source\n    * @return {Number[]} A list of trackIds\n    *\n    * @see ISO-BMFF-12/2015, Section 8.4.3\n   **/\n\n\n  getVideoTrackIds = function (init) {\n    var traks = findBox$3(init, ['moov', 'trak']);\n    var videoTrackIds = [];\n    traks.forEach(function (trak) {\n      var hdlrs = findBox$3(trak, ['mdia', 'hdlr']);\n      var tkhds = findBox$3(trak, ['tkhd']);\n      hdlrs.forEach(function (hdlr, index) {\n        var handlerType = parseType$1(hdlr.subarray(8, 12));\n        var tkhd = tkhds[index];\n        var view;\n        var version;\n        var trackId;\n\n        if (handlerType === 'vide') {\n          view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n          version = view.getUint8(0);\n          trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\n          videoTrackIds.push(trackId);\n        }\n      });\n    });\n    return videoTrackIds;\n  };\n\n  getTimescaleFromMediaHeader$1 = function (mdhd) {\n    // mdhd is a FullBox, meaning it will have its own version as the first byte\n    var version = mdhd[0];\n    var index = version === 0 ? 12 : 20;\n    return toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n  };\n  /**\n   * Get all the video, audio, and hint tracks from a non fragmented\n   * mp4 segment\n   */\n\n\n  getTracks = function (init) {\n    var traks = findBox$3(init, ['moov', 'trak']);\n    var tracks = [];\n    traks.forEach(function (trak) {\n      var track = {};\n      var tkhd = findBox$3(trak, ['tkhd'])[0];\n      var view, tkhdVersion; // id\n\n      if (tkhd) {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        tkhdVersion = view.getUint8(0);\n        track.id = tkhdVersion === 0 ? view.getUint32(12) : view.getUint32(20);\n      }\n\n      var hdlr = findBox$3(trak, ['mdia', 'hdlr'])[0]; // type\n\n      if (hdlr) {\n        var type = parseType$1(hdlr.subarray(8, 12));\n\n        if (type === 'vide') {\n          track.type = 'video';\n        } else if (type === 'soun') {\n          track.type = 'audio';\n        } else {\n          track.type = type;\n        }\n      } // codec\n\n\n      var stsd = findBox$3(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n\n      if (stsd) {\n        var sampleDescriptions = stsd.subarray(8); // gives the codec type string\n\n        track.codec = parseType$1(sampleDescriptions.subarray(4, 8));\n        var codecBox = findBox$3(sampleDescriptions, [track.codec])[0];\n        var codecConfig, codecConfigType;\n\n        if (codecBox) {\n          // https://tools.ietf.org/html/rfc6381#section-3.3\n          if (/^[asm]vc[1-9]$/i.test(track.codec)) {\n            // we don't need anything but the \"config\" parameter of the\n            // avc1 codecBox\n            codecConfig = codecBox.subarray(78);\n            codecConfigType = parseType$1(codecConfig.subarray(4, 8));\n\n            if (codecConfigType === 'avcC' && codecConfig.length > 11) {\n              track.codec += '.'; // left padded with zeroes for single digit hex\n              // profile idc\n\n              track.codec += toHexString(codecConfig[9]); // the byte containing the constraint_set flags\n\n              track.codec += toHexString(codecConfig[10]); // level idc\n\n              track.codec += toHexString(codecConfig[11]);\n            } else {\n              // TODO: show a warning that we couldn't parse the codec\n              // and are using the default\n              track.codec = 'avc1.4d400d';\n            }\n          } else if (/^mp4[a,v]$/i.test(track.codec)) {\n            // we do not need anything but the streamDescriptor of the mp4a codecBox\n            codecConfig = codecBox.subarray(28);\n            codecConfigType = parseType$1(codecConfig.subarray(4, 8));\n\n            if (codecConfigType === 'esds' && codecConfig.length > 20 && codecConfig[19] !== 0) {\n              track.codec += '.' + toHexString(codecConfig[19]); // this value is only a single digit\n\n              track.codec += '.' + toHexString(codecConfig[20] >>> 2 & 0x3f).replace(/^0/, '');\n            } else {\n              // TODO: show a warning that we couldn't parse the codec\n              // and are using the default\n              track.codec = 'mp4a.40.2';\n            }\n          } else {\n            // flac, opus, etc\n            track.codec = track.codec.toLowerCase();\n          }\n        }\n      }\n\n      var mdhd = findBox$3(trak, ['mdia', 'mdhd'])[0];\n\n      if (mdhd) {\n        track.timescale = getTimescaleFromMediaHeader$1(mdhd);\n      }\n\n      tracks.push(track);\n    });\n    return tracks;\n  };\n  /**\n   * Returns an array of emsg ID3 data from the provided segmentData.\n   * An offset can also be provided as the Latest Arrival Time to calculate \n   * the Event Start Time of v0 EMSG boxes. \n   * See: https://dashif-documents.azurewebsites.net/Events/master/event.html#Inband-event-timing\n   * \n   * @param {Uint8Array} segmentData the segment byte array.\n   * @param {number} offset the segment start time or Latest Arrival Time, \n   * @return {Object[]} an array of ID3 parsed from EMSG boxes\n   */\n\n\n  getEmsgID3 = function (segmentData, offset = 0) {\n    var emsgBoxes = findBox$3(segmentData, ['emsg']);\n    return emsgBoxes.map(data => {\n      var parsedBox = emsg.parseEmsgBox(new Uint8Array(data));\n      var parsedId3Frames = parseId3Frames(parsedBox.message_data);\n      return {\n        cueTime: emsg.scaleTime(parsedBox.presentation_time, parsedBox.timescale, parsedBox.presentation_time_delta, offset),\n        duration: emsg.scaleTime(parsedBox.event_duration, parsedBox.timescale),\n        frames: parsedId3Frames\n      };\n    });\n  };\n\n  var probe$2 = {\n    // export mp4 inspector's findBox and parseType for backwards compatibility\n    findBox: findBox$3,\n    parseType: parseType$1,\n    timescale: timescale,\n    startTime: startTime,\n    compositionStartTime: compositionStartTime,\n    videoTrackIds: getVideoTrackIds,\n    tracks: getTracks,\n    getTimescaleFromMediaHeader: getTimescaleFromMediaHeader$1,\n    getEmsgID3: getEmsgID3\n  };\n  const {\n    parseTrun\n  } = mp4Inspector;\n  const {\n    findBox: findBox$2\n  } = probe$2;\n  var window$1 = window_1;\n  /**\n   * Utility function for parsing data from mdat boxes.\n   * @param {Array<Uint8Array>} segment the segment data to create mdat/traf pairs from.\n   * @returns mdat and traf boxes paired up for easier parsing.\n   */\n\n  var getMdatTrafPairs$2 = function (segment) {\n    var trafs = findBox$2(segment, ['moof', 'traf']);\n    var mdats = findBox$2(segment, ['mdat']);\n    var mdatTrafPairs = []; // Pair up each traf with a mdat as moofs and mdats are in pairs\n\n    mdats.forEach(function (mdat, index) {\n      var matchingTraf = trafs[index];\n      mdatTrafPairs.push({\n        mdat: mdat,\n        traf: matchingTraf\n      });\n    });\n    return mdatTrafPairs;\n  };\n  /**\n    * Parses sample information out of Track Run Boxes and calculates\n    * the absolute presentation and decode timestamps of each sample.\n    *\n    * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n    * @param {Number|BigInt} baseMediaDecodeTime - base media decode time from tfdt\n        @see ISO-BMFF-12/2015, Section 8.8.12\n    * @param {Object} tfhd - The parsed Track Fragment Header\n    *   @see inspect.parseTfhd\n    * @return {Object[]} the parsed samples\n    *\n    * @see ISO-BMFF-12/2015, Section 8.8.8\n   **/\n\n\n  var parseSamples$2 = function (truns, baseMediaDecodeTime, tfhd) {\n    var currentDts = baseMediaDecodeTime;\n    var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n    var defaultSampleSize = tfhd.defaultSampleSize || 0;\n    var trackId = tfhd.trackId;\n    var allSamples = [];\n    truns.forEach(function (trun) {\n      // Note: We currently do not parse the sample table as well\n      // as the trun. It's possible some sources will require this.\n      // moov > trak > mdia > minf > stbl\n      var trackRun = parseTrun(trun);\n      var samples = trackRun.samples;\n      samples.forEach(function (sample) {\n        if (sample.duration === undefined) {\n          sample.duration = defaultSampleDuration;\n        }\n\n        if (sample.size === undefined) {\n          sample.size = defaultSampleSize;\n        }\n\n        sample.trackId = trackId;\n        sample.dts = currentDts;\n\n        if (sample.compositionTimeOffset === undefined) {\n          sample.compositionTimeOffset = 0;\n        }\n\n        if (typeof currentDts === 'bigint') {\n          sample.pts = currentDts + window$1.BigInt(sample.compositionTimeOffset);\n          currentDts += window$1.BigInt(sample.duration);\n        } else {\n          sample.pts = currentDts + sample.compositionTimeOffset;\n          currentDts += sample.duration;\n        }\n      });\n      allSamples = allSamples.concat(samples);\n    });\n    return allSamples;\n  };\n\n  var samples = {\n    getMdatTrafPairs: getMdatTrafPairs$2,\n    parseSamples: parseSamples$2\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Reads in-band CEA-708 captions out of FMP4 segments.\n   * @see https://en.wikipedia.org/wiki/CEA-708\n   */\n\n  var discardEmulationPreventionBytes = captionPacketParser.discardEmulationPreventionBytes;\n  var CaptionStream = captionStream.CaptionStream;\n  var findBox$1 = findBox_1;\n  var parseTfdt$1 = parseTfdt$3;\n  var parseTfhd = parseTfhd$2;\n  var {\n    getMdatTrafPairs: getMdatTrafPairs$1,\n    parseSamples: parseSamples$1\n  } = samples;\n  /**\n    * Maps an offset in the mdat to a sample based on the the size of the samples.\n    * Assumes that `parseSamples` has been called first.\n    *\n    * @param {Number} offset - The offset into the mdat\n    * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n    * @return {?Object} The matching sample, or null if no match was found.\n    *\n    * @see ISO-BMFF-12/2015, Section 8.8.8\n   **/\n\n  var mapToSample = function (offset, samples) {\n    var approximateOffset = offset;\n\n    for (var i = 0; i < samples.length; i++) {\n      var sample = samples[i];\n\n      if (approximateOffset < sample.size) {\n        return sample;\n      }\n\n      approximateOffset -= sample.size;\n    }\n\n    return null;\n  };\n  /**\n    * Finds SEI nal units contained in a Media Data Box.\n    * Assumes that `parseSamples` has been called first.\n    *\n    * @param {Uint8Array} avcStream - The bytes of the mdat\n    * @param {Object[]} samples - The samples parsed out by `parseSamples`\n    * @param {Number} trackId - The trackId of this video track\n    * @return {Object[]} seiNals - the parsed SEI NALUs found.\n    *   The contents of the seiNal should match what is expected by\n    *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n    *\n    * @see ISO-BMFF-12/2015, Section 8.1.1\n    * @see Rec. ITU-T H.264, 7.3.2.3.1\n   **/\n\n\n  var findSeiNals = function (avcStream, samples, trackId) {\n    var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n        result = {\n      logs: [],\n      seiNals: []\n    },\n        seiNal,\n        i,\n        length,\n        lastMatchedSample;\n\n    for (i = 0; i + 4 < avcStream.length; i += length) {\n      length = avcView.getUint32(i);\n      i += 4; // Bail if this doesn't appear to be an H264 stream\n\n      if (length <= 0) {\n        continue;\n      }\n\n      switch (avcStream[i] & 0x1F) {\n        case 0x06:\n          var data = avcStream.subarray(i + 1, i + 1 + length);\n          var matchingSample = mapToSample(i, samples);\n          seiNal = {\n            nalUnitType: 'sei_rbsp',\n            size: length,\n            data: data,\n            escapedRBSP: discardEmulationPreventionBytes(data),\n            trackId: trackId\n          };\n\n          if (matchingSample) {\n            seiNal.pts = matchingSample.pts;\n            seiNal.dts = matchingSample.dts;\n            lastMatchedSample = matchingSample;\n          } else if (lastMatchedSample) {\n            // If a matching sample cannot be found, use the last\n            // sample's values as they should be as close as possible\n            seiNal.pts = lastMatchedSample.pts;\n            seiNal.dts = lastMatchedSample.dts;\n          } else {\n            result.logs.push({\n              level: 'warn',\n              message: 'We\\'ve encountered a nal unit without data at ' + i + ' for trackId ' + trackId + '. See mux.js#223.'\n            });\n            break;\n          }\n\n          result.seiNals.push(seiNal);\n          break;\n      }\n    }\n\n    return result;\n  };\n  /**\n    * Parses out caption nals from an FMP4 segment's video tracks.\n    *\n    * @param {Uint8Array} segment - The bytes of a single segment\n    * @param {Number} videoTrackId - The trackId of a video track in the segment\n    * @return {Object.<Number, Object[]>} A mapping of video trackId to\n    *   a list of seiNals found in that track\n   **/\n\n\n  var parseCaptionNals = function (segment, videoTrackId) {\n    var captionNals = {};\n    var mdatTrafPairs = getMdatTrafPairs$1(segment);\n    mdatTrafPairs.forEach(function (pair) {\n      var mdat = pair.mdat;\n      var traf = pair.traf;\n      var tfhd = findBox$1(traf, ['tfhd']); // Exactly 1 tfhd per traf\n\n      var headerInfo = parseTfhd(tfhd[0]);\n      var trackId = headerInfo.trackId;\n      var tfdt = findBox$1(traf, ['tfdt']); // Either 0 or 1 tfdt per traf\n\n      var baseMediaDecodeTime = tfdt.length > 0 ? parseTfdt$1(tfdt[0]).baseMediaDecodeTime : 0;\n      var truns = findBox$1(traf, ['trun']);\n      var samples;\n      var result; // Only parse video data for the chosen video track\n\n      if (videoTrackId === trackId && truns.length > 0) {\n        samples = parseSamples$1(truns, baseMediaDecodeTime, headerInfo);\n        result = findSeiNals(mdat, samples, trackId);\n\n        if (!captionNals[trackId]) {\n          captionNals[trackId] = {\n            seiNals: [],\n            logs: []\n          };\n        }\n\n        captionNals[trackId].seiNals = captionNals[trackId].seiNals.concat(result.seiNals);\n        captionNals[trackId].logs = captionNals[trackId].logs.concat(result.logs);\n      }\n    });\n    return captionNals;\n  };\n  /**\n    * Parses out inband captions from an MP4 container and returns\n    * caption objects that can be used by WebVTT and the TextTrack API.\n    * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n    * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n    * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n    *\n    * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n    * @param {Number} trackId - The id of the video track to parse\n    * @param {Number} timescale - The timescale for the video track from the init segment\n    *\n    * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n    * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n    * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n    * @return {Object[]} parsedCaptions[].content - A list of individual caption segments\n    * @return {String} parsedCaptions[].content.text - The visible content of the caption segment\n    * @return {Number} parsedCaptions[].content.line - The line height from 1-15 for positioning of the caption segment\n    * @return {Number} parsedCaptions[].content.position - The column indent percentage for cue positioning from 10-80\n   **/\n\n\n  var parseEmbeddedCaptions = function (segment, trackId, timescale) {\n    var captionNals; // the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there\n\n    if (trackId === null) {\n      return null;\n    }\n\n    captionNals = parseCaptionNals(segment, trackId);\n    var trackNals = captionNals[trackId] || {};\n    return {\n      seiNals: trackNals.seiNals,\n      logs: trackNals.logs,\n      timescale: timescale\n    };\n  };\n  /**\n    * Converts SEI NALUs into captions that can be used by video.js\n   **/\n\n\n  var CaptionParser = function () {\n    var isInitialized = false;\n    var captionStream; // Stores segments seen before trackId and timescale are set\n\n    var segmentCache; // Stores video track ID of the track being parsed\n\n    var trackId; // Stores the timescale of the track being parsed\n\n    var timescale; // Stores captions parsed so far\n\n    var parsedCaptions; // Stores whether we are receiving partial data or not\n\n    var parsingPartial;\n    /**\n      * A method to indicate whether a CaptionParser has been initalized\n      * @returns {Boolean}\n     **/\n\n    this.isInitialized = function () {\n      return isInitialized;\n    };\n    /**\n      * Initializes the underlying CaptionStream, SEI NAL parsing\n      * and management, and caption collection\n     **/\n\n\n    this.init = function (options) {\n      captionStream = new CaptionStream();\n      isInitialized = true;\n      parsingPartial = options ? options.isPartial : false; // Collect dispatched captions\n\n      captionStream.on('data', function (event) {\n        // Convert to seconds in the source's timescale\n        event.startTime = event.startPts / timescale;\n        event.endTime = event.endPts / timescale;\n        parsedCaptions.captions.push(event);\n        parsedCaptions.captionStreams[event.stream] = true;\n      });\n      captionStream.on('log', function (log) {\n        parsedCaptions.logs.push(log);\n      });\n    };\n    /**\n      * Determines if a new video track will be selected\n      * or if the timescale changed\n      * @return {Boolean}\n     **/\n\n\n    this.isNewInit = function (videoTrackIds, timescales) {\n      if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === 'object' && Object.keys(timescales).length === 0) {\n        return false;\n      }\n\n      return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];\n    };\n    /**\n      * Parses out SEI captions and interacts with underlying\n      * CaptionStream to return dispatched captions\n      *\n      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n      * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n      * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n      * @see parseEmbeddedCaptions\n      * @see m2ts/caption-stream.js\n     **/\n\n\n    this.parse = function (segment, videoTrackIds, timescales) {\n      var parsedData;\n\n      if (!this.isInitialized()) {\n        return null; // This is not likely to be a video segment\n      } else if (!videoTrackIds || !timescales) {\n        return null;\n      } else if (this.isNewInit(videoTrackIds, timescales)) {\n        // Use the first video track only as there is no\n        // mechanism to switch to other video tracks\n        trackId = videoTrackIds[0];\n        timescale = timescales[trackId]; // If an init segment has not been seen yet, hold onto segment\n        // data until we have one.\n        // the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there\n      } else if (trackId === null || !timescale) {\n        segmentCache.push(segment);\n        return null;\n      } // Now that a timescale and trackId is set, parse cached segments\n\n\n      while (segmentCache.length > 0) {\n        var cachedSegment = segmentCache.shift();\n        this.parse(cachedSegment, videoTrackIds, timescales);\n      }\n\n      parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n\n      if (parsedData && parsedData.logs) {\n        parsedCaptions.logs = parsedCaptions.logs.concat(parsedData.logs);\n      }\n\n      if (parsedData === null || !parsedData.seiNals) {\n        if (parsedCaptions.logs.length) {\n          return {\n            logs: parsedCaptions.logs,\n            captions: [],\n            captionStreams: []\n          };\n        }\n\n        return null;\n      }\n\n      this.pushNals(parsedData.seiNals); // Force the parsed captions to be dispatched\n\n      this.flushStream();\n      return parsedCaptions;\n    };\n    /**\n      * Pushes SEI NALUs onto CaptionStream\n      * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n      * Assumes that `parseCaptionNals` has been called first\n      * @see m2ts/caption-stream.js\n      **/\n\n\n    this.pushNals = function (nals) {\n      if (!this.isInitialized() || !nals || nals.length === 0) {\n        return null;\n      }\n\n      nals.forEach(function (nal) {\n        captionStream.push(nal);\n      });\n    };\n    /**\n      * Flushes underlying CaptionStream to dispatch processed, displayable captions\n      * @see m2ts/caption-stream.js\n     **/\n\n\n    this.flushStream = function () {\n      if (!this.isInitialized()) {\n        return null;\n      }\n\n      if (!parsingPartial) {\n        captionStream.flush();\n      } else {\n        captionStream.partialFlush();\n      }\n    };\n    /**\n      * Reset caption buckets for new data\n     **/\n\n\n    this.clearParsedCaptions = function () {\n      parsedCaptions.captions = [];\n      parsedCaptions.captionStreams = {};\n      parsedCaptions.logs = [];\n    };\n    /**\n      * Resets underlying CaptionStream\n      * @see m2ts/caption-stream.js\n     **/\n\n\n    this.resetCaptionStream = function () {\n      if (!this.isInitialized()) {\n        return null;\n      }\n\n      captionStream.reset();\n    };\n    /**\n      * Convenience method to clear all captions flushed from the\n      * CaptionStream and still being parsed\n      * @see m2ts/caption-stream.js\n     **/\n\n\n    this.clearAllCaptions = function () {\n      this.clearParsedCaptions();\n      this.resetCaptionStream();\n    };\n    /**\n      * Reset caption parser\n     **/\n\n\n    this.reset = function () {\n      segmentCache = [];\n      trackId = null;\n      timescale = null;\n\n      if (!parsedCaptions) {\n        parsedCaptions = {\n          captions: [],\n          // CC1, CC2, CC3, CC4\n          captionStreams: {},\n          logs: []\n        };\n      } else {\n        this.clearParsedCaptions();\n      }\n\n      this.resetCaptionStream();\n    };\n\n    this.reset();\n  };\n\n  var captionParser = CaptionParser;\n  const {\n    parseTfdt\n  } = mp4Inspector;\n  const findBox = findBox_1;\n  const {\n    getTimescaleFromMediaHeader\n  } = probe$2;\n  const {\n    parseSamples,\n    getMdatTrafPairs\n  } = samples;\n  /**\n   * Module for parsing WebVTT text and styles from FMP4 segments.\n   * Based on the ISO/IEC 14496-30.\n   */\n\n  const WebVttParser = function () {\n    // default timescale to 90k\n    let timescale = 90e3;\n    /**\n     * Parses the timescale from the init segment.\n     * @param {Array<Uint8Array>} segment The initialization segment to parse the timescale from.\n     */\n\n    this.init = function (segment) {\n      // We just need the timescale from the init segment.\n      const mdhd = findBox(segment, ['moov', 'trak', 'mdia', 'mdhd'])[0];\n\n      if (mdhd) {\n        timescale = getTimescaleFromMediaHeader(mdhd);\n      }\n    };\n    /**\n     * Parses a WebVTT FMP4 segment.\n     * @param {Array<Uint8Array>} segment The content segment to parse the WebVTT cues from.\n     * @returns The WebVTT cue text, styling, and timing info as an array of cue objects.\n     */\n\n\n    this.parseSegment = function (segment) {\n      const vttCues = [];\n      const mdatTrafPairs = getMdatTrafPairs(segment);\n      let baseMediaDecodeTime = 0;\n      mdatTrafPairs.forEach(function (pair) {\n        const mdatBox = pair.mdat;\n        const trafBox = pair.traf; // zero or one.\n\n        const tfdtBox = findBox(trafBox, ['tfdt'])[0]; // zero or one.\n\n        const tfhdBox = findBox(trafBox, ['tfhd'])[0]; // zero or more.\n\n        const trunBoxes = findBox(trafBox, ['trun']);\n\n        if (tfdtBox) {\n          const tfdt = parseTfdt(tfdtBox);\n          baseMediaDecodeTime = tfdt.baseMediaDecodeTime;\n        }\n\n        if (trunBoxes.length && tfhdBox) {\n          const samples = parseSamples(trunBoxes, baseMediaDecodeTime, tfhdBox);\n          let mdatOffset = 0;\n          samples.forEach(function (sample) {\n            // decode utf8 payload\n            const UTF_8 = 'utf-8';\n            const textDecoder = new TextDecoder(UTF_8); // extract sample data from the mdat box.\n            // WebVTT Sample format:\n            // Exactly one VTTEmptyCueBox box\n            // OR one or more VTTCueBox boxes.\n\n            const sampleData = mdatBox.slice(mdatOffset, mdatOffset + sample.size); // single vtte box.\n\n            const vtteBox = findBox(sampleData, ['vtte'])[0]; // empty box\n\n            if (vtteBox) {\n              mdatOffset += sample.size;\n              return;\n            } // TODO: Support 'vtta' boxes.\n            // VTTAdditionalTextBoxes can be interleaved between VTTCueBoxes.\n\n\n            const vttcBoxes = findBox(sampleData, ['vttc']);\n            vttcBoxes.forEach(function (vttcBox) {\n              // mandatory payload box.\n              const paylBox = findBox(vttcBox, ['payl'])[0]; // optional settings box\n\n              const sttgBox = findBox(vttcBox, ['sttg'])[0];\n              const start = sample.pts / timescale;\n              const end = (sample.pts + sample.duration) / timescale;\n              let cueText, settings; // contains cue text.\n\n              if (paylBox) {\n                try {\n                  cueText = textDecoder.decode(paylBox);\n                } catch (e) {\n                  console.error(e);\n                }\n              } // settings box contains styling.\n\n\n              if (sttgBox) {\n                try {\n                  settings = textDecoder.decode(sttgBox);\n                } catch (e) {\n                  console.error(e);\n                }\n              }\n\n              if (sample.duration && cueText) {\n                vttCues.push({\n                  cueText,\n                  start,\n                  end,\n                  settings\n                });\n              }\n            });\n            mdatOffset += sample.size;\n          });\n        }\n      });\n      return vttCues;\n    };\n  };\n\n  var webvttParser = WebVttParser;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Utilities to detect basic properties and metadata about TS Segments.\n   */\n\n  var StreamTypes$1 = streamTypes;\n\n  var parsePid = function (packet) {\n    var pid = packet[1] & 0x1f;\n    pid <<= 8;\n    pid |= packet[2];\n    return pid;\n  };\n\n  var parsePayloadUnitStartIndicator = function (packet) {\n    return !!(packet[1] & 0x40);\n  };\n\n  var parseAdaptionField = function (packet) {\n    var offset = 0; // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n\n    if ((packet[3] & 0x30) >>> 4 > 0x01) {\n      offset += packet[4] + 1;\n    }\n\n    return offset;\n  };\n\n  var parseType = function (packet, pmtPid) {\n    var pid = parsePid(packet);\n\n    if (pid === 0) {\n      return 'pat';\n    } else if (pid === pmtPid) {\n      return 'pmt';\n    } else if (pmtPid) {\n      return 'pes';\n    }\n\n    return null;\n  };\n\n  var parsePat = function (packet) {\n    var pusi = parsePayloadUnitStartIndicator(packet);\n    var offset = 4 + parseAdaptionField(packet);\n\n    if (pusi) {\n      offset += packet[offset] + 1;\n    }\n\n    return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n  };\n\n  var parsePmt = function (packet) {\n    var programMapTable = {};\n    var pusi = parsePayloadUnitStartIndicator(packet);\n    var payloadOffset = 4 + parseAdaptionField(packet);\n\n    if (pusi) {\n      payloadOffset += packet[payloadOffset] + 1;\n    } // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n\n\n    if (!(packet[payloadOffset + 5] & 0x01)) {\n      return;\n    }\n\n    var sectionLength, tableEnd, programInfoLength; // the mapping table ends at the end of the current section\n\n    sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n    tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n\n    programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11]; // advance the offset to the first entry in the mapping table\n\n    var offset = 12 + programInfoLength;\n\n    while (offset < tableEnd) {\n      var i = payloadOffset + offset; // add an entry that maps the elementary_pid to the stream_type\n\n      programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i]; // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n\n      offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n    }\n\n    return programMapTable;\n  };\n\n  var parsePesType = function (packet, programMapTable) {\n    var pid = parsePid(packet);\n    var type = programMapTable[pid];\n\n    switch (type) {\n      case StreamTypes$1.H264_STREAM_TYPE:\n        return 'video';\n\n      case StreamTypes$1.ADTS_STREAM_TYPE:\n        return 'audio';\n\n      case StreamTypes$1.METADATA_STREAM_TYPE:\n        return 'timed-metadata';\n\n      default:\n        return null;\n    }\n  };\n\n  var parsePesTime = function (packet) {\n    var pusi = parsePayloadUnitStartIndicator(packet);\n\n    if (!pusi) {\n      return null;\n    }\n\n    var offset = 4 + parseAdaptionField(packet);\n\n    if (offset >= packet.byteLength) {\n      // From the H 222.0 MPEG-TS spec\n      // \"For transport stream packets carrying PES packets, stuffing is needed when there\n      //  is insufficient PES packet data to completely fill the transport stream packet\n      //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n      //  the sum of the lengths of the data elements in it, so that the payload bytes\n      //  remaining after the adaptation field exactly accommodates the available PES packet\n      //  data.\"\n      //\n      // If the offset is >= the length of the packet, then the packet contains no data\n      // and instead is just adaption field stuffing bytes\n      return null;\n    }\n\n    var pes = null;\n    var ptsDtsFlags; // PES packets may be annotated with a PTS value, or a PTS value\n    // and a DTS value. Determine what combination of values is\n    // available to work with.\n\n    ptsDtsFlags = packet[offset + 7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\n    // performs all bitwise operations on 32-bit integers but javascript\n    // supports a much greater range (52-bits) of integer using standard\n    // mathematical operations.\n    // We construct a 31-bit value using bitwise operators over the 31\n    // most significant bits and then multiply by 4 (equal to a left-shift\n    // of 2) before we add the final 2 least significant bits of the\n    // timestamp (equal to an OR.)\n\n    if (ptsDtsFlags & 0xC0) {\n      pes = {}; // the PTS and DTS are not written out directly. For information\n      // on how they are encoded, see\n      // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n\n      pes.pts = (packet[offset + 9] & 0x0E) << 27 | (packet[offset + 10] & 0xFF) << 20 | (packet[offset + 11] & 0xFE) << 12 | (packet[offset + 12] & 0xFF) << 5 | (packet[offset + 13] & 0xFE) >>> 3;\n      pes.pts *= 4; // Left shift by 2\n\n      pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n\n      pes.dts = pes.pts;\n\n      if (ptsDtsFlags & 0x40) {\n        pes.dts = (packet[offset + 14] & 0x0E) << 27 | (packet[offset + 15] & 0xFF) << 20 | (packet[offset + 16] & 0xFE) << 12 | (packet[offset + 17] & 0xFF) << 5 | (packet[offset + 18] & 0xFE) >>> 3;\n        pes.dts *= 4; // Left shift by 2\n\n        pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n      }\n    }\n\n    return pes;\n  };\n\n  var parseNalUnitType = function (type) {\n    switch (type) {\n      case 0x05:\n        return 'slice_layer_without_partitioning_rbsp_idr';\n\n      case 0x06:\n        return 'sei_rbsp';\n\n      case 0x07:\n        return 'seq_parameter_set_rbsp';\n\n      case 0x08:\n        return 'pic_parameter_set_rbsp';\n\n      case 0x09:\n        return 'access_unit_delimiter_rbsp';\n\n      default:\n        return null;\n    }\n  };\n\n  var videoPacketContainsKeyFrame = function (packet) {\n    var offset = 4 + parseAdaptionField(packet);\n    var frameBuffer = packet.subarray(offset);\n    var frameI = 0;\n    var frameSyncPoint = 0;\n    var foundKeyFrame = false;\n    var nalType; // advance the sync point to a NAL start, if necessary\n\n    for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n      if (frameBuffer[frameSyncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        frameI = frameSyncPoint + 5;\n        break;\n      }\n    }\n\n    while (frameI < frameBuffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (frameBuffer[frameI]) {\n        case 0:\n          // skip past non-sync sequences\n          if (frameBuffer[frameI - 1] !== 0) {\n            frameI += 2;\n            break;\n          } else if (frameBuffer[frameI - 2] !== 0) {\n            frameI++;\n            break;\n          }\n\n          if (frameSyncPoint + 3 !== frameI - 2) {\n            nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n\n            if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n              foundKeyFrame = true;\n            }\n          } // drop trailing zeroes\n\n\n          do {\n            frameI++;\n          } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n\n          frameSyncPoint = frameI - 2;\n          frameI += 3;\n          break;\n\n        case 1:\n          // skip past non-sync sequences\n          if (frameBuffer[frameI - 1] !== 0 || frameBuffer[frameI - 2] !== 0) {\n            frameI += 3;\n            break;\n          }\n\n          nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n\n          if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n            foundKeyFrame = true;\n          }\n\n          frameSyncPoint = frameI - 2;\n          frameI += 3;\n          break;\n\n        default:\n          // the current byte isn't a one or zero, so it cannot be part\n          // of a sync sequence\n          frameI += 3;\n          break;\n      }\n    }\n\n    frameBuffer = frameBuffer.subarray(frameSyncPoint);\n    frameI -= frameSyncPoint;\n    frameSyncPoint = 0; // parse the final nal\n\n    if (frameBuffer && frameBuffer.byteLength > 3) {\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n    }\n\n    return foundKeyFrame;\n  };\n\n  var probe$1 = {\n    parseType: parseType,\n    parsePat: parsePat,\n    parsePmt: parsePmt,\n    parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n    parsePesType: parsePesType,\n    parsePesTime: parsePesTime,\n    videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Parse mpeg2 transport stream packets to extract basic timing information\n   */\n\n  var StreamTypes = streamTypes;\n  var handleRollover = timestampRolloverStream.handleRollover;\n  var probe = {};\n  probe.ts = probe$1;\n  probe.aac = utils;\n  var ONE_SECOND_IN_TS = clock$2.ONE_SECOND_IN_TS;\n  var MP2T_PACKET_LENGTH = 188,\n      // bytes\n  SYNC_BYTE = 0x47;\n  /**\n   * walks through segment data looking for pat and pmt packets to parse out\n   * program map table information\n   */\n\n  var parsePsi_ = function (bytes, pmt) {\n    var startIndex = 0,\n        endIndex = MP2T_PACKET_LENGTH,\n        packet,\n        type;\n\n    while (endIndex < bytes.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n\n        switch (type) {\n          case 'pat':\n            pmt.pid = probe.ts.parsePat(packet);\n            break;\n\n          case 'pmt':\n            var table = probe.ts.parsePmt(packet);\n            pmt.table = pmt.table || {};\n            Object.keys(table).forEach(function (key) {\n              pmt.table[key] = table[key];\n            });\n            break;\n        }\n\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n\n      startIndex++;\n      endIndex++;\n    }\n  };\n  /**\n   * walks through the segment data from the start and end to get timing information\n   * for the first and last audio pes packets\n   */\n\n\n  var parseAudioPes_ = function (bytes, pmt, result) {\n    var startIndex = 0,\n        endIndex = MP2T_PACKET_LENGTH,\n        packet,\n        type,\n        pesType,\n        pusi,\n        parsed;\n    var endLoop = false; // Start walking from start of segment to get first audio packet\n\n    while (endIndex <= bytes.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n\n            if (pesType === 'audio' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n\n              if (parsed) {\n                parsed.type = 'audio';\n                result.audio.push(parsed);\n                endLoop = true;\n              }\n            }\n\n            break;\n        }\n\n        if (endLoop) {\n          break;\n        }\n\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n\n      startIndex++;\n      endIndex++;\n    } // Start walking from end of segment to get last audio packet\n\n\n    endIndex = bytes.byteLength;\n    startIndex = endIndex - MP2T_PACKET_LENGTH;\n    endLoop = false;\n\n    while (startIndex >= 0) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n\n            if (pesType === 'audio' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n\n              if (parsed) {\n                parsed.type = 'audio';\n                result.audio.push(parsed);\n                endLoop = true;\n              }\n            }\n\n            break;\n        }\n\n        if (endLoop) {\n          break;\n        }\n\n        startIndex -= MP2T_PACKET_LENGTH;\n        endIndex -= MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n\n      startIndex--;\n      endIndex--;\n    }\n  };\n  /**\n   * walks through the segment data from the start and end to get timing information\n   * for the first and last video pes packets as well as timing information for the first\n   * key frame.\n   */\n\n\n  var parseVideoPes_ = function (bytes, pmt, result) {\n    var startIndex = 0,\n        endIndex = MP2T_PACKET_LENGTH,\n        packet,\n        type,\n        pesType,\n        pusi,\n        parsed,\n        frame,\n        i,\n        pes;\n    var endLoop = false;\n    var currentFrame = {\n      data: [],\n      size: 0\n    }; // Start walking from start of segment to get first video packet\n\n    while (endIndex < bytes.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n\n            if (pesType === 'video') {\n              if (pusi && !endLoop) {\n                parsed = probe.ts.parsePesTime(packet);\n\n                if (parsed) {\n                  parsed.type = 'video';\n                  result.video.push(parsed);\n                  endLoop = true;\n                }\n              }\n\n              if (!result.firstKeyFrame) {\n                if (pusi) {\n                  if (currentFrame.size !== 0) {\n                    frame = new Uint8Array(currentFrame.size);\n                    i = 0;\n\n                    while (currentFrame.data.length) {\n                      pes = currentFrame.data.shift();\n                      frame.set(pes, i);\n                      i += pes.byteLength;\n                    }\n\n                    if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                      var firstKeyFrame = probe.ts.parsePesTime(frame); // PTS/DTS may not be available. Simply *not* setting\n                      // the keyframe seems to work fine with HLS playback\n                      // and definitely preferable to a crash with TypeError...\n\n                      if (firstKeyFrame) {\n                        result.firstKeyFrame = firstKeyFrame;\n                        result.firstKeyFrame.type = 'video';\n                      } else {\n                        // eslint-disable-next-line\n                        console.warn('Failed to extract PTS/DTS from PES at first keyframe. ' + 'This could be an unusual TS segment, or else mux.js did not ' + 'parse your TS segment correctly. If you know your TS ' + 'segments do contain PTS/DTS on keyframes please file a bug ' + 'report! You can try ffprobe to double check for yourself.');\n                      }\n                    }\n\n                    currentFrame.size = 0;\n                  }\n                }\n\n                currentFrame.data.push(packet);\n                currentFrame.size += packet.byteLength;\n              }\n            }\n\n            break;\n        }\n\n        if (endLoop && result.firstKeyFrame) {\n          break;\n        }\n\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n\n      startIndex++;\n      endIndex++;\n    } // Start walking from end of segment to get last video packet\n\n\n    endIndex = bytes.byteLength;\n    startIndex = endIndex - MP2T_PACKET_LENGTH;\n    endLoop = false;\n\n    while (startIndex >= 0) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n\n            if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n\n            break;\n        }\n\n        if (endLoop) {\n          break;\n        }\n\n        startIndex -= MP2T_PACKET_LENGTH;\n        endIndex -= MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n\n      startIndex--;\n      endIndex--;\n    }\n  };\n  /**\n   * Adjusts the timestamp information for the segment to account for\n   * rollover and convert to seconds based on pes packet timescale (90khz clock)\n   */\n\n\n  var adjustTimestamp_ = function (segmentInfo, baseTimestamp) {\n    if (segmentInfo.audio && segmentInfo.audio.length) {\n      var audioBaseTimestamp = baseTimestamp;\n\n      if (typeof audioBaseTimestamp === 'undefined' || isNaN(audioBaseTimestamp)) {\n        audioBaseTimestamp = segmentInfo.audio[0].dts;\n      }\n\n      segmentInfo.audio.forEach(function (info) {\n        info.dts = handleRollover(info.dts, audioBaseTimestamp);\n        info.pts = handleRollover(info.pts, audioBaseTimestamp); // time in seconds\n\n        info.dtsTime = info.dts / ONE_SECOND_IN_TS;\n        info.ptsTime = info.pts / ONE_SECOND_IN_TS;\n      });\n    }\n\n    if (segmentInfo.video && segmentInfo.video.length) {\n      var videoBaseTimestamp = baseTimestamp;\n\n      if (typeof videoBaseTimestamp === 'undefined' || isNaN(videoBaseTimestamp)) {\n        videoBaseTimestamp = segmentInfo.video[0].dts;\n      }\n\n      segmentInfo.video.forEach(function (info) {\n        info.dts = handleRollover(info.dts, videoBaseTimestamp);\n        info.pts = handleRollover(info.pts, videoBaseTimestamp); // time in seconds\n\n        info.dtsTime = info.dts / ONE_SECOND_IN_TS;\n        info.ptsTime = info.pts / ONE_SECOND_IN_TS;\n      });\n\n      if (segmentInfo.firstKeyFrame) {\n        var frame = segmentInfo.firstKeyFrame;\n        frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n        frame.pts = handleRollover(frame.pts, videoBaseTimestamp); // time in seconds\n\n        frame.dtsTime = frame.dts / ONE_SECOND_IN_TS;\n        frame.ptsTime = frame.pts / ONE_SECOND_IN_TS;\n      }\n    }\n  };\n  /**\n   * inspects the aac data stream for start and end time information\n   */\n\n\n  var inspectAac_ = function (bytes) {\n    var endLoop = false,\n        audioCount = 0,\n        sampleRate = null,\n        timestamp = null,\n        frameSize = 0,\n        byteIndex = 0,\n        packet;\n\n    while (bytes.length - byteIndex >= 3) {\n      var type = probe.aac.parseType(bytes, byteIndex);\n\n      switch (type) {\n        case 'timed-metadata':\n          // Exit early because we don't have enough to parse\n          // the ID3 tag header\n          if (bytes.length - byteIndex < 10) {\n            endLoop = true;\n            break;\n          }\n\n          frameSize = probe.aac.parseId3TagSize(bytes, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n\n          if (frameSize > bytes.length) {\n            endLoop = true;\n            break;\n          }\n\n          if (timestamp === null) {\n            packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n            timestamp = probe.aac.parseAacTimestamp(packet);\n          }\n\n          byteIndex += frameSize;\n          break;\n\n        case 'audio':\n          // Exit early because we don't have enough to parse\n          // the ADTS frame header\n          if (bytes.length - byteIndex < 7) {\n            endLoop = true;\n            break;\n          }\n\n          frameSize = probe.aac.parseAdtsSize(bytes, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n\n          if (frameSize > bytes.length) {\n            endLoop = true;\n            break;\n          }\n\n          if (sampleRate === null) {\n            packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n            sampleRate = probe.aac.parseSampleRate(packet);\n          }\n\n          audioCount++;\n          byteIndex += frameSize;\n          break;\n\n        default:\n          byteIndex++;\n          break;\n      }\n\n      if (endLoop) {\n        return null;\n      }\n    }\n\n    if (sampleRate === null || timestamp === null) {\n      return null;\n    }\n\n    var audioTimescale = ONE_SECOND_IN_TS / sampleRate;\n    var result = {\n      audio: [{\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      }, {\n        type: 'audio',\n        dts: timestamp + audioCount * 1024 * audioTimescale,\n        pts: timestamp + audioCount * 1024 * audioTimescale\n      }]\n    };\n    return result;\n  };\n  /**\n   * inspects the transport stream segment data for start and end time information\n   * of the audio and video tracks (when present) as well as the first key frame's\n   * start time.\n   */\n\n\n  var inspectTs_ = function (bytes) {\n    var pmt = {\n      pid: null,\n      table: null\n    };\n    var result = {};\n    parsePsi_(bytes, pmt);\n\n    for (var pid in pmt.table) {\n      if (pmt.table.hasOwnProperty(pid)) {\n        var type = pmt.table[pid];\n\n        switch (type) {\n          case StreamTypes.H264_STREAM_TYPE:\n            result.video = [];\n            parseVideoPes_(bytes, pmt, result);\n\n            if (result.video.length === 0) {\n              delete result.video;\n            }\n\n            break;\n\n          case StreamTypes.ADTS_STREAM_TYPE:\n            result.audio = [];\n            parseAudioPes_(bytes, pmt, result);\n\n            if (result.audio.length === 0) {\n              delete result.audio;\n            }\n\n            break;\n        }\n      }\n    }\n\n    return result;\n  };\n  /**\n   * Inspects segment byte data and returns an object with start and end timing information\n   *\n   * @param {Uint8Array} bytes The segment byte data\n   * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n   *  timestamps for rollover. This value must be in 90khz clock.\n   * @return {Object} Object containing start and end frame timing info of segment.\n   */\n\n\n  var inspect = function (bytes, baseTimestamp) {\n    var isAacData = probe.aac.isLikelyAacData(bytes);\n    var result;\n\n    if (isAacData) {\n      result = inspectAac_(bytes);\n    } else {\n      result = inspectTs_(bytes);\n    }\n\n    if (!result || !result.audio && !result.video) {\n      return null;\n    }\n\n    adjustTimestamp_(result, baseTimestamp);\n    return result;\n  };\n\n  var tsInspector = {\n    inspect: inspect,\n    parseAudioPes_: parseAudioPes_\n  };\n  /* global self */\n\n  /**\n   * Re-emits transmuxer events by converting them into messages to the\n   * world outside the worker.\n   *\n   * @param {Object} transmuxer the transmuxer to wire events on\n   * @private\n   */\n\n  const wireTransmuxerEvents = function (self, transmuxer) {\n    transmuxer.on('data', function (segment) {\n      // transfer ownership of the underlying ArrayBuffer\n      // instead of doing a copy to save memory\n      // ArrayBuffers are transferable but generic TypedArrays are not\n      // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n      const initArray = segment.initSegment;\n      segment.initSegment = {\n        data: initArray.buffer,\n        byteOffset: initArray.byteOffset,\n        byteLength: initArray.byteLength\n      };\n      const typedArray = segment.data;\n      segment.data = typedArray.buffer;\n      self.postMessage({\n        action: 'data',\n        segment,\n        byteOffset: typedArray.byteOffset,\n        byteLength: typedArray.byteLength\n      }, [segment.data]);\n    });\n    transmuxer.on('done', function (data) {\n      self.postMessage({\n        action: 'done'\n      });\n    });\n    transmuxer.on('gopInfo', function (gopInfo) {\n      self.postMessage({\n        action: 'gopInfo',\n        gopInfo\n      });\n    });\n    transmuxer.on('videoSegmentTimingInfo', function (timingInfo) {\n      const videoSegmentTimingInfo = {\n        start: {\n          decode: clock$2.videoTsToSeconds(timingInfo.start.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.start.pts)\n        },\n        end: {\n          decode: clock$2.videoTsToSeconds(timingInfo.end.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.end.pts)\n        },\n        baseMediaDecodeTime: clock$2.videoTsToSeconds(timingInfo.baseMediaDecodeTime)\n      };\n\n      if (timingInfo.prependedContentDuration) {\n        videoSegmentTimingInfo.prependedContentDuration = clock$2.videoTsToSeconds(timingInfo.prependedContentDuration);\n      }\n\n      self.postMessage({\n        action: 'videoSegmentTimingInfo',\n        videoSegmentTimingInfo\n      });\n    });\n    transmuxer.on('audioSegmentTimingInfo', function (timingInfo) {\n      // Note that all times for [audio/video]SegmentTimingInfo events are in video clock\n      const audioSegmentTimingInfo = {\n        start: {\n          decode: clock$2.videoTsToSeconds(timingInfo.start.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.start.pts)\n        },\n        end: {\n          decode: clock$2.videoTsToSeconds(timingInfo.end.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.end.pts)\n        },\n        baseMediaDecodeTime: clock$2.videoTsToSeconds(timingInfo.baseMediaDecodeTime)\n      };\n\n      if (timingInfo.prependedContentDuration) {\n        audioSegmentTimingInfo.prependedContentDuration = clock$2.videoTsToSeconds(timingInfo.prependedContentDuration);\n      }\n\n      self.postMessage({\n        action: 'audioSegmentTimingInfo',\n        audioSegmentTimingInfo\n      });\n    });\n    transmuxer.on('id3Frame', function (id3Frame) {\n      self.postMessage({\n        action: 'id3Frame',\n        id3Frame\n      });\n    });\n    transmuxer.on('caption', function (caption) {\n      self.postMessage({\n        action: 'caption',\n        caption\n      });\n    });\n    transmuxer.on('trackinfo', function (trackInfo) {\n      self.postMessage({\n        action: 'trackinfo',\n        trackInfo\n      });\n    });\n    transmuxer.on('audioTimingInfo', function (audioTimingInfo) {\n      // convert to video TS since we prioritize video time over audio\n      self.postMessage({\n        action: 'audioTimingInfo',\n        audioTimingInfo: {\n          start: clock$2.videoTsToSeconds(audioTimingInfo.start),\n          end: clock$2.videoTsToSeconds(audioTimingInfo.end)\n        }\n      });\n    });\n    transmuxer.on('videoTimingInfo', function (videoTimingInfo) {\n      self.postMessage({\n        action: 'videoTimingInfo',\n        videoTimingInfo: {\n          start: clock$2.videoTsToSeconds(videoTimingInfo.start),\n          end: clock$2.videoTsToSeconds(videoTimingInfo.end)\n        }\n      });\n    });\n    transmuxer.on('log', function (log) {\n      self.postMessage({\n        action: 'log',\n        log\n      });\n    });\n  };\n  /**\n   * All incoming messages route through this hash. If no function exists\n   * to handle an incoming message, then we ignore the message.\n   *\n   * @class MessageHandlers\n   * @param {Object} options the options to initialize with\n   */\n\n\n  class MessageHandlers {\n    constructor(self, options) {\n      this.options = options || {};\n      this.self = self;\n      this.init();\n    }\n    /**\n     * initialize our web worker and wire all the events.\n     */\n\n\n    init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n\n      this.transmuxer = new transmuxer.Transmuxer(this.options);\n      wireTransmuxerEvents(this.self, this.transmuxer);\n    }\n\n    pushMp4Captions(data) {\n      if (!this.captionParser) {\n        this.captionParser = new captionParser();\n        this.captionParser.init();\n      }\n\n      const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n      const parsed = this.captionParser.parse(segment, data.trackIds, data.timescales);\n      this.self.postMessage({\n        action: 'mp4Captions',\n        captions: parsed && parsed.captions || [],\n        logs: parsed && parsed.logs || [],\n        data: segment.buffer\n      }, [segment.buffer]);\n    }\n    /**\n     * Initializes the WebVttParser and passes the init segment.\n     *\n     * @param {Uint8Array} data mp4 boxed WebVTT init segment data\n     */\n\n\n    initMp4WebVttParser(data) {\n      if (!this.webVttParser) {\n        this.webVttParser = new webvttParser();\n      }\n\n      const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength); // Set the timescale for the parser.\n      // This can be called repeatedly in order to set and re-set the timescale.\n\n      this.webVttParser.init(segment);\n    }\n    /**\n     * Parse an mp4 encapsulated WebVTT segment and return an array of cues.\n     *\n     * @param {Uint8Array} data a text/webvtt segment\n     * @return {Object[]} an array of parsed cue objects\n     */\n\n\n    getMp4WebVttText(data) {\n      if (!this.webVttParser) {\n        // timescale might not be set yet if the parser is created before an init segment is passed.\n        // default timescale is 90k.\n        this.webVttParser = new webvttParser();\n      }\n\n      const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n      const parsed = this.webVttParser.parseSegment(segment);\n      this.self.postMessage({\n        action: 'getMp4WebVttText',\n        mp4VttCues: parsed || [],\n        data: segment.buffer\n      }, [segment.buffer]);\n    }\n\n    probeMp4StartTime({\n      timescales,\n      data\n    }) {\n      const startTime = probe$2.startTime(timescales, data);\n      this.self.postMessage({\n        action: 'probeMp4StartTime',\n        startTime,\n        data\n      }, [data.buffer]);\n    }\n\n    probeMp4Tracks({\n      data\n    }) {\n      const tracks = probe$2.tracks(data);\n      this.self.postMessage({\n        action: 'probeMp4Tracks',\n        tracks,\n        data\n      }, [data.buffer]);\n    }\n    /**\n     * Probes an mp4 segment for EMSG boxes containing ID3 data.\n     * https://aomediacodec.github.io/id3-emsg/\n     *\n     * @param {Uint8Array} data segment data\n     * @param {number} offset segment start time\n     * @return {Object[]} an array of ID3 frames\n     */\n\n\n    probeEmsgID3({\n      data,\n      offset\n    }) {\n      const id3Frames = probe$2.getEmsgID3(data, offset);\n      this.self.postMessage({\n        action: 'probeEmsgID3',\n        id3Frames,\n        emsgData: data\n      }, [data.buffer]);\n    }\n    /**\n     * Probe an mpeg2-ts segment to determine the start time of the segment in it's\n     * internal \"media time,\" as well as whether it contains video and/or audio.\n     *\n     * @private\n     * @param {Uint8Array} bytes - segment bytes\n     * @param {number} baseStartTime\n     *        Relative reference timestamp used when adjusting frame timestamps for rollover.\n     *        This value should be in seconds, as it's converted to a 90khz clock within the\n     *        function body.\n     * @return {Object} The start time of the current segment in \"media time\" as well as\n     *                  whether it contains video and/or audio\n     */\n\n\n    probeTs({\n      data,\n      baseStartTime\n    }) {\n      const tsStartTime = typeof baseStartTime === 'number' && !isNaN(baseStartTime) ? baseStartTime * clock$2.ONE_SECOND_IN_TS : void 0;\n      const timeInfo = tsInspector.inspect(data, tsStartTime);\n      let result = null;\n\n      if (timeInfo) {\n        result = {\n          // each type's time info comes back as an array of 2 times, start and end\n          hasVideo: timeInfo.video && timeInfo.video.length === 2 || false,\n          hasAudio: timeInfo.audio && timeInfo.audio.length === 2 || false\n        };\n\n        if (result.hasVideo) {\n          result.videoStart = timeInfo.video[0].ptsTime;\n        }\n\n        if (result.hasAudio) {\n          result.audioStart = timeInfo.audio[0].ptsTime;\n        }\n      }\n\n      this.self.postMessage({\n        action: 'probeTs',\n        result,\n        data\n      }, [data.buffer]);\n    }\n\n    clearAllMp4Captions() {\n      if (this.captionParser) {\n        this.captionParser.clearAllCaptions();\n      }\n    }\n\n    clearParsedMp4Captions() {\n      if (this.captionParser) {\n        this.captionParser.clearParsedCaptions();\n      }\n    }\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n\n\n    push(data) {\n      // Cast array buffer to correct type for transmuxer\n      const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n      this.transmuxer.push(segment);\n    }\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n\n\n    reset() {\n      this.transmuxer.reset();\n    }\n    /**\n     * Set the value that will be used as the `baseMediaDecodeTime` time for the\n     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n     * set relative to the first based on the PTS values.\n     *\n     * @param {Object} data used to set the timestamp offset in the muxer\n     */\n\n\n    setTimestampOffset(data) {\n      const timestampOffset = data.timestampOffset || 0;\n      this.transmuxer.setBaseMediaDecodeTime(Math.round(clock$2.secondsToVideoTs(timestampOffset)));\n    }\n\n    setAudioAppendStart(data) {\n      this.transmuxer.setAudioAppendStart(Math.ceil(clock$2.secondsToVideoTs(data.appendStart)));\n    }\n\n    setRemux(data) {\n      this.transmuxer.setRemux(data.remux);\n    }\n    /**\n     * Forces the pipeline to finish processing the last segment and emit it's\n     * results.\n     *\n     * @param {Object} data event data, not really used\n     */\n\n\n    flush(data) {\n      this.transmuxer.flush(); // transmuxed done action is fired after both audio/video pipelines are flushed\n\n      self.postMessage({\n        action: 'done',\n        type: 'transmuxed'\n      });\n    }\n\n    endTimeline() {\n      this.transmuxer.endTimeline(); // transmuxed endedtimeline action is fired after both audio/video pipelines end their\n      // timelines\n\n      self.postMessage({\n        action: 'endedtimeline',\n        type: 'transmuxed'\n      });\n    }\n\n    alignGopsWith(data) {\n      this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());\n    }\n\n  }\n  /**\n   * Our web worker interface so that things can talk to mux.js\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(self, event.data.options);\n      return;\n    }\n\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers(self);\n    }\n\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n}));\nvar TransmuxWorker = factory(workerCode$1);\n/* rollup-plugin-worker-factory end for worker!/home/runner/work/http-streaming/http-streaming/src/transmuxer-worker.js */\n\nconst handleData_ = (event, transmuxedData, callback) => {\n  const {\n    type,\n    initSegment,\n    captions,\n    captionStreams,\n    metadata,\n    videoFrameDtsTime,\n    videoFramePtsTime\n  } = event.data.segment;\n  transmuxedData.buffer.push({\n    captions,\n    captionStreams,\n    metadata\n  });\n  const boxes = event.data.segment.boxes || {\n    data: event.data.segment.data\n  };\n  const result = {\n    type,\n    // cast ArrayBuffer to TypedArray\n    data: new Uint8Array(boxes.data, boxes.data.byteOffset, boxes.data.byteLength),\n    initSegment: new Uint8Array(initSegment.data, initSegment.byteOffset, initSegment.byteLength)\n  };\n\n  if (typeof videoFrameDtsTime !== 'undefined') {\n    result.videoFrameDtsTime = videoFrameDtsTime;\n  }\n\n  if (typeof videoFramePtsTime !== 'undefined') {\n    result.videoFramePtsTime = videoFramePtsTime;\n  }\n\n  callback(result);\n};\nconst handleDone_ = ({\n  transmuxedData,\n  callback\n}) => {\n  // Previously we only returned data on data events,\n  // not on done events. Clear out the buffer to keep that consistent.\n  transmuxedData.buffer = []; // all buffers should have been flushed from the muxer, so start processing anything we\n  // have received\n\n  callback(transmuxedData);\n};\nconst handleGopInfo_ = (event, transmuxedData) => {\n  transmuxedData.gopInfo = event.data.gopInfo;\n};\nconst processTransmux = options => {\n  const {\n    transmuxer,\n    bytes,\n    audioAppendStart,\n    gopsToAlignWith,\n    remux,\n    onData,\n    onTrackInfo,\n    onAudioTimingInfo,\n    onVideoTimingInfo,\n    onVideoSegmentTimingInfo,\n    onAudioSegmentTimingInfo,\n    onId3,\n    onCaptions,\n    onDone,\n    onEndedTimeline,\n    onTransmuxerLog,\n    isEndOfTimeline,\n    segment,\n    triggerSegmentEventFn\n  } = options;\n  const transmuxedData = {\n    buffer: []\n  };\n  let waitForEndedTimelineEvent = isEndOfTimeline;\n\n  const handleMessage = event => {\n    if (transmuxer.currentTransmux !== options) {\n      // disposed\n      return;\n    }\n\n    if (event.data.action === 'data') {\n      handleData_(event, transmuxedData, onData);\n    }\n\n    if (event.data.action === 'trackinfo') {\n      onTrackInfo(event.data.trackInfo);\n    }\n\n    if (event.data.action === 'gopInfo') {\n      handleGopInfo_(event, transmuxedData);\n    }\n\n    if (event.data.action === 'audioTimingInfo') {\n      onAudioTimingInfo(event.data.audioTimingInfo);\n    }\n\n    if (event.data.action === 'videoTimingInfo') {\n      onVideoTimingInfo(event.data.videoTimingInfo);\n    }\n\n    if (event.data.action === 'videoSegmentTimingInfo') {\n      onVideoSegmentTimingInfo(event.data.videoSegmentTimingInfo);\n    }\n\n    if (event.data.action === 'audioSegmentTimingInfo') {\n      onAudioSegmentTimingInfo(event.data.audioSegmentTimingInfo);\n    }\n\n    if (event.data.action === 'id3Frame') {\n      onId3([event.data.id3Frame], event.data.id3Frame.dispatchType);\n    }\n\n    if (event.data.action === 'caption') {\n      onCaptions(event.data.caption);\n    }\n\n    if (event.data.action === 'endedtimeline') {\n      waitForEndedTimelineEvent = false;\n      onEndedTimeline();\n    }\n\n    if (event.data.action === 'log') {\n      onTransmuxerLog(event.data.log);\n    } // wait for the transmuxed event since we may have audio and video\n\n\n    if (event.data.type !== 'transmuxed') {\n      return;\n    } // If the \"endedtimeline\" event has not yet fired, and this segment represents the end\n    // of a timeline, that means there may still be data events before the segment\n    // processing can be considerred complete. In that case, the final event should be\n    // an \"endedtimeline\" event with the type \"transmuxed.\"\n\n\n    if (waitForEndedTimelineEvent) {\n      return;\n    }\n\n    transmuxer.onmessage = null;\n    handleDone_({\n      transmuxedData,\n      callback: onDone\n    });\n    /* eslint-disable no-use-before-define */\n\n    dequeue(transmuxer);\n    /* eslint-enable */\n  };\n\n  const handleError = () => {\n    const error = {\n      message: 'Received an error message from the transmuxer worker',\n      metadata: {\n        errorType: videojs.Error.StreamingFailedToTransmuxSegment,\n        segmentInfo: segmentInfoPayload({\n          segment\n        })\n      }\n    };\n    onDone(null, error);\n  };\n\n  transmuxer.onmessage = handleMessage;\n  transmuxer.onerror = handleError;\n\n  if (audioAppendStart) {\n    transmuxer.postMessage({\n      action: 'setAudioAppendStart',\n      appendStart: audioAppendStart\n    });\n  } // allow empty arrays to be passed to clear out GOPs\n\n\n  if (Array.isArray(gopsToAlignWith)) {\n    transmuxer.postMessage({\n      action: 'alignGopsWith',\n      gopsToAlignWith\n    });\n  }\n\n  if (typeof remux !== 'undefined') {\n    transmuxer.postMessage({\n      action: 'setRemux',\n      remux\n    });\n  }\n\n  if (bytes.byteLength) {\n    const buffer = bytes instanceof ArrayBuffer ? bytes : bytes.buffer;\n    const byteOffset = bytes instanceof ArrayBuffer ? 0 : bytes.byteOffset;\n    triggerSegmentEventFn({\n      type: 'segmenttransmuxingstart',\n      segment\n    });\n    transmuxer.postMessage({\n      action: 'push',\n      // Send the typed-array of data as an ArrayBuffer so that\n      // it can be sent as a \"Transferable\" and avoid the costly\n      // memory copy\n      data: buffer,\n      // To recreate the original typed-array, we need information\n      // about what portion of the ArrayBuffer it was a view into\n      byteOffset,\n      byteLength: bytes.byteLength\n    }, [buffer]);\n  }\n\n  if (isEndOfTimeline) {\n    transmuxer.postMessage({\n      action: 'endTimeline'\n    });\n  } // even if we didn't push any bytes, we have to make sure we flush in case we reached\n  // the end of the segment\n\n\n  transmuxer.postMessage({\n    action: 'flush'\n  });\n};\nconst dequeue = transmuxer => {\n  transmuxer.currentTransmux = null;\n\n  if (transmuxer.transmuxQueue.length) {\n    transmuxer.currentTransmux = transmuxer.transmuxQueue.shift();\n\n    if (typeof transmuxer.currentTransmux === 'function') {\n      transmuxer.currentTransmux();\n    } else {\n      processTransmux(transmuxer.currentTransmux);\n    }\n  }\n};\nconst processAction = (transmuxer, action) => {\n  transmuxer.postMessage({\n    action\n  });\n  dequeue(transmuxer);\n};\nconst enqueueAction = (action, transmuxer) => {\n  if (!transmuxer.currentTransmux) {\n    transmuxer.currentTransmux = action;\n    processAction(transmuxer, action);\n    return;\n  }\n\n  transmuxer.transmuxQueue.push(processAction.bind(null, transmuxer, action));\n};\nconst reset = transmuxer => {\n  enqueueAction('reset', transmuxer);\n};\nconst endTimeline = transmuxer => {\n  enqueueAction('endTimeline', transmuxer);\n};\nconst transmux = options => {\n  if (!options.transmuxer.currentTransmux) {\n    options.transmuxer.currentTransmux = options;\n    processTransmux(options);\n    return;\n  }\n\n  options.transmuxer.transmuxQueue.push(options);\n};\nconst createTransmuxer = options => {\n  const transmuxer = new TransmuxWorker();\n  transmuxer.currentTransmux = null;\n  transmuxer.transmuxQueue = [];\n  const term = transmuxer.terminate;\n\n  transmuxer.terminate = () => {\n    transmuxer.currentTransmux = null;\n    transmuxer.transmuxQueue.length = 0;\n    return term.call(transmuxer);\n  };\n\n  transmuxer.postMessage({\n    action: 'init',\n    options\n  });\n  return transmuxer;\n};\nvar segmentTransmuxer = {\n  reset,\n  endTimeline,\n  transmux,\n  createTransmuxer\n};\n\nconst workerCallback = function (options) {\n  const transmuxer = options.transmuxer;\n  const endAction = options.endAction || options.action;\n  const callback = options.callback;\n\n  const message = _extends({}, options, {\n    endAction: null,\n    transmuxer: null,\n    callback: null\n  });\n\n  const listenForEndEvent = event => {\n    if (event.data.action !== endAction) {\n      return;\n    }\n\n    transmuxer.removeEventListener('message', listenForEndEvent); // transfer ownership of bytes back to us.\n\n    if (event.data.data) {\n      event.data.data = new Uint8Array(event.data.data, options.byteOffset || 0, options.byteLength || event.data.data.byteLength);\n\n      if (options.data) {\n        options.data = event.data.data;\n      }\n    }\n\n    callback(event.data);\n  };\n\n  transmuxer.addEventListener('message', listenForEndEvent);\n\n  if (options.data) {\n    const isArrayBuffer = options.data instanceof ArrayBuffer;\n    message.byteOffset = isArrayBuffer ? 0 : options.data.byteOffset;\n    message.byteLength = options.data.byteLength;\n    const transfers = [isArrayBuffer ? options.data : options.data.buffer];\n    transmuxer.postMessage(message, transfers);\n  } else {\n    transmuxer.postMessage(message);\n  }\n};\n\nconst REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\nconst WEB_VTT_CODEC = 'wvtt';\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\n\nconst abortAll = activeXhrs => {\n  activeXhrs.forEach(xhr => {\n    xhr.abort();\n  });\n};\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\n\n\nconst getRequestStats = request => {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\n\n\nconst getProgressStats = progressEvent => {\n  const request = progressEvent.target;\n  const roundTripTime = Date.now() - request.requestTime;\n  const stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n  stats.bytesReceived = progressEvent.loaded; // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n  return stats;\n};\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\n\n\nconst handleErrors = (error, request) => {\n  const {\n    requestType\n  } = request;\n  const metadata = getStreamingNetworkErrorMetadata({\n    requestType,\n    request,\n    error\n  });\n\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request,\n      metadata\n    };\n  }\n\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request,\n      metadata\n    };\n  }\n\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request,\n      metadata\n    };\n  }\n\n  if (request.responseType === 'arraybuffer' && request.response.byteLength === 0) {\n    return {\n      status: request.status,\n      message: 'Empty HLS response at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request,\n      metadata\n    };\n  }\n\n  return null;\n};\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Array} objects - objects to add the key bytes to.\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\n\nconst handleKeyResponse = (segment, objects, finishProcessingFn, triggerSegmentEventFn) => (error, request) => {\n  const response = request.response;\n  const errorObj = handleErrors(error, request);\n\n  if (errorObj) {\n    return finishProcessingFn(errorObj, segment);\n  }\n\n  if (response.byteLength !== 16) {\n    return finishProcessingFn({\n      status: request.status,\n      message: 'Invalid HLS key at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    }, segment);\n  }\n\n  const view = new DataView(response);\n  const bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n\n  for (let i = 0; i < objects.length; i++) {\n    objects[i].bytes = bytes;\n  }\n\n  const keyInfo = {\n    uri: request.uri\n  };\n  triggerSegmentEventFn({\n    type: 'segmentkeyloadcomplete',\n    segment,\n    keyInfo\n  });\n  return finishProcessingFn(null, segment);\n};\n/**\n * Processes an mp4 init segment depending on the codec through the transmuxer.\n *\n * @param {Object} segment init segment to process\n * @param {string} codec the codec of the text segments\n */\n\n\nconst initMp4Text = (segment, codec) => {\n  if (codec === WEB_VTT_CODEC) {\n    segment.transmuxer.postMessage({\n      action: 'initMp4WebVttParser',\n      data: segment.map.bytes\n    });\n  }\n};\n/**\n * Parses an mp4 text segment with the transmuxer and calls the doneFn from\n * the segment loader.\n *\n * @param {Object} segment the text segment to parse\n * @param {string} codec the codec of the text segment\n * @param {Function} doneFn the doneFn passed from the segment loader\n */\n\n\nconst parseMp4TextSegment = (segment, codec, doneFn) => {\n  if (codec === WEB_VTT_CODEC) {\n    workerCallback({\n      action: 'getMp4WebVttText',\n      data: segment.bytes,\n      transmuxer: segment.transmuxer,\n      callback: ({\n        data,\n        mp4VttCues\n      }) => {\n        segment.bytes = data;\n        doneFn(null, segment, {\n          mp4VttCues\n        });\n      }\n    });\n  }\n};\n\nconst parseInitSegment = (segment, callback) => {\n  const type = detectContainerForBytes(segment.map.bytes); // TODO: We should also handle ts init segments here, but we\n  // only know how to parse mp4 init segments at the moment\n\n  if (type !== 'mp4') {\n    const uri = segment.map.resolvedUri || segment.map.uri;\n    const mediaType = type || 'unknown';\n    return callback({\n      internal: true,\n      message: `Found unsupported ${mediaType} container for initialization segment at URL: ${uri}`,\n      code: REQUEST_ERRORS.FAILURE,\n      metadata: {\n        mediaType\n      }\n    });\n  }\n\n  workerCallback({\n    action: 'probeMp4Tracks',\n    data: segment.map.bytes,\n    transmuxer: segment.transmuxer,\n    callback: ({\n      tracks,\n      data\n    }) => {\n      // transfer bytes back to us\n      segment.map.bytes = data;\n      tracks.forEach(function (track) {\n        segment.map.tracks = segment.map.tracks || {}; // only support one track of each type for now\n\n        if (segment.map.tracks[track.type]) {\n          return;\n        }\n\n        segment.map.tracks[track.type] = track;\n\n        if (typeof track.id === 'number' && track.timescale) {\n          segment.map.timescales = segment.map.timescales || {};\n          segment.map.timescales[track.id] = track.timescale;\n        }\n\n        if (track.type === 'text') {\n          initMp4Text(segment, track.codec);\n        }\n      });\n      return callback(null);\n    }\n  });\n};\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\n\nconst handleInitSegmentResponse = ({\n  segment,\n  finishProcessingFn,\n  triggerSegmentEventFn\n}) => (error, request) => {\n  const errorObj = handleErrors(error, request);\n\n  if (errorObj) {\n    return finishProcessingFn(errorObj, segment);\n  }\n\n  const bytes = new Uint8Array(request.response);\n  triggerSegmentEventFn({\n    type: 'segmentloaded',\n    segment\n  }); // init segment is encypted, we will have to wait\n  // until the key request is done to decrypt.\n\n  if (segment.map.key) {\n    segment.map.encryptedBytes = bytes;\n    return finishProcessingFn(null, segment);\n  }\n\n  segment.map.bytes = bytes;\n  parseInitSegment(segment, function (parseError) {\n    if (parseError) {\n      parseError.xhr = request;\n      parseError.status = request.status;\n      return finishProcessingFn(parseError, segment);\n    }\n\n    finishProcessingFn(null, segment);\n  });\n};\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\n\nconst handleSegmentResponse = ({\n  segment,\n  finishProcessingFn,\n  responseType,\n  triggerSegmentEventFn\n}) => (error, request) => {\n  const errorObj = handleErrors(error, request);\n\n  if (errorObj) {\n    return finishProcessingFn(errorObj, segment);\n  }\n\n  triggerSegmentEventFn({\n    type: 'segmentloaded',\n    segment\n  });\n  const newBytes = // although responseText \"should\" exist, this guard serves to prevent an error being\n  // thrown for two primary cases:\n  // 1. the mime type override stops working, or is not implemented for a specific\n  //    browser\n  // 2. when using mock XHR libraries like sinon that do not allow the override behavior\n  responseType === 'arraybuffer' || !request.responseText ? request.response : stringToArrayBuffer(request.responseText.substring(segment.lastReachedChar || 0));\n  segment.stats = getRequestStats(request);\n\n  if (segment.key) {\n    segment.encryptedBytes = new Uint8Array(newBytes);\n  } else {\n    segment.bytes = new Uint8Array(newBytes);\n  }\n\n  return finishProcessingFn(null, segment);\n};\n\nconst transmuxAndNotify = ({\n  segment,\n  bytes,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog,\n  triggerSegmentEventFn\n}) => {\n  const fmp4Tracks = segment.map && segment.map.tracks || {};\n  const isMuxed = Boolean(fmp4Tracks.audio && fmp4Tracks.video); // Keep references to each function so we can null them out after we're done with them.\n  // One reason for this is that in the case of full segments, we want to trust start\n  // times from the probe, rather than the transmuxer.\n\n  let audioStartFn = timingInfoFn.bind(null, segment, 'audio', 'start');\n  const audioEndFn = timingInfoFn.bind(null, segment, 'audio', 'end');\n  let videoStartFn = timingInfoFn.bind(null, segment, 'video', 'start');\n  const videoEndFn = timingInfoFn.bind(null, segment, 'video', 'end');\n\n  const finish = () => transmux({\n    bytes,\n    transmuxer: segment.transmuxer,\n    audioAppendStart: segment.audioAppendStart,\n    gopsToAlignWith: segment.gopsToAlignWith,\n    remux: isMuxed,\n    onData: result => {\n      result.type = result.type === 'combined' ? 'video' : result.type;\n      dataFn(segment, result);\n    },\n    onTrackInfo: trackInfo => {\n      if (trackInfoFn) {\n        if (isMuxed) {\n          trackInfo.isMuxed = true;\n        }\n\n        trackInfoFn(segment, trackInfo);\n      }\n    },\n    onAudioTimingInfo: audioTimingInfo => {\n      // we only want the first start value we encounter\n      if (audioStartFn && typeof audioTimingInfo.start !== 'undefined') {\n        audioStartFn(audioTimingInfo.start);\n        audioStartFn = null;\n      } // we want to continually update the end time\n\n\n      if (audioEndFn && typeof audioTimingInfo.end !== 'undefined') {\n        audioEndFn(audioTimingInfo.end);\n      }\n    },\n    onVideoTimingInfo: videoTimingInfo => {\n      // we only want the first start value we encounter\n      if (videoStartFn && typeof videoTimingInfo.start !== 'undefined') {\n        videoStartFn(videoTimingInfo.start);\n        videoStartFn = null;\n      } // we want to continually update the end time\n\n\n      if (videoEndFn && typeof videoTimingInfo.end !== 'undefined') {\n        videoEndFn(videoTimingInfo.end);\n      }\n    },\n    onVideoSegmentTimingInfo: videoSegmentTimingInfo => {\n      const timingInfo = {\n        pts: {\n          start: videoSegmentTimingInfo.start.presentation,\n          end: videoSegmentTimingInfo.end.presentation\n        },\n        dts: {\n          start: videoSegmentTimingInfo.start.decode,\n          end: videoSegmentTimingInfo.end.decode\n        }\n      };\n      triggerSegmentEventFn({\n        type: 'segmenttransmuxingtiminginfoavailable',\n        segment,\n        timingInfo\n      });\n      videoSegmentTimingInfoFn(videoSegmentTimingInfo);\n    },\n    onAudioSegmentTimingInfo: audioSegmentTimingInfo => {\n      const timingInfo = {\n        pts: {\n          start: audioSegmentTimingInfo.start.pts,\n          end: audioSegmentTimingInfo.end.pts\n        },\n        dts: {\n          start: audioSegmentTimingInfo.start.dts,\n          end: audioSegmentTimingInfo.end.dts\n        }\n      };\n      triggerSegmentEventFn({\n        type: 'segmenttransmuxingtiminginfoavailable',\n        segment,\n        timingInfo\n      });\n      audioSegmentTimingInfoFn(audioSegmentTimingInfo);\n    },\n    onId3: (id3Frames, dispatchType) => {\n      id3Fn(segment, id3Frames, dispatchType);\n    },\n    onCaptions: captions => {\n      captionsFn(segment, [captions]);\n    },\n    isEndOfTimeline,\n    onEndedTimeline: () => {\n      endedTimelineFn();\n    },\n    onTransmuxerLog,\n    onDone: (result, error) => {\n      if (!doneFn) {\n        return;\n      }\n\n      result.type = result.type === 'combined' ? 'video' : result.type;\n      triggerSegmentEventFn({\n        type: 'segmenttransmuxingcomplete',\n        segment\n      });\n      doneFn(error, segment, result);\n    },\n    segment,\n    triggerSegmentEventFn\n  }); // In the transmuxer, we don't yet have the ability to extract a \"proper\" start time.\n  // Meaning cached frame data may corrupt our notion of where this segment\n  // really starts. To get around this, probe for the info needed.\n\n\n  workerCallback({\n    action: 'probeTs',\n    transmuxer: segment.transmuxer,\n    data: bytes,\n    baseStartTime: segment.baseStartTime,\n    callback: data => {\n      segment.bytes = bytes = data.data;\n      const probeResult = data.result;\n\n      if (probeResult) {\n        trackInfoFn(segment, {\n          hasAudio: probeResult.hasAudio,\n          hasVideo: probeResult.hasVideo,\n          isMuxed\n        });\n        trackInfoFn = null;\n      }\n\n      finish();\n    }\n  });\n};\n\nconst handleSegmentBytes = ({\n  segment,\n  bytes,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog,\n  triggerSegmentEventFn\n}) => {\n  let bytesAsUint8Array = new Uint8Array(bytes); // TODO:\n  // We should have a handler that fetches the number of bytes required\n  // to check if something is fmp4. This will allow us to save bandwidth\n  // because we can only exclude a playlist and abort requests\n  // by codec after trackinfo triggers.\n\n  if (isLikelyFmp4MediaSegment(bytesAsUint8Array)) {\n    segment.isFmp4 = true;\n    const {\n      tracks\n    } = segment.map;\n    const isMp4TextSegment = tracks.text && (!tracks.audio || !tracks.video);\n\n    if (isMp4TextSegment) {\n      dataFn(segment, {\n        data: bytesAsUint8Array,\n        type: 'text'\n      });\n      parseMp4TextSegment(segment, tracks.text.codec, doneFn);\n      return;\n    }\n\n    const trackInfo = {\n      isFmp4: true,\n      hasVideo: !!tracks.video,\n      hasAudio: !!tracks.audio\n    }; // if we have a audio track, with a codec that is not set to\n    // encrypted audio\n\n    if (tracks.audio && tracks.audio.codec && tracks.audio.codec !== 'enca') {\n      trackInfo.audioCodec = tracks.audio.codec;\n    } // if we have a video track, with a codec that is not set to\n    // encrypted video\n\n\n    if (tracks.video && tracks.video.codec && tracks.video.codec !== 'encv') {\n      trackInfo.videoCodec = tracks.video.codec;\n    }\n\n    if (tracks.video && tracks.audio) {\n      trackInfo.isMuxed = true;\n    } // since we don't support appending fmp4 data on progress, we know we have the full\n    // segment here\n\n\n    trackInfoFn(segment, trackInfo); // The probe doesn't provide the segment end time, so only callback with the start\n    // time. The end time can be roughly calculated by the receiver using the duration.\n    //\n    // Note that the start time returned by the probe reflects the baseMediaDecodeTime, as\n    // that is the true start of the segment (where the playback engine should begin\n    // decoding).\n\n    const finishLoading = (captions, id3Frames) => {\n      // if the track still has audio at this point it is only possible\n      // for it to be audio only. See `tracks.video && tracks.audio` if statement\n      // above.\n      // we make sure to use segment.bytes here as that\n      dataFn(segment, {\n        data: bytesAsUint8Array,\n        type: trackInfo.hasAudio && !trackInfo.isMuxed ? 'audio' : 'video'\n      });\n\n      if (id3Frames && id3Frames.length) {\n        id3Fn(segment, id3Frames);\n      }\n\n      if (captions && captions.length) {\n        captionsFn(segment, captions);\n      }\n\n      doneFn(null, segment, {});\n    };\n\n    workerCallback({\n      action: 'probeMp4StartTime',\n      timescales: segment.map.timescales,\n      data: bytesAsUint8Array,\n      transmuxer: segment.transmuxer,\n      callback: ({\n        data,\n        startTime\n      }) => {\n        // transfer bytes back to us\n        bytes = data.buffer;\n        segment.bytes = bytesAsUint8Array = data;\n\n        if (trackInfo.hasAudio && !trackInfo.isMuxed) {\n          timingInfoFn(segment, 'audio', 'start', startTime);\n        }\n\n        if (trackInfo.hasVideo) {\n          timingInfoFn(segment, 'video', 'start', startTime);\n        }\n\n        workerCallback({\n          action: 'probeEmsgID3',\n          data: bytesAsUint8Array,\n          transmuxer: segment.transmuxer,\n          offset: startTime,\n          callback: ({\n            emsgData,\n            id3Frames\n          }) => {\n            // transfer bytes back to us\n            bytes = emsgData.buffer;\n            segment.bytes = bytesAsUint8Array = emsgData; // Run through the CaptionParser in case there are captions.\n            // Initialize CaptionParser if it hasn't been yet\n\n            if (!tracks.video || !emsgData.byteLength || !segment.transmuxer) {\n              finishLoading(undefined, id3Frames);\n              return;\n            }\n\n            workerCallback({\n              action: 'pushMp4Captions',\n              endAction: 'mp4Captions',\n              transmuxer: segment.transmuxer,\n              data: bytesAsUint8Array,\n              timescales: segment.map.timescales,\n              trackIds: [tracks.video.id],\n              callback: message => {\n                // transfer bytes back to us\n                bytes = message.data.buffer;\n                segment.bytes = bytesAsUint8Array = message.data;\n                message.logs.forEach(function (log) {\n                  onTransmuxerLog(merge(log, {\n                    stream: 'mp4CaptionParser'\n                  }));\n                });\n                finishLoading(message.captions, id3Frames);\n              }\n            });\n          }\n        });\n      }\n    });\n    return;\n  } // VTT or other segments that don't need processing\n\n\n  if (!segment.transmuxer) {\n    doneFn(null, segment, {});\n    return;\n  }\n\n  if (typeof segment.container === 'undefined') {\n    segment.container = detectContainerForBytes(bytesAsUint8Array);\n  }\n\n  if (segment.container !== 'ts' && segment.container !== 'aac') {\n    trackInfoFn(segment, {\n      hasAudio: false,\n      hasVideo: false\n    });\n    doneFn(null, segment, {});\n    return;\n  } // ts or aac\n\n\n  transmuxAndNotify({\n    segment,\n    bytes,\n    trackInfoFn,\n    timingInfoFn,\n    videoSegmentTimingInfoFn,\n    audioSegmentTimingInfoFn,\n    id3Fn,\n    captionsFn,\n    isEndOfTimeline,\n    endedTimelineFn,\n    dataFn,\n    doneFn,\n    onTransmuxerLog,\n    triggerSegmentEventFn\n  });\n};\n\nconst decrypt = function ({\n  id,\n  key,\n  encryptedBytes,\n  decryptionWorker,\n  segment,\n  doneFn\n}, callback) {\n  const decryptionHandler = event => {\n    if (event.data.source === id) {\n      decryptionWorker.removeEventListener('message', decryptionHandler);\n      const decrypted = event.data.decrypted;\n      callback(new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength));\n    }\n  };\n\n  decryptionWorker.onerror = () => {\n    const message = 'An error occurred in the decryption worker';\n    const segmentInfo = segmentInfoPayload({\n      segment\n    });\n    const decryptError = {\n      message,\n      metadata: {\n        error: new Error(message),\n        errorType: videojs.Error.StreamingFailedToDecryptSegment,\n        segmentInfo,\n        keyInfo: {\n          uri: segment.key.resolvedUri || segment.map.key.resolvedUri\n        }\n      }\n    };\n    doneFn(decryptError, segment);\n  };\n\n  decryptionWorker.addEventListener('message', decryptionHandler);\n  let keyBytes;\n\n  if (key.bytes.slice) {\n    keyBytes = key.bytes.slice();\n  } else {\n    keyBytes = new Uint32Array(Array.prototype.slice.call(key.bytes));\n  } // incrementally decrypt the bytes\n\n\n  decryptionWorker.postMessage(createTransferableMessage({\n    source: id,\n    encrypted: encryptedBytes,\n    key: keyBytes,\n    iv: key.iv\n  }), [encryptedBytes.buffer, keyBytes.buffer]);\n};\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128 decryption\n *                                       routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that is executed when segment bytes are available\n *                            and ready to use\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\n\n\nconst decryptSegment = ({\n  decryptionWorker,\n  segment,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog,\n  triggerSegmentEventFn\n}) => {\n  triggerSegmentEventFn({\n    type: 'segmentdecryptionstart'\n  });\n  decrypt({\n    id: segment.requestId,\n    key: segment.key,\n    encryptedBytes: segment.encryptedBytes,\n    decryptionWorker,\n    segment,\n    doneFn\n  }, decryptedBytes => {\n    segment.bytes = decryptedBytes;\n    triggerSegmentEventFn({\n      type: 'segmentdecryptioncomplete',\n      segment\n    });\n    handleSegmentBytes({\n      segment,\n      bytes: segment.bytes,\n      trackInfoFn,\n      timingInfoFn,\n      videoSegmentTimingInfoFn,\n      audioSegmentTimingInfoFn,\n      id3Fn,\n      captionsFn,\n      isEndOfTimeline,\n      endedTimelineFn,\n      dataFn,\n      doneFn,\n      onTransmuxerLog,\n      triggerSegmentEventFn\n    });\n  });\n};\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128 decryption\n *                                       routines\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} id3Fn - a callback that receives ID3 metadata\n * @param {Function} captionsFn - a callback that receives captions\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that is executed when segment bytes are available\n *                            and ready to use\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\n\n\nconst waitForCompletion = ({\n  activeXhrs,\n  decryptionWorker,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog,\n  triggerSegmentEventFn\n}) => {\n  let count = 0;\n  let didError = false;\n  return (error, segment) => {\n    if (didError) {\n      return;\n    }\n\n    if (error) {\n      didError = true; // If there are errors, we have to abort any outstanding requests\n\n      abortAll(activeXhrs); // Even though the requests above are aborted, and in theory we could wait until we\n      // handle the aborted events from those requests, there are some cases where we may\n      // never get an aborted event. For instance, if the network connection is lost and\n      // there were two requests, the first may have triggered an error immediately, while\n      // the second request remains unsent. In that case, the aborted algorithm will not\n      // trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method\n      //\n      // We also can't rely on the ready state of the XHR, since the request that\n      // triggered the connection error may also show as a ready state of 0 (unsent).\n      // Therefore, we have to finish this group of requests immediately after the first\n      // seen error.\n\n      return doneFn(error, segment);\n    }\n\n    count += 1;\n\n    if (count === activeXhrs.length) {\n      const segmentFinish = function () {\n        if (segment.encryptedBytes) {\n          return decryptSegment({\n            decryptionWorker,\n            segment,\n            trackInfoFn,\n            timingInfoFn,\n            videoSegmentTimingInfoFn,\n            audioSegmentTimingInfoFn,\n            id3Fn,\n            captionsFn,\n            isEndOfTimeline,\n            endedTimelineFn,\n            dataFn,\n            doneFn,\n            onTransmuxerLog,\n            triggerSegmentEventFn\n          });\n        } // Otherwise, everything is ready just continue\n\n\n        handleSegmentBytes({\n          segment,\n          bytes: segment.bytes,\n          trackInfoFn,\n          timingInfoFn,\n          videoSegmentTimingInfoFn,\n          audioSegmentTimingInfoFn,\n          id3Fn,\n          captionsFn,\n          isEndOfTimeline,\n          endedTimelineFn,\n          dataFn,\n          doneFn,\n          onTransmuxerLog,\n          triggerSegmentEventFn\n        });\n      }; // Keep track of when *all* of the requests have completed\n\n\n      segment.endOfAllRequests = Date.now();\n\n      if (segment.map && segment.map.encryptedBytes && !segment.map.bytes) {\n        triggerSegmentEventFn({\n          type: 'segmentdecryptionstart',\n          segment\n        });\n        return decrypt({\n          decryptionWorker,\n          // add -init to the \"id\" to differentiate between segment\n          // and init segment decryption, just in case they happen\n          // at the same time at some point in the future.\n          id: segment.requestId + '-init',\n          encryptedBytes: segment.map.encryptedBytes,\n          key: segment.map.key,\n          segment,\n          doneFn\n        }, decryptedBytes => {\n          segment.map.bytes = decryptedBytes;\n          triggerSegmentEventFn({\n            type: 'segmentdecryptioncomplete',\n            segment\n          });\n          parseInitSegment(segment, parseError => {\n            if (parseError) {\n              abortAll(activeXhrs);\n              return doneFn(parseError, segment);\n            }\n\n            segmentFinish();\n          });\n        });\n      }\n\n      segmentFinish();\n    }\n  };\n};\n/**\n * Calls the abort callback if any request within the batch was aborted. Will only call\n * the callback once per batch of requests, even if multiple were aborted.\n *\n * @param {Object} loadendState - state to check to see if the abort function was called\n * @param {Function} abortFn - callback to call for abort\n */\n\n\nconst handleLoadEnd = ({\n  loadendState,\n  abortFn\n}) => event => {\n  const request = event.target;\n\n  if (request.aborted && abortFn && !loadendState.calledAbortFn) {\n    abortFn();\n    loadendState.calledAbortFn = true;\n  }\n};\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that is executed when segment bytes are available\n *                            and ready to use\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\n\n\nconst handleProgress = ({\n  segment,\n  progressFn,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn\n}) => event => {\n  const request = event.target;\n\n  if (request.aborted) {\n    return;\n  }\n\n  segment.stats = merge(segment.stats, getProgressStats(event)); // record the time that we receive the first byte of data\n\n  if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n    segment.stats.firstBytesReceivedAt = Date.now();\n  }\n\n  return progressFn(event, segment);\n};\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [transmuxer]: Object,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} abortFn - a callback called (only once) if any piece of a request was\n *                             aborted\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} id3Fn - a callback that receives ID3 metadata\n * @param {Function} captionsFn - a callback that receives captions\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that receives data from the main segment's xhr\n *                            request, transmuxed if needed\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @return {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\n\n\nconst mediaSegmentRequest = ({\n  xhr,\n  xhrOptions,\n  decryptionWorker,\n  segment,\n  abortFn,\n  progressFn,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog,\n  triggerSegmentEventFn\n}) => {\n  const activeXhrs = [];\n  const finishProcessingFn = waitForCompletion({\n    activeXhrs,\n    decryptionWorker,\n    trackInfoFn,\n    timingInfoFn,\n    videoSegmentTimingInfoFn,\n    audioSegmentTimingInfoFn,\n    id3Fn,\n    captionsFn,\n    isEndOfTimeline,\n    endedTimelineFn,\n    dataFn,\n    doneFn,\n    onTransmuxerLog,\n    triggerSegmentEventFn\n  }); // optionally, request the decryption key\n\n  if (segment.key && !segment.key.bytes) {\n    const objects = [segment.key];\n\n    if (segment.map && !segment.map.bytes && segment.map.key && segment.map.key.resolvedUri === segment.key.resolvedUri) {\n      objects.push(segment.map.key);\n    }\n\n    const keyRequestOptions = merge(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer',\n      requestType: 'segment-key'\n    });\n    const keyRequestCallback = handleKeyResponse(segment, objects, finishProcessingFn, triggerSegmentEventFn);\n    const keyInfo = {\n      uri: segment.key.resolvedUri\n    };\n    triggerSegmentEventFn({\n      type: 'segmentkeyloadstart',\n      segment,\n      keyInfo\n    });\n    const keyXhr = xhr(keyRequestOptions, keyRequestCallback);\n    activeXhrs.push(keyXhr);\n  } // optionally, request the associated media init segment\n\n\n  if (segment.map && !segment.map.bytes) {\n    const differentMapKey = segment.map.key && (!segment.key || segment.key.resolvedUri !== segment.map.key.resolvedUri);\n\n    if (differentMapKey) {\n      const mapKeyRequestOptions = merge(xhrOptions, {\n        uri: segment.map.key.resolvedUri,\n        responseType: 'arraybuffer',\n        requestType: 'segment-key'\n      });\n      const mapKeyRequestCallback = handleKeyResponse(segment, [segment.map.key], finishProcessingFn, triggerSegmentEventFn);\n      const keyInfo = {\n        uri: segment.map.key.resolvedUri\n      };\n      triggerSegmentEventFn({\n        type: 'segmentkeyloadstart',\n        segment,\n        keyInfo\n      });\n      const mapKeyXhr = xhr(mapKeyRequestOptions, mapKeyRequestCallback);\n      activeXhrs.push(mapKeyXhr);\n    }\n\n    const initSegmentOptions = merge(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map),\n      requestType: 'segment-media-initialization'\n    });\n    const initSegmentRequestCallback = handleInitSegmentResponse({\n      segment,\n      finishProcessingFn,\n      triggerSegmentEventFn\n    });\n    triggerSegmentEventFn({\n      type: 'segmentloadstart',\n      segment\n    });\n    const initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);\n    activeXhrs.push(initSegmentXhr);\n  }\n\n  const segmentRequestOptions = merge(xhrOptions, {\n    uri: segment.part && segment.part.resolvedUri || segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment),\n    requestType: 'segment'\n  });\n  const segmentRequestCallback = handleSegmentResponse({\n    segment,\n    finishProcessingFn,\n    responseType: segmentRequestOptions.responseType,\n    triggerSegmentEventFn\n  });\n  triggerSegmentEventFn({\n    type: 'segmentloadstart',\n    segment\n  });\n  const segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);\n  segmentXhr.addEventListener('progress', handleProgress({\n    segment,\n    progressFn,\n    trackInfoFn,\n    timingInfoFn,\n    videoSegmentTimingInfoFn,\n    audioSegmentTimingInfoFn,\n    id3Fn,\n    captionsFn,\n    isEndOfTimeline,\n    endedTimelineFn,\n    dataFn\n  }));\n  activeXhrs.push(segmentXhr); // since all parts of the request must be considered, but should not make callbacks\n  // multiple times, provide a shared state object\n\n  const loadendState = {};\n  activeXhrs.forEach(activeXhr => {\n    activeXhr.addEventListener('loadend', handleLoadEnd({\n      loadendState,\n      abortFn\n    }));\n  });\n  return () => abortAll(activeXhrs);\n};\n\nconst logFn = logger('PlaylistSelector');\n\nconst representationToString = function (representation) {\n  if (!representation || !representation.playlist) {\n    return;\n  }\n\n  const playlist = representation.playlist;\n  return JSON.stringify({\n    id: playlist.id,\n    bandwidth: representation.bandwidth,\n    width: representation.width,\n    height: representation.height,\n    codecs: playlist.attributes && playlist.attributes.CODECS || ''\n  });\n}; // Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\n\n\nconst safeGetComputedStyle = function (el, property) {\n  if (!el) {\n    return '';\n  }\n\n  const result = window$1.getComputedStyle(el);\n\n  if (!result) {\n    return '';\n  }\n\n  return result[property];\n};\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\n\n\nconst stableSort = function (array, sortFn) {\n  const newArray = array.slice();\n  array.sort(function (left, right) {\n    const cmp = sortFn(left, right);\n\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n\n    return cmp;\n  });\n};\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\n\n\nconst comparePlaylistBandwidth = function (left, right) {\n  let leftBandwidth;\n  let rightBandwidth;\n\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n\n  leftBandwidth = leftBandwidth || window$1.Number.MAX_VALUE;\n\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n\n  rightBandwidth = rightBandwidth || window$1.Number.MAX_VALUE;\n  return leftBandwidth - rightBandwidth;\n};\n/**\n * A comparator function to sort two playlist object by resolution (width).\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\n\nconst comparePlaylistResolution = function (left, right) {\n  let leftWidth;\n  let rightWidth;\n\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n\n  leftWidth = leftWidth || window$1.Number.MAX_VALUE;\n\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n\n  rightWidth = rightWidth || window$1.Number.MAX_VALUE; // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n\n  return leftWidth - rightWidth;\n};\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.main\n *        Object representation of the main manifest\n * @param {number} settings.bandwidth\n *        Current calculated bandwidth of the player\n * @param {number} settings.playerWidth\n *        Current width of the player element (should account for the device pixel ratio)\n * @param {number} settings.playerHeight\n *        Current height of the player element (should account for the device pixel ratio)\n * @param {number} settings.playerObjectFit\n *        Current value of the video element's object-fit CSS property. Allows taking into\n *        account that the video might be scaled up to cover the media element when selecting\n *        media playlists based on player size.\n * @param {boolean} settings.limitRenditionByPlayerDimensions\n *        True if the player width and height should be used during the selection, false otherwise\n * @param {Object} settings.playlistController\n *        the current playlistController object\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\n\nlet simpleSelector = function (settings) {\n  const {\n    main,\n    bandwidth: playerBandwidth,\n    playerWidth,\n    playerHeight,\n    playerObjectFit,\n    limitRenditionByPlayerDimensions,\n    playlistController\n  } = settings; // If we end up getting called before `main` is available, exit early\n\n  if (!main) {\n    return;\n  }\n\n  const options = {\n    bandwidth: playerBandwidth,\n    width: playerWidth,\n    height: playerHeight,\n    limitRenditionByPlayerDimensions\n  };\n  let playlists = main.playlists; // if playlist is audio only, select between currently active audio group playlists.\n\n  if (Playlist.isAudioOnly(main)) {\n    playlists = playlistController.getAudioTrackPlaylists_(); // add audioOnly to options so that we log audioOnly: true\n    // at the buttom of this function for debugging.\n\n    options.audioOnly = true;\n  } // convert the playlists to an intermediary representation to make comparisons easier\n\n\n  let sortedPlaylistReps = playlists.map(playlist => {\n    let bandwidth;\n    const width = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    const height = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes && playlist.attributes.BANDWIDTH;\n    bandwidth = bandwidth || window$1.Number.MAX_VALUE;\n    return {\n      bandwidth,\n      width,\n      height,\n      playlist\n    };\n  });\n  stableSort(sortedPlaylistReps, (left, right) => left.bandwidth - right.bandwidth); // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  sortedPlaylistReps = sortedPlaylistReps.filter(rep => !Playlist.isIncompatible(rep.playlist)); // filter out any playlists that have been disabled manually through the representations\n  // api or excluded temporarily due to playback errors.\n\n  let enabledPlaylistReps = sortedPlaylistReps.filter(rep => Playlist.isEnabled(rep.playlist));\n\n  if (!enabledPlaylistReps.length) {\n    // if there are no enabled playlists, then they have all been excluded or disabled\n    // by the user through the representations api. In this case, ignore exclusion and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylistReps = sortedPlaylistReps.filter(rep => !Playlist.isDisabled(rep.playlist));\n  } // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n\n\n  const bandwidthPlaylistReps = enabledPlaylistReps.filter(rep => rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth);\n  let highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1]; // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n\n  const bandwidthBestRep = bandwidthPlaylistReps.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0]; // if we're not going to limit renditions by player size, make an early decision.\n\n  if (limitRenditionByPlayerDimensions === false) {\n    const chosenRep = bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n\n    if (chosenRep && chosenRep.playlist) {\n      let type = 'sortedPlaylistReps';\n\n      if (bandwidthBestRep) {\n        type = 'bandwidthBestRep';\n      }\n\n      if (enabledPlaylistReps[0]) {\n        type = 'enabledPlaylistReps';\n      }\n\n      logFn(`choosing ${representationToString(chosenRep)} using ${type} with options`, options);\n      return chosenRep.playlist;\n    }\n\n    logFn('could not choose a playlist with options', options);\n    return null;\n  } // filter out playlists without resolution information\n\n\n  const haveResolution = bandwidthPlaylistReps.filter(rep => rep.width && rep.height); // sort variants by resolution\n\n  stableSort(haveResolution, (left, right) => left.width - right.width); // if we have the exact resolution as the player use it\n\n  const resolutionBestRepList = haveResolution.filter(rep => rep.width === playerWidth && rep.height === playerHeight);\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1]; // ensure that we pick the highest bandwidth variant that have exact resolution\n\n  const resolutionBestRep = resolutionBestRepList.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0];\n  let resolutionPlusOneList;\n  let resolutionPlusOneSmallest;\n  let resolutionPlusOneRep; // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(rep => {\n      if (playerObjectFit === 'cover') {\n        // video will be scaled up to cover the player. We need to\n        // make sure rendition is at least as wide and as high as the\n        // player.\n        return rep.width > playerWidth && rep.height > playerHeight;\n      } // video will be scaled down to fit inside the player soon as\n      // its resolution exceeds player size in at least one dimension.\n\n\n      return rep.width > playerWidth || rep.height > playerHeight;\n    }); // find all the variants have the same smallest resolution\n\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(rep => rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height); // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0];\n  }\n\n  let leastPixelDiffRep; // If this selector proves to be better than others,\n  // resolutionPlusOneRep and resolutionBestRep and all\n  // the code involving them should be removed.\n\n  if (playlistController.leastPixelDiffSelector) {\n    // find the variant that is closest to the player's pixel size\n    const leastPixelDiffList = haveResolution.map(rep => {\n      rep.pixelDiff = Math.abs(rep.width - playerWidth) + Math.abs(rep.height - playerHeight);\n      return rep;\n    }); // get the highest bandwidth, closest resolution playlist\n\n    stableSort(leastPixelDiffList, (left, right) => {\n      // sort by highest bandwidth if pixelDiff is the same\n      if (left.pixelDiff === right.pixelDiff) {\n        return right.bandwidth - left.bandwidth;\n      }\n\n      return left.pixelDiff - right.pixelDiff;\n    });\n    leastPixelDiffRep = leastPixelDiffList[0];\n  } // fallback chain of variants\n\n\n  const chosenRep = leastPixelDiffRep || resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n\n  if (chosenRep && chosenRep.playlist) {\n    let type = 'sortedPlaylistReps';\n\n    if (leastPixelDiffRep) {\n      type = 'leastPixelDiffRep';\n    } else if (resolutionPlusOneRep) {\n      type = 'resolutionPlusOneRep';\n    } else if (resolutionBestRep) {\n      type = 'resolutionBestRep';\n    } else if (bandwidthBestRep) {\n      type = 'bandwidthBestRep';\n    } else if (enabledPlaylistReps[0]) {\n      type = 'enabledPlaylistReps';\n    }\n\n    logFn(`choosing ${representationToString(chosenRep)} using ${type} with options`, options);\n    return chosenRep.playlist;\n  }\n\n  logFn('could not choose a playlist with options', options);\n  return null;\n};\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of VhsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\n\nconst lastBandwidthSelector = function () {\n  let pixelRatio = this.useDevicePixelRatio ? window$1.devicePixelRatio || 1 : 1;\n\n  if (!isNaN(this.customPixelRatio)) {\n    pixelRatio = this.customPixelRatio;\n  }\n\n  return simpleSelector({\n    main: this.playlists.main,\n    bandwidth: this.systemBandwidth,\n    playerWidth: parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10) * pixelRatio,\n    playerHeight: parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10) * pixelRatio,\n    playerObjectFit: this.usePlayerObjectFit ? safeGetComputedStyle(this.tech_.el(), 'objectFit') : '',\n    limitRenditionByPlayerDimensions: this.limitRenditionByPlayerDimensions,\n    playlistController: this.playlistController_\n  });\n};\n/**\n * Chooses the appropriate media playlist based on an\n * exponential-weighted moving average of the bandwidth after\n * filtering for player size.\n *\n * Expects to be called within the context of an instance of VhsHandler\n *\n * @param {number} decay - a number between 0 and 1. Higher values of\n * this parameter will cause previous bandwidth estimates to lose\n * significance more quickly.\n * @return {Function} a function which can be invoked to create a new\n * playlist selector function.\n * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n */\n\nconst movingAverageBandwidthSelector = function (decay) {\n  let average = -1;\n  let lastSystemBandwidth = -1;\n\n  if (decay < 0 || decay > 1) {\n    throw new Error('Moving average bandwidth decay must be between 0 and 1.');\n  }\n\n  return function () {\n    let pixelRatio = this.useDevicePixelRatio ? window$1.devicePixelRatio || 1 : 1;\n\n    if (!isNaN(this.customPixelRatio)) {\n      pixelRatio = this.customPixelRatio;\n    }\n\n    if (average < 0) {\n      average = this.systemBandwidth;\n      lastSystemBandwidth = this.systemBandwidth;\n    } // stop the average value from decaying for every 250ms\n    // when the systemBandwidth is constant\n    // and\n    // stop average from setting to a very low value when the\n    // systemBandwidth becomes 0 in case of chunk cancellation\n\n\n    if (this.systemBandwidth > 0 && this.systemBandwidth !== lastSystemBandwidth) {\n      average = decay * this.systemBandwidth + (1 - decay) * average;\n      lastSystemBandwidth = this.systemBandwidth;\n    }\n\n    return simpleSelector({\n      main: this.playlists.main,\n      bandwidth: average,\n      playerWidth: parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10) * pixelRatio,\n      playerHeight: parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10) * pixelRatio,\n      playerObjectFit: this.usePlayerObjectFit ? safeGetComputedStyle(this.tech_.el(), 'objectFit') : '',\n      limitRenditionByPlayerDimensions: this.limitRenditionByPlayerDimensions,\n      playlistController: this.playlistController_\n    });\n  };\n};\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.main\n *        Object representation of the main manifest\n * @param {number} settings.currentTime\n *        The current time of the player\n * @param {number} settings.bandwidth\n *        Current measured bandwidth\n * @param {number} settings.duration\n *        Duration of the media\n * @param {number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\n\nconst minRebufferMaxBandwidthSelector = function (settings) {\n  const {\n    main,\n    currentTime,\n    bandwidth,\n    duration,\n    segmentDuration,\n    timeUntilRebuffer,\n    currentTimeline,\n    syncController\n  } = settings; // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  const compatiblePlaylists = main.playlists.filter(playlist => !Playlist.isIncompatible(playlist)); // filter out any playlists that have been disabled manually through the representations\n  // api or excluded temporarily due to playback errors.\n\n  let enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);\n\n  if (!enabledPlaylists.length) {\n    // if there are no enabled playlists, then they have all been excluded or disabled\n    // by the user through the representations api. In this case, ignore exclusion and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylists = compatiblePlaylists.filter(playlist => !Playlist.isDisabled(playlist));\n  }\n\n  const bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));\n  const rebufferingEstimates = bandwidthPlaylists.map(playlist => {\n    const syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime); // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n\n    const numRequests = syncPoint ? 1 : 2;\n    const requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    const rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n    return {\n      playlist,\n      rebufferingImpact\n    };\n  });\n  const noRebufferingPlaylists = rebufferingEstimates.filter(estimate => estimate.rebufferingImpact <= 0); // Sort by bandwidth DESC\n\n  stableSort(noRebufferingPlaylists, (a, b) => comparePlaylistBandwidth(b.playlist, a.playlist));\n\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n\n  stableSort(rebufferingEstimates, (a, b) => a.rebufferingImpact - b.rebufferingImpact);\n  return rebufferingEstimates[0] || null;\n};\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of VhsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\n\nconst lowestBitrateCompatibleVariantSelector = function () {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  const playlists = this.playlists.main.playlists.filter(Playlist.isEnabled); // Sort ascending by bitrate\n\n  stableSort(playlists, (a, b) => comparePlaylistBandwidth(a, b)); // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n\n  const playlistsWithVideo = playlists.filter(playlist => !!codecsForPlaylist(this.playlists.main, playlist).video);\n  return playlistsWithVideo[0] || null;\n};\n\n/**\n * Combine all segments into a single Uint8Array\n *\n * @param {Object} segmentObj\n * @return {Uint8Array} concatenated bytes\n * @private\n */\nconst concatSegments = segmentObj => {\n  let offset = 0;\n  let tempBuffer;\n\n  if (segmentObj.bytes) {\n    tempBuffer = new Uint8Array(segmentObj.bytes); // combine the individual segments into one large typed-array\n\n    segmentObj.segments.forEach(segment => {\n      tempBuffer.set(segment, offset);\n      offset += segment.byteLength;\n    });\n  }\n\n  return tempBuffer;\n};\n/**\n * Example:\n * https://host.com/path1/path2/path3/segment.ts?arg1=val1\n * -->\n * path3/segment.ts\n *\n * @param resolvedUri\n * @return {string}\n */\n\nfunction compactSegmentUrlDescription(resolvedUri) {\n  try {\n    return new URL(resolvedUri).pathname.split('/').slice(-2).join('/');\n  } catch (e) {\n    return '';\n  }\n}\n\n/**\n * @file text-tracks.js\n */\n/**\n * Create captions text tracks on video.js if they do not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {Object} tech the video.js tech\n * @param {Object} captionStream the caption stream to create\n * @private\n */\n\nconst createCaptionsTrackIfNotExists = function (inbandTextTracks, tech, captionStream) {\n  if (!inbandTextTracks[captionStream]) {\n    tech.trigger({\n      type: 'usage',\n      name: 'vhs-608'\n    });\n    let instreamId = captionStream; // we need to translate SERVICEn for 708 to how mux.js currently labels them\n\n    if (/^cc708_/.test(captionStream)) {\n      instreamId = 'SERVICE' + captionStream.split('_')[1];\n    }\n\n    const track = tech.textTracks().getTrackById(instreamId);\n\n    if (track) {\n      // Resuse an existing track with a CC# id because this was\n      // very likely created by videojs-contrib-hls from information\n      // in the m3u8 for us to use\n      inbandTextTracks[captionStream] = track;\n    } else {\n      // This section gets called when we have caption services that aren't specified in the manifest.\n      // Manifest level caption services are handled in media-groups.js under CLOSED-CAPTIONS.\n      const captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {};\n      let label = captionStream;\n      let language = captionStream;\n      let def = false;\n      const captionService = captionServices[instreamId];\n\n      if (captionService) {\n        label = captionService.label;\n        language = captionService.language;\n        def = captionService.default;\n      } // Otherwise, create a track with the default `CC#` label and\n      // without a language\n\n\n      inbandTextTracks[captionStream] = tech.addRemoteTextTrack({\n        kind: 'captions',\n        id: instreamId,\n        // TODO: investigate why this doesn't seem to turn the caption on by default\n        default: def,\n        label,\n        language\n      }, false).track;\n    }\n  }\n};\n/**\n * Add caption text track data to a source handler given an array of captions\n *\n * @param {Object}\n *   @param {Object} inbandTextTracks the inband text tracks\n *   @param {number} timestampOffset the timestamp offset of the source buffer\n *   @param {Array} captionArray an array of caption data\n * @private\n */\n\nconst addCaptionData = function ({\n  inbandTextTracks,\n  captionArray,\n  timestampOffset\n}) {\n  if (!captionArray) {\n    return;\n  }\n\n  const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n  captionArray.forEach(caption => {\n    const track = caption.stream; // in CEA 608 captions, video.js/mux.js sends a content array\n    // with positioning data\n\n    if (caption.content) {\n      caption.content.forEach(value => {\n        const cue = new Cue(caption.startTime + timestampOffset, caption.endTime + timestampOffset, value.text);\n        cue.line = value.line;\n        cue.align = 'left';\n        cue.position = value.position;\n        cue.positionAlign = 'line-left';\n        inbandTextTracks[track].addCue(cue);\n      });\n    } else {\n      // otherwise, a text value with combined captions is sent\n      inbandTextTracks[track].addCue(new Cue(caption.startTime + timestampOffset, caption.endTime + timestampOffset, caption.text));\n    }\n  });\n};\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\n\nconst deprecateOldCue = function (cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get() {\n        videojs.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n\n    },\n    value: {\n      get() {\n        videojs.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n\n    },\n    privateData: {\n      get() {\n        videojs.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n\n    }\n  });\n};\n/**\n * Add metadata text track data to a source handler given an array of metadata\n *\n * @param {Object}\n *   @param {Object} inbandTextTracks the inband text tracks\n *   @param {Array} metadataArray an array of meta data\n *   @param {number} timestampOffset the timestamp offset of the source buffer\n *   @param {number} videoDuration the duration of the video\n * @private\n */\n\n\nconst addMetadata = ({\n  inbandTextTracks,\n  metadataArray,\n  timestampOffset,\n  videoDuration\n}) => {\n  if (!metadataArray) {\n    return;\n  }\n\n  const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n  const metadataTrack = inbandTextTracks.metadataTrack_;\n\n  if (!metadataTrack) {\n    return;\n  }\n\n  metadataArray.forEach(metadata => {\n    const time = metadata.cueTime + timestampOffset; // if time isn't a finite number between 0 and Infinity, like NaN,\n    // ignore this bit of metadata.\n    // This likely occurs when you have an non-timed ID3 tag like TIT2,\n    // which is the \"Title/Songname/Content description\" frame\n\n    if (typeof time !== 'number' || window$1.isNaN(time) || time < 0 || !(time < Infinity)) {\n      return;\n    } // If we have no frames, we can't create a cue.\n\n\n    if (!metadata.frames || !metadata.frames.length) {\n      return;\n    }\n\n    metadata.frames.forEach(frame => {\n      const cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n      cue.frame = frame;\n      cue.value = frame;\n      deprecateOldCue(cue);\n      metadataTrack.addCue(cue);\n    });\n  });\n\n  if (!metadataTrack.cues || !metadataTrack.cues.length) {\n    return;\n  } // Updating the metadeta cues so that\n  // the endTime of each cue is the startTime of the next cue\n  // the endTime of last cue is the duration of the video\n\n\n  const cues = metadataTrack.cues;\n  const cuesArray = []; // Create a copy of the TextTrackCueList...\n  // ...disregarding cues with a falsey value\n\n  for (let i = 0; i < cues.length; i++) {\n    if (cues[i]) {\n      cuesArray.push(cues[i]);\n    }\n  } // Group cues by their startTime value\n\n\n  const cuesGroupedByStartTime = cuesArray.reduce((obj, cue) => {\n    const timeSlot = obj[cue.startTime] || [];\n    timeSlot.push(cue);\n    obj[cue.startTime] = timeSlot;\n    return obj;\n  }, {}); // Sort startTimes by ascending order\n\n  const sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort((a, b) => Number(a) - Number(b)); // Map each cue group's endTime to the next group's startTime\n\n  sortedStartTimes.forEach((startTime, idx) => {\n    const cueGroup = cuesGroupedByStartTime[startTime];\n    const finiteDuration = isFinite(videoDuration) ? videoDuration : startTime;\n    const nextTime = Number(sortedStartTimes[idx + 1]) || finiteDuration; // Map each cue's endTime the next group's startTime\n\n    cueGroup.forEach(cue => {\n      cue.endTime = nextTime;\n    });\n  });\n}; // object for mapping daterange attributes\n\nconst dateRangeAttr = {\n  id: 'ID',\n  class: 'CLASS',\n  startDate: 'START-DATE',\n  duration: 'DURATION',\n  endDate: 'END-DATE',\n  endOnNext: 'END-ON-NEXT',\n  plannedDuration: 'PLANNED-DURATION',\n  scte35Out: 'SCTE35-OUT',\n  scte35In: 'SCTE35-IN'\n};\nconst dateRangeKeysToOmit = new Set(['id', 'class', 'startDate', 'duration', 'endDate', 'endOnNext', 'startTime', 'endTime', 'processDateRange']);\n/**\n * Add DateRange metadata text track to a source handler given an array of metadata\n *\n * @param {Object}\n *   @param {Object} inbandTextTracks the inband text tracks\n *   @param {Array} dateRanges parsed media playlist\n * @private\n */\n\nconst addDateRangeMetadata = ({\n  inbandTextTracks,\n  dateRanges\n}) => {\n  const metadataTrack = inbandTextTracks.metadataTrack_;\n\n  if (!metadataTrack) {\n    return;\n  }\n\n  const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n  dateRanges.forEach(dateRange => {\n    // we generate multiple cues for each date range with different attributes\n    for (const key of Object.keys(dateRange)) {\n      if (dateRangeKeysToOmit.has(key)) {\n        continue;\n      }\n\n      const cue = new Cue(dateRange.startTime, dateRange.endTime, '');\n      cue.id = dateRange.id;\n      cue.type = 'com.apple.quicktime.HLS';\n      cue.value = {\n        key: dateRangeAttr[key],\n        data: dateRange[key]\n      };\n\n      if (key === 'scte35Out' || key === 'scte35In') {\n        cue.value.data = new Uint8Array(cue.value.data.match(/[\\da-f]{2}/gi)).buffer;\n      }\n\n      metadataTrack.addCue(cue);\n    }\n\n    dateRange.processDateRange();\n  });\n};\n/**\n * Create metadata text track on video.js if it does not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {string} dispatchType the inband metadata track dispatch type\n * @param {Object} tech the video.js tech\n * @private\n */\n\nconst createMetadataTrackIfNotExists = (inbandTextTracks, dispatchType, tech) => {\n  if (inbandTextTracks.metadataTrack_) {\n    return;\n  }\n\n  inbandTextTracks.metadataTrack_ = tech.addRemoteTextTrack({\n    kind: 'metadata',\n    label: 'Timed Metadata'\n  }, false).track;\n\n  if (!videojs.browser.IS_ANY_SAFARI) {\n    inbandTextTracks.metadataTrack_.inBandMetadataTrackDispatchType = dispatchType;\n  }\n};\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\n\nconst removeCuesFromTrack = function (start, end, track) {\n  let i;\n  let cue;\n\n  if (!track) {\n    return;\n  }\n\n  if (!track.cues) {\n    return;\n  }\n\n  i = track.cues.length;\n\n  while (i--) {\n    cue = track.cues[i]; // Remove any cue within the provided start and end time\n\n    if (cue.startTime >= start && cue.endTime <= end) {\n      track.removeCue(cue);\n    }\n  }\n};\n/**\n * Remove duplicate cues from a track on video.js (a cue is considered a\n * duplicate if it has the same time interval and text as another)\n *\n * @param {Object} track the text track to remove the duplicate cues from\n * @private\n */\n\nconst removeDuplicateCuesFromTrack = function (track) {\n  const cues = track.cues;\n\n  if (!cues) {\n    return;\n  }\n\n  const uniqueCues = {};\n\n  for (let i = cues.length - 1; i >= 0; i--) {\n    const cue = cues[i];\n    const cueKey = `${cue.startTime}-${cue.endTime}-${cue.text}`;\n\n    if (uniqueCues[cueKey]) {\n      track.removeCue(cue);\n    } else {\n      uniqueCues[cueKey] = cue;\n    }\n  }\n};\n\n/**\n * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in\n * front of current time.\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {number} currentTime\n *        The current time\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n * @return {Array}\n *         List of gops considered safe to append over\n */\n\nconst gopsSafeToAlignWith = (buffer, currentTime, mapping) => {\n  if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {\n    return [];\n  } // pts value for current time + 3 seconds to give a bit more wiggle room\n\n\n  const currentTimePts = Math.ceil((currentTime - mapping + 3) * ONE_SECOND_IN_TS);\n  let i;\n\n  for (i = 0; i < buffer.length; i++) {\n    if (buffer[i].pts > currentTimePts) {\n      break;\n    }\n  }\n\n  return buffer.slice(i);\n};\n/**\n * Appends gop information (timing and byteLength) received by the transmuxer for the\n * gops appended in the last call to appendBuffer\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Array} gops\n *        List of new gop information\n * @param {boolean} replace\n *        If true, replace the buffer with the new gop information. If false, append the\n *        new gop information to the buffer in the right location of time.\n * @return {Array}\n *         Updated list of gop information\n */\n\nconst updateGopBuffer = (buffer, gops, replace) => {\n  if (!gops.length) {\n    return buffer;\n  }\n\n  if (replace) {\n    // If we are in safe append mode, then completely overwrite the gop buffer\n    // with the most recent appeneded data. This will make sure that when appending\n    // future segments, we only try to align with gops that are both ahead of current\n    // time and in the last segment appended.\n    return gops.slice();\n  }\n\n  const start = gops[0].pts;\n  let i = 0;\n\n  for (i; i < buffer.length; i++) {\n    if (buffer[i].pts >= start) {\n      break;\n    }\n  }\n\n  return buffer.slice(0, i).concat(gops);\n};\n/**\n * Removes gop information in buffer that overlaps with provided start and end\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Double} start\n *        position to start the remove at\n * @param {Double} end\n *        position to end the remove at\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n */\n\nconst removeGopBuffer = (buffer, start, end, mapping) => {\n  const startPts = Math.ceil((start - mapping) * ONE_SECOND_IN_TS);\n  const endPts = Math.ceil((end - mapping) * ONE_SECOND_IN_TS);\n  const updatedBuffer = buffer.slice();\n  let i = buffer.length;\n\n  while (i--) {\n    if (buffer[i].pts <= endPts) {\n      break;\n    }\n  }\n\n  if (i === -1) {\n    // no removal because end of remove range is before start of buffer\n    return updatedBuffer;\n  }\n\n  let j = i + 1;\n\n  while (j--) {\n    if (buffer[j].pts <= startPts) {\n      break;\n    }\n  } // clamp remove range start to 0 index\n\n\n  j = Math.max(j, 0);\n  updatedBuffer.splice(j, i - j + 1);\n  return updatedBuffer;\n};\n\nconst shallowEqual = function (a, b) {\n  // if both are undefined\n  // or one or the other is undefined\n  // they are not equal\n  if (!a && !b || !a && b || a && !b) {\n    return false;\n  } // they are the same object and thus, equal\n\n\n  if (a === b) {\n    return true;\n  } // sort keys so we can make sure they have\n  // all the same keys later.\n\n\n  const akeys = Object.keys(a).sort();\n  const bkeys = Object.keys(b).sort(); // different number of keys, not equal\n\n  if (akeys.length !== bkeys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < akeys.length; i++) {\n    const key = akeys[i]; // different sorted keys, not equal\n\n    if (key !== bkeys[i]) {\n      return false;\n    } // different values, not equal\n\n\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * The segment loader has no recourse except to fetch a segment in the\n * current playlist and use the internal timestamps in that segment to\n * generate a syncPoint. This function returns a good candidate index\n * for that process.\n *\n * @param {Array} segments - the segments array from a playlist.\n * @return {number} An index of a segment from the playlist to load\n */\n\nconst getSyncSegmentCandidate = function (currentTimeline, segments, targetTime) {\n  segments = segments || [];\n  const timelineSegments = [];\n  let time = 0;\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n\n    if (currentTimeline === segment.timeline) {\n      timelineSegments.push(i);\n      time += segment.duration;\n\n      if (time > targetTime) {\n        return i;\n      }\n    }\n  }\n\n  if (timelineSegments.length === 0) {\n    return 0;\n  } // default to the last timeline segment\n\n\n  return timelineSegments[timelineSegments.length - 1];\n}; // In the event of a quota exceeded error, keep at least one second of back buffer. This\n// number was arbitrarily chosen and may be updated in the future, but seemed reasonable\n// as a start to prevent any potential issues with removing content too close to the\n// playhead.\n\nconst MIN_BACK_BUFFER = 1; // in ms\n\nconst CHECK_BUFFER_DELAY = 500;\n\nconst finite = num => typeof num === 'number' && isFinite(num); // With most content hovering around 30fps, if a segment has a duration less than a half\n// frame at 30fps or one frame at 60fps, the bandwidth and throughput calculations will\n// not accurately reflect the rest of the content.\n\n\nconst MIN_SEGMENT_DURATION_TO_SAVE_STATS = 1 / 60;\nconst illegalMediaSwitch = (loaderType, startingMedia, trackInfo) => {\n  // Although these checks should most likely cover non 'main' types, for now it narrows\n  // the scope of our checks.\n  if (loaderType !== 'main' || !startingMedia || !trackInfo) {\n    return null;\n  }\n\n  if (!trackInfo.hasAudio && !trackInfo.hasVideo) {\n    return 'Neither audio nor video found in segment.';\n  }\n\n  if (startingMedia.hasVideo && !trackInfo.hasVideo) {\n    return 'Only audio found in segment when we expected video.' + ' We can\\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  if (!startingMedia.hasVideo && trackInfo.hasVideo) {\n    return 'Video found in segment when we expected only audio.' + ' We can\\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n\n  return null;\n};\n/**\n * Calculates a time value that is safe to remove from the back buffer without interrupting\n * playback.\n *\n * @param {TimeRange} seekable\n *        The current seekable range\n * @param {number} currentTime\n *        The current time of the player\n * @param {number} targetDuration\n *        The target duration of the current playlist\n * @return {number}\n *         Time that is safe to remove from the back buffer without interrupting playback\n */\n\nconst safeBackBufferTrimTime = (seekable, currentTime, targetDuration) => {\n  // 30 seconds before the playhead provides a safe default for trimming.\n  //\n  // Choosing a reasonable default is particularly important for high bitrate content and\n  // VOD videos/live streams with large windows, as the buffer may end up overfilled and\n  // throw an APPEND_BUFFER_ERR.\n  let trimTime = currentTime - Config.BACK_BUFFER_LENGTH;\n\n  if (seekable.length) {\n    // Some live playlists may have a shorter window of content than the full allowed back\n    // buffer. For these playlists, don't save content that's no longer within the window.\n    trimTime = Math.max(trimTime, seekable.start(0));\n  } // Don't remove within target duration of the current time to avoid the possibility of\n  // removing the GOP currently being played, as removing it can cause playback stalls.\n\n\n  const maxTrimTime = currentTime - targetDuration;\n  return Math.min(maxTrimTime, trimTime);\n};\nconst segmentInfoString = segmentInfo => {\n  const {\n    startOfSegment,\n    duration,\n    segment,\n    part,\n    playlist: {\n      mediaSequence: seq,\n      id,\n      segments = []\n    },\n    mediaIndex: index,\n    partIndex,\n    timeline\n  } = segmentInfo;\n  const segmentLen = segments.length - 1;\n  let selection = 'mediaIndex/partIndex increment';\n\n  if (segmentInfo.getMediaInfoForTime) {\n    selection = `getMediaInfoForTime (${segmentInfo.getMediaInfoForTime})`;\n  } else if (segmentInfo.isSyncRequest) {\n    selection = 'getSyncSegmentCandidate (isSyncRequest)';\n  }\n\n  if (segmentInfo.independent) {\n    selection += ` with independent ${segmentInfo.independent}`;\n  }\n\n  const hasPartIndex = typeof partIndex === 'number';\n  const name = segmentInfo.segment.uri ? 'segment' : 'pre-segment';\n  const zeroBasedPartCount = hasPartIndex ? getKnownPartCount({\n    preloadSegment: segment\n  }) - 1 : 0;\n  return `${name} [${seq + index}/${seq + segmentLen}]` + (hasPartIndex ? ` part [${partIndex}/${zeroBasedPartCount}]` : '') + ` segment start/end [${segment.start} => ${segment.end}]` + (hasPartIndex ? ` part start/end [${part.start} => ${part.end}]` : '') + ` startOfSegment [${startOfSegment}]` + ` duration [${duration}]` + ` timeline [${timeline}]` + ` selected by [${selection}]` + ` playlist [${id}]`;\n};\n\nconst timingInfoPropertyForMedia = mediaType => `${mediaType}TimingInfo`;\n/**\n * Returns the timestamp offset to use for the segment.\n *\n * @param {number} segmentTimeline\n *        The timeline of the segment\n * @param {number} currentTimeline\n *        The timeline currently being followed by the loader\n * @param {number} startOfSegment\n *        The estimated segment start\n * @param {TimeRange[]} buffered\n *        The loader's buffer\n * @param {boolean} overrideCheck\n *        If true, no checks are made to see if the timestamp offset value should be set,\n *        but sets it directly to a value.\n *\n * @return {number|null}\n *         Either a number representing a new timestamp offset, or null if the segment is\n *         part of the same timeline\n */\n\n\nconst timestampOffsetForSegment = ({\n  segmentTimeline,\n  currentTimeline,\n  startOfSegment,\n  buffered,\n  overrideCheck\n}) => {\n  // Check to see if we are crossing a discontinuity to see if we need to set the\n  // timestamp offset on the transmuxer and source buffer.\n  //\n  // Previously, we changed the timestampOffset if the start of this segment was less than\n  // the currently set timestampOffset, but this isn't desirable as it can produce bad\n  // behavior, especially around long running live streams.\n  if (!overrideCheck && segmentTimeline === currentTimeline) {\n    return null;\n  } // When changing renditions, it's possible to request a segment on an older timeline. For\n  // instance, given two renditions with the following:\n  //\n  // #EXTINF:10\n  // segment1\n  // #EXT-X-DISCONTINUITY\n  // #EXTINF:10\n  // segment2\n  // #EXTINF:10\n  // segment3\n  //\n  // And the current player state:\n  //\n  // current time: 8\n  // buffer: 0 => 20\n  //\n  // The next segment on the current rendition would be segment3, filling the buffer from\n  // 20s onwards. However, if a rendition switch happens after segment2 was requested,\n  // then the next segment to be requested will be segment1 from the new rendition in\n  // order to fill time 8 and onwards. Using the buffered end would result in repeated\n  // content (since it would position segment1 of the new rendition starting at 20s). This\n  // case can be identified when the new segment's timeline is a prior value. Instead of\n  // using the buffered end, the startOfSegment can be used, which, hopefully, will be\n  // more accurate to the actual start time of the segment.\n\n\n  if (segmentTimeline < currentTimeline) {\n    return startOfSegment;\n  } // segmentInfo.startOfSegment used to be used as the timestamp offset, however, that\n  // value uses the end of the last segment if it is available. While this value\n  // should often be correct, it's better to rely on the buffered end, as the new\n  // content post discontinuity should line up with the buffered end as if it were\n  // time 0 for the new content.\n\n\n  return buffered.length ? buffered.end(buffered.length - 1) : startOfSegment;\n};\n/**\n * Returns whether or not the loader should wait for a timeline change from the timeline\n * change controller before processing the segment.\n *\n * Primary timing in VHS goes by video. This is different from most media players, as\n * audio is more often used as the primary timing source. For the foreseeable future, VHS\n * will continue to use video as the primary timing source, due to the current logic and\n * expectations built around it.\n\n * Since the timing follows video, in order to maintain sync, the video loader is\n * responsible for setting both audio and video source buffer timestamp offsets.\n *\n * Setting different values for audio and video source buffers could lead to\n * desyncing. The following examples demonstrate some of the situations where this\n * distinction is important. Note that all of these cases involve demuxed content. When\n * content is muxed, the audio and video are packaged together, therefore syncing\n * separate media playlists is not an issue.\n *\n * CASE 1: Audio prepares to load a new timeline before video:\n *\n * Timeline:       0                 1\n * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Audio Loader:                     ^\n * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Video Loader              ^\n *\n * In the above example, the audio loader is preparing to load the 6th segment, the first\n * after a discontinuity, while the video loader is still loading the 5th segment, before\n * the discontinuity.\n *\n * If the audio loader goes ahead and loads and appends the 6th segment before the video\n * loader crosses the discontinuity, then when appended, the 6th audio segment will use\n * the timestamp offset from timeline 0. This will likely lead to desyncing. In addition,\n * the audio loader must provide the audioAppendStart value to trim the content in the\n * transmuxer, and that value relies on the audio timestamp offset. Since the audio\n * timestamp offset is set by the video (main) loader, the audio loader shouldn't load the\n * segment until that value is provided.\n *\n * CASE 2: Video prepares to load a new timeline before audio:\n *\n * Timeline:       0                 1\n * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Audio Loader:             ^\n * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Video Loader                      ^\n *\n * In the above example, the video loader is preparing to load the 6th segment, the first\n * after a discontinuity, while the audio loader is still loading the 5th segment, before\n * the discontinuity.\n *\n * If the video loader goes ahead and loads and appends the 6th segment, then once the\n * segment is loaded and processed, both the video and audio timestamp offsets will be\n * set, since video is used as the primary timing source. This is to ensure content lines\n * up appropriately, as any modifications to the video timing are reflected by audio when\n * the video loader sets the audio and video timestamp offsets to the same value. However,\n * setting the timestamp offset for audio before audio has had a chance to change\n * timelines will likely lead to desyncing, as the audio loader will append segment 5 with\n * a timestamp intended to apply to segments from timeline 1 rather than timeline 0.\n *\n * CASE 3: When seeking, audio prepares to load a new timeline before video\n *\n * Timeline:       0                 1\n * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Audio Loader:           ^\n * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Video Loader            ^\n *\n * In the above example, both audio and video loaders are loading segments from timeline\n * 0, but imagine that the seek originated from timeline 1.\n *\n * When seeking to a new timeline, the timestamp offset will be set based on the expected\n * segment start of the loaded video segment. In order to maintain sync, the audio loader\n * must wait for the video loader to load its segment and update both the audio and video\n * timestamp offsets before it may load and append its own segment. This is the case\n * whether the seek results in a mismatched segment request (e.g., the audio loader\n * chooses to load segment 3 and the video loader chooses to load segment 4) or the\n * loaders choose to load the same segment index from each playlist, as the segments may\n * not be aligned perfectly, even for matching segment indexes.\n *\n * @param {Object} timelinechangeController\n * @param {number} currentTimeline\n *        The timeline currently being followed by the loader\n * @param {number} segmentTimeline\n *        The timeline of the segment being loaded\n * @param {('main'|'audio')} loaderType\n *        The loader type\n * @param {boolean} audioDisabled\n *        Whether the audio is disabled for the loader. This should only be true when the\n *        loader may have muxed audio in its segment, but should not append it, e.g., for\n *        the main loader when an alternate audio playlist is active.\n *\n * @return {boolean}\n *         Whether the loader should wait for a timeline change from the timeline change\n *         controller before processing the segment\n */\n\nconst shouldWaitForTimelineChange = ({\n  timelineChangeController,\n  currentTimeline,\n  segmentTimeline,\n  loaderType,\n  audioDisabled\n}) => {\n  if (currentTimeline === segmentTimeline) {\n    return false;\n  }\n\n  if (loaderType === 'audio') {\n    const lastMainTimelineChange = timelineChangeController.lastTimelineChange({\n      type: 'main'\n    }); // Audio loader should wait if:\n    //\n    // * main hasn't had a timeline change yet (thus has not loaded its first segment)\n    // * main hasn't yet changed to the timeline audio is looking to load\n\n    return !lastMainTimelineChange || lastMainTimelineChange.to !== segmentTimeline;\n  } // The main loader only needs to wait for timeline changes if there's demuxed audio.\n  // Otherwise, there's nothing to wait for, since audio would be muxed into the main\n  // loader's segments (or the content is audio/video only and handled by the main\n  // loader).\n\n\n  if (loaderType === 'main' && audioDisabled) {\n    const pendingAudioTimelineChange = timelineChangeController.pendingTimelineChange({\n      type: 'audio'\n    }); // Main loader should wait for the audio loader if audio is not pending a timeline\n    // change to the current timeline.\n    //\n    // Since the main loader is responsible for setting the timestamp offset for both\n    // audio and video, the main loader must wait for audio to be about to change to its\n    // timeline before setting the offset, otherwise, if audio is behind in loading,\n    // segments from the previous timeline would be adjusted by the new timestamp offset.\n    //\n    // This requirement means that video will not cross a timeline until the audio is\n    // about to cross to it, so that way audio and video will always cross the timeline\n    // together.\n    //\n    // In addition to normal timeline changes, these rules also apply to the start of a\n    // stream (going from a non-existent timeline, -1, to timeline 0). It's important\n    // that these rules apply to the first timeline change because if they did not, it's\n    // possible that the main loader will cross two timelines before the audio loader has\n    // crossed one. Logic may be implemented to handle the startup as a special case, but\n    // it's easier to simply treat all timeline changes the same.\n\n    if (pendingAudioTimelineChange && pendingAudioTimelineChange.to === segmentTimeline) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n};\nconst shouldFixBadTimelineChanges = timelineChangeController => {\n  if (!timelineChangeController) {\n    return false;\n  }\n\n  const pendingAudioTimelineChange = timelineChangeController.pendingTimelineChange({\n    type: 'audio'\n  });\n  const pendingMainTimelineChange = timelineChangeController.pendingTimelineChange({\n    type: 'main'\n  });\n  const hasPendingTimelineChanges = pendingAudioTimelineChange && pendingMainTimelineChange;\n  const differentPendingChanges = hasPendingTimelineChanges && pendingAudioTimelineChange.to !== pendingMainTimelineChange.to;\n  const isNotInitialPendingTimelineChange = hasPendingTimelineChanges && pendingAudioTimelineChange.from !== -1 && pendingMainTimelineChange.from !== -1;\n\n  if (isNotInitialPendingTimelineChange && differentPendingChanges) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Check if the pending audio timeline change is behind the\n * pending main timeline change.\n *\n * @param {SegmentLoader} segmentLoader\n * @return {boolean}\n */\n\nconst isAudioTimelineBehind = segmentLoader => {\n  const pendingAudioTimelineChange = segmentLoader.timelineChangeController_.pendingTimelineChange({\n    type: 'audio'\n  });\n  const pendingMainTimelineChange = segmentLoader.timelineChangeController_.pendingTimelineChange({\n    type: 'main'\n  });\n  const hasPendingTimelineChanges = pendingAudioTimelineChange && pendingMainTimelineChange;\n  return hasPendingTimelineChanges && pendingAudioTimelineChange.to < pendingMainTimelineChange.to;\n};\n/**\n * A method to check if the player is waiting for a timeline change, and fixes\n * certain scenarios where the timelines need to be updated.\n *\n * @param {SegmentLoader} segmentLoader\n */\n\n\nconst checkAndFixTimelines = segmentLoader => {\n  const segmentInfo = segmentLoader.pendingSegment_;\n\n  if (!segmentInfo) {\n    return;\n  }\n\n  const waitingForTimelineChange = shouldWaitForTimelineChange({\n    timelineChangeController: segmentLoader.timelineChangeController_,\n    currentTimeline: segmentLoader.currentTimeline_,\n    segmentTimeline: segmentInfo.timeline,\n    loaderType: segmentLoader.loaderType_,\n    audioDisabled: segmentLoader.audioDisabled_\n  });\n\n  if (waitingForTimelineChange && shouldFixBadTimelineChanges(segmentLoader.timelineChangeController_)) {\n    if (isAudioTimelineBehind(segmentLoader)) {\n      segmentLoader.timelineChangeController_.trigger('audioTimelineBehind');\n      return;\n    }\n\n    segmentLoader.timelineChangeController_.trigger('fixBadTimelineChange');\n  }\n};\n\nconst mediaDuration = timingInfos => {\n  let maxDuration = 0;\n  ['video', 'audio'].forEach(function (type) {\n    const typeTimingInfo = timingInfos[`${type}TimingInfo`];\n\n    if (!typeTimingInfo) {\n      return;\n    }\n\n    const {\n      start,\n      end\n    } = typeTimingInfo;\n    let duration;\n\n    if (typeof start === 'bigint' || typeof end === 'bigint') {\n      duration = window$1.BigInt(end) - window$1.BigInt(start);\n    } else if (typeof start === 'number' && typeof end === 'number') {\n      duration = end - start;\n    }\n\n    if (typeof duration !== 'undefined' && duration > maxDuration) {\n      maxDuration = duration;\n    }\n  }); // convert back to a number if it is lower than MAX_SAFE_INTEGER\n  // as we only need BigInt when we are above that.\n\n  if (typeof maxDuration === 'bigint' && maxDuration < Number.MAX_SAFE_INTEGER) {\n    maxDuration = Number(maxDuration);\n  }\n\n  return maxDuration;\n};\nconst segmentTooLong = ({\n  segmentDuration,\n  maxDuration\n}) => {\n  // 0 duration segments are most likely due to metadata only segments or a lack of\n  // information.\n  if (!segmentDuration) {\n    return false;\n  } // For HLS:\n  //\n  // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1\n  // The EXTINF duration of each Media Segment in the Playlist\n  // file, when rounded to the nearest integer, MUST be less than or equal\n  // to the target duration; longer segments can trigger playback stalls\n  // or other errors.\n  //\n  // For DASH, the mpd-parser uses the largest reported segment duration as the target\n  // duration. Although that reported duration is occasionally approximate (i.e., not\n  // exact), a strict check may report that a segment is too long more often in DASH.\n\n\n  return Math.round(segmentDuration) > maxDuration + TIME_FUDGE_FACTOR;\n};\nconst getTroublesomeSegmentDurationMessage = (segmentInfo, sourceType) => {\n  // Right now we aren't following DASH's timing model exactly, so only perform\n  // this check for HLS content.\n  if (sourceType !== 'hls') {\n    return null;\n  }\n\n  const segmentDuration = mediaDuration({\n    audioTimingInfo: segmentInfo.audioTimingInfo,\n    videoTimingInfo: segmentInfo.videoTimingInfo\n  }); // Don't report if we lack information.\n  //\n  // If the segment has a duration of 0 it is either a lack of information or a\n  // metadata only segment and shouldn't be reported here.\n\n  if (!segmentDuration) {\n    return null;\n  }\n\n  const targetDuration = segmentInfo.playlist.targetDuration;\n  const isSegmentWayTooLong = segmentTooLong({\n    segmentDuration,\n    maxDuration: targetDuration * 2\n  });\n  const isSegmentSlightlyTooLong = segmentTooLong({\n    segmentDuration,\n    maxDuration: targetDuration\n  });\n  const segmentTooLongMessage = `Segment with index ${segmentInfo.mediaIndex} ` + `from playlist ${segmentInfo.playlist.id} ` + `has a duration of ${segmentDuration} ` + `when the reported duration is ${segmentInfo.duration} ` + `and the target duration is ${targetDuration}. ` + 'For HLS content, a duration in excess of the target duration may result in ' + 'playback issues. See the HLS specification section on EXT-X-TARGETDURATION for ' + 'more details: ' + 'https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1';\n\n  if (isSegmentWayTooLong || isSegmentSlightlyTooLong) {\n    return {\n      severity: isSegmentWayTooLong ? 'warn' : 'info',\n      message: segmentTooLongMessage\n    };\n  }\n\n  return null;\n};\n/**\n *\n * @param {Object} options type of segment loader and segment either segmentInfo or simple segment\n * @return a segmentInfo payload for events or errors.\n */\n\nconst segmentInfoPayload = ({\n  type,\n  segment\n}) => {\n  if (!segment) {\n    return;\n  }\n\n  const isEncrypted = Boolean(segment.key || segment.map && segment.map.ke);\n  const isMediaInitialization = Boolean(segment.map && !segment.map.bytes);\n  const start = segment.startOfSegment === undefined ? segment.start : segment.startOfSegment;\n  return {\n    type: type || segment.type,\n    uri: segment.resolvedUri || segment.uri,\n    start,\n    duration: segment.duration,\n    isEncrypted,\n    isMediaInitialization\n  };\n};\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nclass SegmentLoader extends videojs.EventTarget {\n  constructor(settings, options = {}) {\n    super(); // check pre-conditions\n\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    } // public properties\n\n\n    this.bandwidth = settings.bandwidth;\n    this.throughput = {\n      rate: 0,\n      count: 0\n    };\n    this.roundTrip = NaN;\n    this.resetStats_();\n    this.mediaIndex = null;\n    this.partIndex = null; // private settings\n\n    this.hasPlayed_ = settings.hasPlayed;\n    this.currentTime_ = settings.currentTime;\n    this.seekable_ = settings.seekable;\n    this.seeking_ = settings.seeking;\n    this.duration_ = settings.duration;\n    this.mediaSource_ = settings.mediaSource;\n    this.vhs_ = settings.vhs;\n    this.loaderType_ = settings.loaderType;\n    this.currentMediaInfo_ = void 0;\n    this.startingMediaInfo_ = void 0;\n    this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    this.goalBufferLength_ = settings.goalBufferLength;\n    this.sourceType_ = settings.sourceType;\n    this.sourceUpdater_ = settings.sourceUpdater;\n    this.inbandTextTracks_ = settings.inbandTextTracks;\n    this.state_ = 'INIT';\n    this.timelineChangeController_ = settings.timelineChangeController;\n    this.shouldSaveSegmentTimingInfo_ = true;\n    this.parse708captions_ = settings.parse708captions;\n    this.useDtsForTimestampOffset_ = settings.useDtsForTimestampOffset;\n    this.captionServices_ = settings.captionServices;\n    this.exactManifestTimings = settings.exactManifestTimings;\n    this.addMetadataToTextTrack = settings.addMetadataToTextTrack; // private instance variables\n\n    this.checkBufferTimeout_ = null;\n    this.error_ = void 0;\n    this.currentTimeline_ = -1;\n    this.shouldForceTimestampOffsetAfterResync_ = false;\n    this.pendingSegment_ = null;\n    this.xhrOptions_ = null;\n    this.pendingSegments_ = [];\n    this.audioDisabled_ = false;\n    this.isPendingTimestampOffset_ = false; // TODO possibly move gopBuffer and timeMapping info to a separate controller\n\n    this.gopBuffer_ = [];\n    this.timeMapping_ = 0;\n    this.safeAppend_ = false;\n    this.appendInitSegment_ = {\n      audio: true,\n      video: true\n    };\n    this.playlistOfLastInitSegment_ = {\n      audio: null,\n      video: null\n    };\n    this.callQueue_ = []; // If the segment loader prepares to load a segment, but does not have enough\n    // information yet to start the loading process (e.g., if the audio loader wants to\n    // load a segment from the next timeline but the main loader hasn't yet crossed that\n    // timeline), then the load call will be added to the queue until it is ready to be\n    // processed.\n\n    this.loadQueue_ = [];\n    this.metadataQueue_ = {\n      id3: [],\n      caption: []\n    };\n    this.waitingOnRemove_ = false;\n    this.quotaExceededErrorRetryTimeout_ = null; // Fragmented mp4 playback\n\n    this.activeInitSegmentId_ = null;\n    this.initSegments_ = {}; // HLSe playback\n\n    this.cacheEncryptionKeys_ = settings.cacheEncryptionKeys;\n    this.keyCache_ = {};\n    this.decrypter_ = settings.decrypter; // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n\n    this.syncController_ = settings.syncController;\n    this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n    this.transmuxer_ = this.createTransmuxer_();\n\n    this.triggerSyncInfoUpdate_ = () => this.trigger('syncinfoupdate');\n\n    this.syncController_.on('syncinfoupdate', this.triggerSyncInfoUpdate_);\n    this.mediaSource_.addEventListener('sourceopen', () => {\n      if (!this.isEndOfStream_()) {\n        this.ended_ = false;\n      }\n    }); // ...for determining the fetch location\n\n    this.fetchAtBuffer_ = false;\n    this.logger_ = logger(`SegmentLoader[${this.loaderType_}]`);\n    Object.defineProperty(this, 'state', {\n      get() {\n        return this.state_;\n      },\n\n      set(newState) {\n        if (newState !== this.state_) {\n          this.logger_(`${this.state_} -> ${newState}`);\n          this.state_ = newState;\n          this.trigger('statechange');\n        }\n      }\n\n    });\n    this.sourceUpdater_.on('ready', () => {\n      if (this.hasEnoughInfoToAppend_()) {\n        this.processCallQueue_();\n      } else {\n        checkAndFixTimelines(this);\n      }\n    });\n    this.sourceUpdater_.on('codecschange', metadata => {\n      this.trigger(_extends({\n        type: 'codecschange'\n      }, metadata));\n    }); // Only the main loader needs to listen for pending timeline changes, as the main\n    // loader should wait for audio to be ready to change its timeline so that both main\n    // and audio timelines change together. For more details, see the\n    // shouldWaitForTimelineChange function.\n\n    if (this.loaderType_ === 'main') {\n      this.timelineChangeController_.on('pendingtimelinechange', () => {\n        if (this.hasEnoughInfoToAppend_()) {\n          this.processCallQueue_();\n        } else {\n          checkAndFixTimelines(this);\n        }\n      });\n    } // The main loader only listens on pending timeline changes, but the audio loader,\n    // since its loads follow main, needs to listen on timeline changes. For more details,\n    // see the shouldWaitForTimelineChange function.\n\n\n    if (this.loaderType_ === 'audio') {\n      this.timelineChangeController_.on('timelinechange', metadata => {\n        this.trigger(_extends({\n          type: 'timelinechange'\n        }, metadata));\n\n        if (this.hasEnoughInfoToLoad_()) {\n          this.processLoadQueue_();\n        } else {\n          checkAndFixTimelines(this);\n        }\n\n        if (this.hasEnoughInfoToAppend_()) {\n          this.processCallQueue_();\n        } else {\n          checkAndFixTimelines(this);\n        }\n      });\n    }\n  }\n  /**\n   * TODO: Current sync controller consists of many hls-specific strategies\n   * media sequence sync is also hls-specific, and we would like to be protocol-agnostic on this level\n   * this should be a part of the sync-controller and sync controller should expect different strategy list based on the protocol.\n   *\n   * @return {MediaSequenceSync|null}\n   * @private\n   */\n\n\n  get mediaSequenceSync_() {\n    return this.syncController_.getMediaSequenceSync(this.loaderType_);\n  }\n\n  createTransmuxer_() {\n    return segmentTransmuxer.createTransmuxer({\n      remux: false,\n      alignGopsAtEnd: this.safeAppend_,\n      keepOriginalTimestamps: true,\n      parse708captions: this.parse708captions_,\n      captionServices: this.captionServices_\n    });\n  }\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n\n  resetStats_() {\n    this.mediaBytesTransferred = 0;\n    this.mediaRequests = 0;\n    this.mediaRequestsAborted = 0;\n    this.mediaRequestsTimedout = 0;\n    this.mediaRequestsErrored = 0;\n    this.mediaTransferDuration = 0;\n    this.mediaSecondsLoaded = 0;\n    this.mediaAppends = 0;\n  }\n  /**\n   * dispose of the SegmentLoader and reset to the default state\n   */\n\n\n  dispose() {\n    this.trigger('dispose');\n    this.state = 'DISPOSED';\n    this.pause();\n    this.abort_();\n\n    if (this.transmuxer_) {\n      this.transmuxer_.terminate();\n    }\n\n    this.resetStats_();\n\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n    }\n\n    if (this.syncController_ && this.triggerSyncInfoUpdate_) {\n      this.syncController_.off('syncinfoupdate', this.triggerSyncInfoUpdate_);\n    }\n\n    this.off();\n  }\n\n  setAudio(enable) {\n    this.audioDisabled_ = !enable;\n\n    if (enable) {\n      this.appendInitSegment_.audio = true;\n    } else {\n      // remove current track audio if it gets disabled\n      this.sourceUpdater_.removeAudio(0, this.duration_());\n    }\n  }\n  /**\n   * abort anything that is currently doing on with the SegmentLoader\n   * and reset to a default state\n   */\n\n\n  abort() {\n    if (this.state !== 'WAITING') {\n      if (this.pendingSegment_) {\n        this.pendingSegment_ = null;\n      }\n\n      this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);\n      return;\n    }\n\n    this.abort_(); // We aborted the requests we were waiting on, so reset the loader's state to READY\n    // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n    // when the request is aborted. This will prevent the loader from being stuck in the\n    // WAITING state indefinitely.\n\n    this.state = 'READY'; // don't wait for buffer check timeouts to begin fetching the\n    // next segment\n\n    if (!this.paused()) {\n      this.monitorBuffer_();\n    }\n  }\n  /**\n   * abort all pending xhr requests and null any pending segements\n   *\n   * @private\n   */\n\n\n  abort_() {\n    if (this.pendingSegment_ && this.pendingSegment_.abortRequests) {\n      this.pendingSegment_.abortRequests();\n    } // clear out the segment being processed\n\n\n    this.pendingSegment_ = null;\n    this.callQueue_ = [];\n    this.loadQueue_ = [];\n    this.metadataQueue_.id3 = [];\n    this.metadataQueue_.caption = [];\n    this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);\n    this.waitingOnRemove_ = false;\n    window$1.clearTimeout(this.quotaExceededErrorRetryTimeout_);\n    this.quotaExceededErrorRetryTimeout_ = null;\n  }\n\n  checkForAbort_(requestId) {\n    // If the state is APPENDING, then aborts will not modify the state, meaning the first\n    // callback that happens should reset the state to READY so that loading can continue.\n    if (this.state === 'APPENDING' && !this.pendingSegment_) {\n      this.state = 'READY';\n      return true;\n    }\n\n    if (!this.pendingSegment_ || this.pendingSegment_.requestId !== requestId) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * set an error on the segment loader and null out any pending segements\n   *\n   * @param {Error} error the error to set on the SegmentLoader\n   * @return {Error} the error that was set or that is currently set\n   */\n\n\n  error(error) {\n    if (typeof error !== 'undefined') {\n      this.logger_('error occurred:', error);\n      this.error_ = error;\n    }\n\n    this.pendingSegment_ = null;\n    return this.error_;\n  }\n\n  endOfStream() {\n    this.ended_ = true;\n\n    if (this.transmuxer_) {\n      // need to clear out any cached data to prepare for the new segment\n      segmentTransmuxer.reset(this.transmuxer_);\n    }\n\n    this.gopBuffer_.length = 0;\n    this.pause();\n    this.trigger('ended');\n  }\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n\n  buffered_() {\n    const trackInfo = this.getMediaInfo_();\n\n    if (!this.sourceUpdater_ || !trackInfo) {\n      return createTimeRanges();\n    }\n\n    if (this.loaderType_ === 'main') {\n      const {\n        hasAudio,\n        hasVideo,\n        isMuxed\n      } = trackInfo;\n\n      if (hasVideo && hasAudio && !this.audioDisabled_ && !isMuxed) {\n        return this.sourceUpdater_.buffered();\n      }\n\n      if (hasVideo) {\n        return this.sourceUpdater_.videoBuffered();\n      }\n    } // One case that can be ignored for now is audio only with alt audio,\n    // as we don't yet have proper support for that.\n\n\n    return this.sourceUpdater_.audioBuffered();\n  }\n  /**\n   * Gets and sets init segment for the provided map\n   *\n   * @param {Object} map\n   *        The map object representing the init segment to get or set\n   * @param {boolean=} set\n   *        If true, the init segment for the provided map should be saved\n   * @return {Object}\n   *         map object for desired init segment\n   */\n\n\n  initSegmentForMap(map, set = false) {\n    if (!map) {\n      return null;\n    }\n\n    const id = initSegmentId(map);\n    let storedMap = this.initSegments_[id];\n\n    if (set && !storedMap && map.bytes) {\n      this.initSegments_[id] = storedMap = {\n        resolvedUri: map.resolvedUri,\n        byterange: map.byterange,\n        bytes: map.bytes,\n        tracks: map.tracks,\n        timescales: map.timescales\n      };\n    }\n\n    return storedMap || map;\n  }\n  /**\n   * Gets and sets key for the provided key\n   *\n   * @param {Object} key\n   *        The key object representing the key to get or set\n   * @param {boolean=} set\n   *        If true, the key for the provided key should be saved\n   * @return {Object}\n   *         Key object for desired key\n   */\n\n\n  segmentKey(key, set = false) {\n    if (!key) {\n      return null;\n    }\n\n    const id = segmentKeyId(key);\n    let storedKey = this.keyCache_[id]; // TODO: We should use the HTTP Expires header to invalidate our cache per\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-6.2.3\n\n    if (this.cacheEncryptionKeys_ && set && !storedKey && key.bytes) {\n      this.keyCache_[id] = storedKey = {\n        resolvedUri: key.resolvedUri,\n        bytes: key.bytes\n      };\n    }\n\n    const result = {\n      resolvedUri: (storedKey || key).resolvedUri\n    };\n\n    if (storedKey) {\n      result.bytes = storedKey.bytes;\n    }\n\n    return result;\n  }\n  /**\n   * Returns true if all configuration required for loading is present, otherwise false.\n   *\n   * @return {boolean} True if the all configuration is ready for loading\n   * @private\n   */\n\n\n  couldBeginLoading_() {\n    return this.playlist_ && !this.paused();\n  }\n  /**\n   * load a playlist and start to fill the buffer\n   */\n\n\n  load() {\n    // un-pause\n    this.monitorBuffer_(); // if we don't have a playlist yet, keep waiting for one to be\n    // specified\n\n    if (!this.playlist_) {\n      return;\n    } // if all the configuration is ready, initialize and begin loading\n\n\n    if (this.state === 'INIT' && this.couldBeginLoading_()) {\n      return this.init_();\n    } // if we're in the middle of processing a segment already, don't\n    // kick off an additional segment request\n\n\n    if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n      return;\n    }\n\n    this.state = 'READY';\n  }\n  /**\n   * Once all the starting parameters have been specified, begin\n   * operation. This method should only be invoked from the INIT\n   * state.\n   *\n   * @private\n   */\n\n\n  init_() {\n    this.state = 'READY'; // if this is the audio segment loader, and it hasn't been inited before, then any old\n    // audio data from the muxed content should be removed\n\n    this.resetEverything();\n    return this.monitorBuffer_();\n  }\n  /**\n   * set a playlist on the segment loader\n   *\n   * @param {PlaylistLoader} media the playlist to set on the segment loader\n   */\n\n\n  playlist(newPlaylist, options = {}) {\n    if (!newPlaylist) {\n      return;\n    }\n\n    if (this.playlist_ && this.playlist_.endList && newPlaylist.endList && this.playlist_.uri === newPlaylist.uri) {\n      // skip update if both prev and new are vod and have the same URI\n      return;\n    }\n\n    const oldPlaylist = this.playlist_;\n    const segmentInfo = this.pendingSegment_;\n    this.playlist_ = newPlaylist;\n    this.xhrOptions_ = options; // when we haven't started playing yet, the start of a live playlist\n    // is always our zero-time so force a sync update each time the playlist\n    // is refreshed from the server\n    //\n    // Use the INIT state to determine if playback has started, as the playlist sync info\n    // should be fixed once requests begin (as sync points are generated based on sync\n    // info), but not before then.\n\n    if (this.state === 'INIT') {\n      newPlaylist.syncInfo = {\n        mediaSequence: newPlaylist.mediaSequence,\n        time: 0\n      }; // Setting the date time mapping means mapping the program date time (if available)\n      // to time 0 on the player's timeline. The playlist's syncInfo serves a similar\n      // purpose, mapping the initial mediaSequence to time zero. Since the syncInfo can\n      // be updated as the playlist is refreshed before the loader starts loading, the\n      // program date time mapping needs to be updated as well.\n      //\n      // This mapping is only done for the main loader because a program date time should\n      // map equivalently between playlists.\n\n      if (this.loaderType_ === 'main') {\n        this.syncController_.setDateTimeMappingForStart(newPlaylist);\n      }\n    }\n\n    let oldId = null;\n\n    if (oldPlaylist) {\n      if (oldPlaylist.id) {\n        oldId = oldPlaylist.id;\n      } else if (oldPlaylist.uri) {\n        oldId = oldPlaylist.uri;\n      }\n    }\n\n    this.logger_(`playlist update [${oldId} => ${newPlaylist.id || newPlaylist.uri}]`);\n\n    if (this.mediaSequenceSync_) {\n      this.mediaSequenceSync_.update(newPlaylist, this.currentTime_());\n      this.logger_(`Playlist update:\ncurrentTime: ${this.currentTime_()}\nbufferedEnd: ${lastBufferedEnd(this.buffered_())}\n`, this.mediaSequenceSync_.diagnostics);\n    } // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n    // in LIVE, we always want to update with new playlists (including refreshes)\n\n\n    this.trigger('syncinfoupdate'); // if we were unpaused but waiting for a playlist, start\n    // buffering now\n\n    if (this.state === 'INIT' && this.couldBeginLoading_()) {\n      return this.init_();\n    }\n\n    if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n      if (this.mediaIndex !== null) {\n        // we must reset/resync the segment loader when we switch renditions and\n        // the segment loader is already synced to the previous rendition\n        // We only want to reset the loader here for LLHLS playback, as resetLoader sets fetchAtBuffer_\n        // to false, resulting in fetching segments at currentTime and causing repeated\n        // same-segment requests on playlist change. This erroneously drives up the playback watcher\n        // stalled segment count, as re-requesting segments at the currentTime or browser cached segments\n        // will not change the buffer.\n        // Reference for LLHLS fixes: https://github.com/videojs/http-streaming/pull/1201\n        const isLLHLS = !newPlaylist.endList && typeof newPlaylist.partTargetDuration === 'number';\n\n        if (isLLHLS) {\n          this.resetLoader();\n        } else {\n          this.resyncLoader();\n        }\n      }\n\n      this.currentMediaInfo_ = void 0;\n      this.trigger('playlistupdate'); // the rest of this function depends on `oldPlaylist` being defined\n\n      return;\n    } // we reloaded the same playlist so we are in a live scenario\n    // and we will likely need to adjust the mediaIndex\n\n\n    const mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n    this.logger_(`live window shift [${mediaSequenceDiff}]`); // update the mediaIndex on the SegmentLoader\n    // this is important because we can abort a request and this value must be\n    // equal to the last appended mediaIndex\n\n    if (this.mediaIndex !== null) {\n      this.mediaIndex -= mediaSequenceDiff; // this can happen if we are going to load the first segment, but get a playlist\n      // update during that. mediaIndex would go from 0 to -1 if mediaSequence in the\n      // new playlist was incremented by 1.\n\n      if (this.mediaIndex < 0) {\n        this.mediaIndex = null;\n        this.partIndex = null;\n      } else {\n        const segment = this.playlist_.segments[this.mediaIndex]; // partIndex should remain the same for the same segment\n        // unless parts fell off of the playlist for this segment.\n        // In that case we need to reset partIndex and resync\n\n        if (this.partIndex && (!segment.parts || !segment.parts.length || !segment.parts[this.partIndex])) {\n          const mediaIndex = this.mediaIndex;\n          this.logger_(`currently processing part (index ${this.partIndex}) no longer exists.`);\n          this.resetLoader(); // We want to throw away the partIndex and the data associated with it,\n          // as the part was dropped from our current playlists segment.\n          // The mediaIndex will still be valid so keep that around.\n\n          this.mediaIndex = mediaIndex;\n        }\n      }\n    } // update the mediaIndex on the SegmentInfo object\n    // this is important because we will update this.mediaIndex with this value\n    // in `handleAppendsDone_` after the segment has been successfully appended\n\n\n    if (segmentInfo) {\n      segmentInfo.mediaIndex -= mediaSequenceDiff;\n\n      if (segmentInfo.mediaIndex < 0) {\n        segmentInfo.mediaIndex = null;\n        segmentInfo.partIndex = null;\n      } else {\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n\n        if (segmentInfo.partIndex >= 0 && segmentInfo.segment.parts) {\n          segmentInfo.part = segmentInfo.segment.parts[segmentInfo.partIndex];\n        }\n      }\n    }\n\n    this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n  }\n  /**\n   * Prevent the loader from fetching additional segments. If there\n   * is a segment request outstanding, it will finish processing\n   * before the loader halts. A segment loader can be unpaused by\n   * calling load().\n   */\n\n\n  pause() {\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n      this.checkBufferTimeout_ = null;\n    }\n  }\n  /**\n   * Returns whether the segment loader is fetching additional\n   * segments when given the opportunity. This property can be\n   * modified through calls to pause() and load().\n   */\n\n\n  paused() {\n    return this.checkBufferTimeout_ === null;\n  }\n  /**\n   * Delete all the buffered data and reset the SegmentLoader\n   *\n   * @param {Function} [done] an optional callback to be executed when the remove\n   * operation is complete\n   */\n\n\n  resetEverything(done) {\n    this.ended_ = false;\n    this.activeInitSegmentId_ = null;\n    this.appendInitSegment_ = {\n      audio: true,\n      video: true\n    };\n    this.resetLoader(); // remove from 0, the earliest point, to Infinity, to signify removal of everything.\n    // VTT Segment Loader doesn't need to do anything but in the regular SegmentLoader,\n    // we then clamp the value to duration if necessary.\n\n    this.remove(0, Infinity, done); // clears fmp4 captions\n\n    if (this.transmuxer_) {\n      this.transmuxer_.postMessage({\n        action: 'clearAllMp4Captions'\n      }); // reset the cache in the transmuxer\n\n      this.transmuxer_.postMessage({\n        action: 'reset'\n      });\n    }\n  }\n  /**\n   * Force the SegmentLoader to resync and start loading around the currentTime instead\n   * of starting at the end of the buffer\n   *\n   * Useful for fast quality changes\n   */\n\n\n  resetLoader() {\n    this.fetchAtBuffer_ = false;\n\n    if (this.mediaSequenceSync_) {\n      this.mediaSequenceSync_.resetAppendedStatus();\n    }\n\n    this.resyncLoader();\n  }\n  /**\n   * Force the SegmentLoader to restart synchronization and make a conservative guess\n   * before returning to the simple walk-forward method\n   */\n\n\n  resyncLoader() {\n    if (this.transmuxer_) {\n      // need to clear out any cached data to prepare for the new segment\n      segmentTransmuxer.reset(this.transmuxer_);\n    }\n\n    this.mediaIndex = null;\n    this.partIndex = null;\n    this.syncPoint_ = null;\n    this.isPendingTimestampOffset_ = false; // this is mainly to sync timing-info when switching between renditions with and without timestamp-rollover,\n    // so we don't want it for DASH or fragmented mp4 segments.\n\n    const isFmp4 = this.currentMediaInfo_ && this.currentMediaInfo_.isFmp4;\n    const isHlsTs = this.sourceType_ === 'hls' && !isFmp4;\n\n    if (isHlsTs) {\n      this.shouldForceTimestampOffsetAfterResync_ = true;\n    }\n\n    this.callQueue_ = [];\n    this.loadQueue_ = [];\n    this.metadataQueue_.id3 = [];\n    this.metadataQueue_.caption = [];\n    this.abort();\n\n    if (this.transmuxer_) {\n      this.transmuxer_.postMessage({\n        action: 'clearParsedMp4Captions'\n      });\n    }\n  }\n  /**\n   * Remove any data in the source buffer between start and end times\n   *\n   * @param {number} start - the start time of the region to remove from the buffer\n   * @param {number} end - the end time of the region to remove from the buffer\n   * @param {Function} [done] - an optional callback to be executed when the remove\n   * @param {boolean} force - force all remove operations to happen\n   * operation is complete\n   */\n\n\n  remove(start, end, done = () => {}, force = false) {\n    // clamp end to duration if we need to remove everything.\n    // This is due to a browser bug that causes issues if we remove to Infinity.\n    // videojs/videojs-contrib-hls#1225\n    if (end === Infinity) {\n      end = this.duration_();\n    } // skip removes that would throw an error\n    // commonly happens during a rendition switch at the start of a video\n    // from start 0 to end 0\n\n\n    if (end <= start) {\n      this.logger_('skipping remove because end ${end} is <= start ${start}');\n      return;\n    }\n\n    if (!this.sourceUpdater_ || !this.getMediaInfo_()) {\n      this.logger_('skipping remove because no source updater or starting media info'); // nothing to remove if we haven't processed any media\n\n      return;\n    } // set it to one to complete this function's removes\n\n\n    let removesRemaining = 1;\n\n    const removeFinished = () => {\n      removesRemaining--;\n\n      if (removesRemaining === 0) {\n        done();\n      }\n    };\n\n    if (force || !this.audioDisabled_) {\n      removesRemaining++;\n      this.sourceUpdater_.removeAudio(start, end, removeFinished);\n    } // While it would be better to only remove video if the main loader has video, this\n    // should be safe with audio only as removeVideo will call back even if there's no\n    // video buffer.\n    //\n    // In theory we can check to see if there's video before calling the remove, but in\n    // the event that we're switching between renditions and from video to audio only\n    // (when we add support for that), we may need to clear the video contents despite\n    // what the new media will contain.\n\n\n    if (force || this.loaderType_ === 'main') {\n      this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);\n      removesRemaining++;\n      this.sourceUpdater_.removeVideo(start, end, removeFinished);\n    } // remove any captions and ID3 tags\n\n\n    for (const track in this.inbandTextTracks_) {\n      removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);\n    }\n\n    removeCuesFromTrack(start, end, this.segmentMetadataTrack_); // finished this function's removes\n\n    removeFinished();\n  }\n  /**\n   * (re-)schedule monitorBufferTick_ to run as soon as possible\n   *\n   * @private\n   */\n\n\n  monitorBuffer_() {\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n    }\n\n    this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), 1);\n  }\n  /**\n   * As long as the SegmentLoader is in the READY state, periodically\n   * invoke fillBuffer_().\n   *\n   * @private\n   */\n\n\n  monitorBufferTick_() {\n    if (this.state === 'READY') {\n      this.fillBuffer_();\n    }\n\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n    }\n\n    this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n  }\n  /**\n   * fill the buffer with segements unless the sourceBuffers are\n   * currently updating\n   *\n   * Note: this function should only ever be called by monitorBuffer_\n   * and never directly\n   *\n   * @private\n   */\n\n\n  fillBuffer_() {\n    // TODO since the source buffer maintains a queue, and we shouldn't call this function\n    // except when we're ready for the next segment, this check can most likely be removed\n    if (this.sourceUpdater_.updating()) {\n      return;\n    } // see if we need to begin loading immediately\n\n\n    const segmentInfo = this.chooseNextRequest_();\n\n    if (!segmentInfo) {\n      return;\n    }\n\n    const metadata = {\n      segmentInfo: segmentInfoPayload({\n        type: this.loaderType_,\n        segment: segmentInfo\n      })\n    };\n    this.trigger({\n      type: 'segmentselected',\n      metadata\n    });\n\n    if (typeof segmentInfo.timestampOffset === 'number') {\n      this.isPendingTimestampOffset_ = false;\n      this.timelineChangeController_.pendingTimelineChange({\n        type: this.loaderType_,\n        from: this.currentTimeline_,\n        to: segmentInfo.timeline\n      });\n    }\n\n    this.loadSegment_(segmentInfo);\n  }\n  /**\n   * Determines if we should call endOfStream on the media source based\n   * on the state of the buffer or if appened segment was the final\n   * segment in the playlist.\n   *\n   * @param {number} [mediaIndex] the media index of segment we last appended\n   * @param {Object} [playlist] a media playlist object\n   * @return {boolean} do we need to call endOfStream on the MediaSource\n   */\n\n\n  isEndOfStream_(mediaIndex = this.mediaIndex, playlist = this.playlist_, partIndex = this.partIndex) {\n    if (!playlist || !this.mediaSource_) {\n      return false;\n    }\n\n    const segment = typeof mediaIndex === 'number' && playlist.segments[mediaIndex]; // mediaIndex is zero based but length is 1 based\n\n    const appendedLastSegment = mediaIndex + 1 === playlist.segments.length; // true if there are no parts, or this is the last part.\n\n    const appendedLastPart = !segment || !segment.parts || partIndex + 1 === segment.parts.length; // if we've buffered to the end of the video, we need to call endOfStream\n    // so that MediaSources can trigger the `ended` event when it runs out of\n    // buffered data instead of waiting for me\n\n    return playlist.endList && this.mediaSource_.readyState === 'open' && appendedLastSegment && appendedLastPart;\n  }\n  /**\n   * Determines what request should be made given current segment loader state.\n   *\n   * @return {Object} a request object that describes the segment/part to load\n   */\n\n\n  chooseNextRequest_() {\n    const buffered = this.buffered_();\n    const bufferedEnd = lastBufferedEnd(buffered) || 0;\n    const bufferedTime = timeAheadOf(buffered, this.currentTime_());\n    const preloaded = !this.hasPlayed_() && bufferedTime >= 1;\n    const haveEnoughBuffer = bufferedTime >= this.goalBufferLength_();\n    const segments = this.playlist_.segments; // return no segment if:\n    // 1. we don't have segments\n    // 2. The video has not yet played and we already downloaded a segment\n    // 3. we already have enough buffered time\n\n    if (!segments.length || preloaded || haveEnoughBuffer) {\n      return null;\n    }\n\n    this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_(), this.loaderType_);\n    const next = {\n      partIndex: null,\n      mediaIndex: null,\n      startOfSegment: null,\n      playlist: this.playlist_,\n      isSyncRequest: Boolean(!this.syncPoint_)\n    };\n\n    if (next.isSyncRequest) {\n      next.mediaIndex = getSyncSegmentCandidate(this.currentTimeline_, segments, bufferedEnd);\n      this.logger_(`choose next request. Can not find sync point. Fallback to media Index: ${next.mediaIndex}`);\n    } else if (this.mediaIndex !== null) {\n      const segment = segments[this.mediaIndex];\n      const partIndex = typeof this.partIndex === 'number' ? this.partIndex : -1;\n      next.startOfSegment = segment.end ? segment.end : bufferedEnd;\n\n      if (segment.parts && segment.parts[partIndex + 1]) {\n        next.mediaIndex = this.mediaIndex;\n        next.partIndex = partIndex + 1;\n      } else {\n        next.mediaIndex = this.mediaIndex + 1;\n      }\n    } else {\n      let segmentIndex;\n      let partIndex;\n      let startTime;\n      const targetTime = this.fetchAtBuffer_ ? bufferedEnd : this.currentTime_();\n\n      if (this.mediaSequenceSync_) {\n        this.logger_(`chooseNextRequest_ request after Quality Switch:\nFor TargetTime: ${targetTime}.\nCurrentTime: ${this.currentTime_()}\nBufferedEnd: ${bufferedEnd}\nFetch At Buffer: ${this.fetchAtBuffer_}\n`, this.mediaSequenceSync_.diagnostics);\n      }\n\n      if (this.mediaSequenceSync_ && this.mediaSequenceSync_.isReliable) {\n        const syncInfo = this.getSyncInfoFromMediaSequenceSync_(targetTime);\n\n        if (!syncInfo) {\n          const message = 'No sync info found while using media sequence sync';\n          this.error({\n            message,\n            metadata: {\n              errorType: videojs.Error.StreamingFailedToSelectNextSegment,\n              error: new Error(message)\n            }\n          });\n          this.logger_('chooseNextRequest_ - no sync info found using media sequence sync'); // no match\n\n          return null;\n        }\n\n        this.logger_(`chooseNextRequest_ mediaSequence syncInfo (${syncInfo.start} --> ${syncInfo.end})`);\n        segmentIndex = syncInfo.segmentIndex;\n        partIndex = syncInfo.partIndex;\n        startTime = syncInfo.start;\n      } else {\n        this.logger_('chooseNextRequest_ - fallback to a regular segment selection algorithm, based on a syncPoint.'); // fallback\n\n        const mediaInfoForTime = Playlist.getMediaInfoForTime({\n          exactManifestTimings: this.exactManifestTimings,\n          playlist: this.playlist_,\n          currentTime: targetTime,\n          startingPartIndex: this.syncPoint_.partIndex,\n          startingSegmentIndex: this.syncPoint_.segmentIndex,\n          startTime: this.syncPoint_.time\n        });\n        segmentIndex = mediaInfoForTime.segmentIndex;\n        partIndex = mediaInfoForTime.partIndex;\n        startTime = mediaInfoForTime.startTime;\n      }\n\n      next.getMediaInfoForTime = this.fetchAtBuffer_ ? `bufferedEnd ${targetTime}` : `currentTime ${targetTime}`;\n      next.mediaIndex = segmentIndex;\n      next.startOfSegment = startTime;\n      next.partIndex = partIndex;\n      this.logger_(`choose next request. Playlist switched and we have a sync point. Media Index: ${next.mediaIndex} `);\n    }\n\n    const nextSegment = segments[next.mediaIndex];\n    let nextPart = nextSegment && typeof next.partIndex === 'number' && nextSegment.parts && nextSegment.parts[next.partIndex]; // if the next segment index is invalid or\n    // the next partIndex is invalid do not choose a next segment.\n\n    if (!nextSegment || typeof next.partIndex === 'number' && !nextPart) {\n      return null;\n    } // if the next segment has parts, and we don't have a partIndex.\n    // Set partIndex to 0\n\n\n    if (typeof next.partIndex !== 'number' && nextSegment.parts) {\n      next.partIndex = 0;\n      nextPart = nextSegment.parts[0];\n    } // independentSegments applies to every segment in a playlist. If independentSegments appears in a main playlist,\n    // it applies to each segment in each media playlist.\n    // https://datatracker.ietf.org/doc/html/draft-pantos-http-live-streaming-23#section-4.3.5.1\n\n\n    const hasIndependentSegments = this.vhs_.playlists && this.vhs_.playlists.main && this.vhs_.playlists.main.independentSegments || this.playlist_.independentSegments; // if we have no buffered data then we need to make sure\n    // that the next part we append is \"independent\" if possible.\n    // So we check if the previous part is independent, and request\n    // it if it is.\n\n    if (!bufferedTime && nextPart && !hasIndependentSegments && !nextPart.independent) {\n      if (next.partIndex === 0) {\n        const lastSegment = segments[next.mediaIndex - 1];\n        const lastSegmentLastPart = lastSegment.parts && lastSegment.parts.length && lastSegment.parts[lastSegment.parts.length - 1];\n\n        if (lastSegmentLastPart && lastSegmentLastPart.independent) {\n          next.mediaIndex -= 1;\n          next.partIndex = lastSegment.parts.length - 1;\n          next.independent = 'previous segment';\n        }\n      } else if (nextSegment.parts[next.partIndex - 1].independent) {\n        next.partIndex -= 1;\n        next.independent = 'previous part';\n      }\n    }\n\n    const ended = this.mediaSource_ && this.mediaSource_.readyState === 'ended'; // do not choose a next segment if all of the following:\n    // 1. this is the last segment in the playlist\n    // 2. end of stream has been called on the media source already\n    // 3. the player is not seeking\n\n    if (next.mediaIndex >= segments.length - 1 && ended && !this.seeking_()) {\n      return null;\n    }\n\n    if (this.shouldForceTimestampOffsetAfterResync_) {\n      this.shouldForceTimestampOffsetAfterResync_ = false;\n      next.forceTimestampOffset = true;\n      this.logger_('choose next request. Force timestamp offset after loader resync');\n    }\n\n    return this.generateSegmentInfo_(next);\n  }\n\n  getSyncInfoFromMediaSequenceSync_(targetTime) {\n    if (!this.mediaSequenceSync_) {\n      return null;\n    } // we should pull the target time to the least available time if we drop out of sync for any reason\n\n\n    const finalTargetTime = Math.max(targetTime, this.mediaSequenceSync_.start);\n\n    if (targetTime !== finalTargetTime) {\n      this.logger_(`getSyncInfoFromMediaSequenceSync_. Pulled target time from ${targetTime} to ${finalTargetTime}`);\n    }\n\n    const mediaSequenceSyncInfo = this.mediaSequenceSync_.getSyncInfoForTime(finalTargetTime);\n\n    if (!mediaSequenceSyncInfo) {\n      // no match at all\n      return null;\n    }\n\n    if (!mediaSequenceSyncInfo.isAppended) {\n      // has a perfect match\n      return mediaSequenceSyncInfo;\n    } // has match, but segment was already appended.\n    // attempt to auto-advance to the nearest next segment:\n\n\n    const nextMediaSequenceSyncInfo = this.mediaSequenceSync_.getSyncInfoForTime(mediaSequenceSyncInfo.end);\n\n    if (!nextMediaSequenceSyncInfo) {\n      // no match at all\n      return null;\n    }\n\n    if (nextMediaSequenceSyncInfo.isAppended) {\n      this.logger_('getSyncInfoFromMediaSequenceSync_: We encounter unexpected scenario where next media sequence sync info is also appended!');\n    } // got match with the nearest next segment\n\n\n    return nextMediaSequenceSyncInfo;\n  }\n\n  generateSegmentInfo_(options) {\n    const {\n      independent,\n      playlist,\n      mediaIndex,\n      startOfSegment,\n      isSyncRequest,\n      partIndex,\n      forceTimestampOffset,\n      getMediaInfoForTime\n    } = options;\n    const segment = playlist.segments[mediaIndex];\n    const part = typeof partIndex === 'number' && segment.parts[partIndex];\n    const segmentInfo = {\n      requestId: 'segment-loader-' + Math.random(),\n      // resolve the segment URL relative to the playlist\n      uri: part && part.resolvedUri || segment.resolvedUri,\n      // the segment's mediaIndex at the time it was requested\n      mediaIndex,\n      partIndex: part ? partIndex : null,\n      // whether or not to update the SegmentLoader's state with this\n      // segment's mediaIndex\n      isSyncRequest,\n      startOfSegment,\n      // the segment's playlist\n      playlist,\n      // unencrypted bytes of the segment\n      bytes: null,\n      // when a key is defined for this segment, the encrypted bytes\n      encryptedBytes: null,\n      // The target timestampOffset for this segment when we append it\n      // to the source buffer\n      timestampOffset: null,\n      // The timeline that the segment is in\n      timeline: segment.timeline,\n      // The expected duration of the segment in seconds\n      duration: part && part.duration || segment.duration,\n      // retain the segment in case the playlist updates while doing an async process\n      segment,\n      part,\n      byteLength: 0,\n      transmuxer: this.transmuxer_,\n      // type of getMediaInfoForTime that was used to get this segment\n      getMediaInfoForTime,\n      independent\n    };\n    const overrideCheck = typeof forceTimestampOffset !== 'undefined' ? forceTimestampOffset : this.isPendingTimestampOffset_;\n    segmentInfo.timestampOffset = this.timestampOffsetForSegment_({\n      segmentTimeline: segment.timeline,\n      currentTimeline: this.currentTimeline_,\n      startOfSegment,\n      buffered: this.buffered_(),\n      overrideCheck\n    });\n    const audioBufferedEnd = lastBufferedEnd(this.sourceUpdater_.audioBuffered());\n\n    if (typeof audioBufferedEnd === 'number') {\n      // since the transmuxer is using the actual timing values, but the buffer is\n      // adjusted by the timestamp offset, we must adjust the value here\n      segmentInfo.audioAppendStart = audioBufferedEnd - this.sourceUpdater_.audioTimestampOffset();\n    }\n\n    if (this.sourceUpdater_.videoBuffered().length) {\n      segmentInfo.gopsToAlignWith = gopsSafeToAlignWith(this.gopBuffer_, // since the transmuxer is using the actual timing values, but the time is\n      // adjusted by the timestmap offset, we must adjust the value here\n      this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_);\n    }\n\n    return segmentInfo;\n  } // get the timestampoffset for a segment,\n  // added so that vtt segment loader can override and prevent\n  // adding timestamp offsets.\n\n\n  timestampOffsetForSegment_(options) {\n    return timestampOffsetForSegment(options);\n  }\n  /**\n   * Determines if the network has enough bandwidth to complete the current segment\n   * request in a timely manner. If not, the request will be aborted early and bandwidth\n   * updated to trigger a playlist switch.\n   *\n   * @param {Object} stats\n   *        Object containing stats about the request timing and size\n   * @private\n   */\n\n\n  earlyAbortWhenNeeded_(stats) {\n    if (this.vhs_.tech_.paused() || // Don't abort if the current playlist is on the lowestEnabledRendition\n    // TODO: Replace using timeout with a boolean indicating whether this playlist is\n    //       the lowestEnabledRendition.\n    !this.xhrOptions_.timeout || // Don't abort if we have no bandwidth information to estimate segment sizes\n    !this.playlist_.attributes.BANDWIDTH) {\n      return;\n    } // Wait at least 1 second since the first byte of data has been received before\n    // using the calculated bandwidth from the progress event to allow the bitrate\n    // to stabilize\n\n\n    if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n      return;\n    }\n\n    const currentTime = this.currentTime_();\n    const measuredBandwidth = stats.bandwidth;\n    const segmentDuration = this.pendingSegment_.duration;\n    const requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived); // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n    // if we are only left with less than 1 second when the request completes.\n    // A negative timeUntilRebuffering indicates we are already rebuffering\n\n    const timeUntilRebuffer$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.vhs_.tech_.playbackRate()) - 1; // Only consider aborting early if the estimated time to finish the download\n    // is larger than the estimated time until the player runs out of forward buffer\n\n    if (requestTimeRemaining <= timeUntilRebuffer$1) {\n      return;\n    }\n\n    const switchCandidate = minRebufferMaxBandwidthSelector({\n      main: this.vhs_.playlists.main,\n      currentTime,\n      bandwidth: measuredBandwidth,\n      duration: this.duration_(),\n      segmentDuration,\n      timeUntilRebuffer: timeUntilRebuffer$1,\n      currentTimeline: this.currentTimeline_,\n      syncController: this.syncController_\n    });\n\n    if (!switchCandidate) {\n      return;\n    }\n\n    const rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$1;\n    const timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n    let minimumTimeSaving = 0.5; // If we are already rebuffering, increase the amount of variance we add to the\n    // potential round trip time of the new request so that we are not too aggressive\n    // with switching to a playlist that might save us a fraction of a second.\n\n    if (timeUntilRebuffer$1 <= TIME_FUDGE_FACTOR) {\n      minimumTimeSaving = 1;\n    }\n\n    if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n      return;\n    } // set the bandwidth to that of the desired playlist being sure to scale by\n    // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n    // don't trigger a bandwidthupdate as the bandwidth is artifial\n\n\n    this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;\n    this.trigger('earlyabort');\n  }\n\n  handleAbort_(segmentInfo) {\n    this.logger_(`Aborting ${segmentInfoString(segmentInfo)}`);\n    this.mediaRequestsAborted += 1;\n  }\n  /**\n   * XHR `progress` event handler\n   *\n   * @param {Event}\n   *        The XHR `progress` event\n   * @param {Object} simpleSegment\n   *        A simplified segment object copy\n   * @private\n   */\n\n\n  handleProgress_(event, simpleSegment) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n\n    this.trigger('progress');\n  }\n\n  handleTrackInfo_(simpleSegment, trackInfo) {\n    const {\n      hasAudio,\n      hasVideo\n    } = trackInfo;\n    const metadata = {\n      segmentInfo: segmentInfoPayload({\n        type: this.loaderType_,\n        segment: simpleSegment\n      }),\n      trackInfo: {\n        hasAudio,\n        hasVideo\n      }\n    };\n    this.trigger({\n      type: 'segmenttransmuxingtrackinfoavailable',\n      metadata\n    });\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n\n    if (this.checkForIllegalMediaSwitch(trackInfo)) {\n      return;\n    }\n\n    trackInfo = trackInfo || {}; // When we have track info, determine what media types this loader is dealing with.\n    // Guard against cases where we're not getting track info at all until we are\n    // certain that all streams will provide it.\n\n    if (!shallowEqual(this.currentMediaInfo_, trackInfo)) {\n      this.appendInitSegment_ = {\n        audio: true,\n        video: true\n      };\n      this.startingMediaInfo_ = trackInfo;\n      this.currentMediaInfo_ = trackInfo;\n      this.logger_('trackinfo update', trackInfo);\n      this.trigger('trackinfo');\n    } // trackinfo may cause an abort if the trackinfo\n    // causes a codec change to an unsupported codec.\n\n\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    } // set trackinfo on the pending segment so that\n    // it can append.\n\n\n    this.pendingSegment_.trackInfo = trackInfo; // check if any calls were waiting on the track info\n\n    if (this.hasEnoughInfoToAppend_()) {\n      this.processCallQueue_();\n    } else {\n      checkAndFixTimelines(this);\n    }\n  }\n\n  handleTimingInfo_(simpleSegment, mediaType, timeType, time) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n\n    const segmentInfo = this.pendingSegment_;\n    const timingInfoProperty = timingInfoPropertyForMedia(mediaType);\n    segmentInfo[timingInfoProperty] = segmentInfo[timingInfoProperty] || {};\n    segmentInfo[timingInfoProperty][timeType] = time;\n    this.logger_(`timinginfo: ${mediaType} - ${timeType} - ${time}`); // check if any calls were waiting on the timing info\n\n    if (this.hasEnoughInfoToAppend_()) {\n      this.processCallQueue_();\n    } else {\n      checkAndFixTimelines(this);\n    }\n  }\n\n  handleCaptions_(simpleSegment, captionData) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    } // This could only happen with fmp4 segments, but\n    // should still not happen in general\n\n\n    if (captionData.length === 0) {\n      this.logger_('SegmentLoader received no captions from a caption event');\n      return;\n    }\n\n    const segmentInfo = this.pendingSegment_; // Wait until we have some video data so that caption timing\n    // can be adjusted by the timestamp offset\n\n    if (!segmentInfo.hasAppendedData_) {\n      this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, simpleSegment, captionData));\n      return;\n    }\n\n    const timestampOffset = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();\n    const captionTracks = {}; // get total start/end and captions for each track/stream\n\n    captionData.forEach(caption => {\n      // caption.stream is actually a track name...\n      // set to the existing values in tracks or default values\n      captionTracks[caption.stream] = captionTracks[caption.stream] || {\n        // Infinity, as any other value will be less than this\n        startTime: Infinity,\n        captions: [],\n        // 0 as an other value will be more than this\n        endTime: 0\n      };\n      const captionTrack = captionTracks[caption.stream];\n      captionTrack.startTime = Math.min(captionTrack.startTime, caption.startTime + timestampOffset);\n      captionTrack.endTime = Math.max(captionTrack.endTime, caption.endTime + timestampOffset);\n      captionTrack.captions.push(caption);\n    });\n    Object.keys(captionTracks).forEach(trackName => {\n      const {\n        startTime,\n        endTime,\n        captions\n      } = captionTracks[trackName];\n      const inbandTextTracks = this.inbandTextTracks_;\n      this.logger_(`adding cues from ${startTime} -> ${endTime} for ${trackName}`);\n      createCaptionsTrackIfNotExists(inbandTextTracks, this.vhs_.tech_, trackName); // clear out any cues that start and end at the same time period for the same track.\n      // We do this because a rendition change that also changes the timescale for captions\n      // will result in captions being re-parsed for certain segments. If we add them again\n      // without clearing we will have two of the same captions visible.\n\n      removeCuesFromTrack(startTime, endTime, inbandTextTracks[trackName]);\n      addCaptionData({\n        captionArray: captions,\n        inbandTextTracks,\n        timestampOffset\n      });\n    }); // Reset stored captions since we added parsed\n    // captions to a text track at this point\n\n    if (this.transmuxer_) {\n      this.transmuxer_.postMessage({\n        action: 'clearParsedMp4Captions'\n      });\n    }\n  }\n\n  handleId3_(simpleSegment, id3Frames, dispatchType) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n\n    const segmentInfo = this.pendingSegment_; // we need to have appended data in order for the timestamp offset to be set\n\n    if (!segmentInfo.hasAppendedData_) {\n      this.metadataQueue_.id3.push(this.handleId3_.bind(this, simpleSegment, id3Frames, dispatchType));\n      return;\n    }\n\n    this.addMetadataToTextTrack(dispatchType, id3Frames, this.duration_());\n  }\n\n  processMetadataQueue_() {\n    this.metadataQueue_.id3.forEach(fn => fn());\n    this.metadataQueue_.caption.forEach(fn => fn());\n    this.metadataQueue_.id3 = [];\n    this.metadataQueue_.caption = [];\n  }\n\n  processCallQueue_() {\n    const callQueue = this.callQueue_; // Clear out the queue before the queued functions are run, since some of the\n    // functions may check the length of the load queue and default to pushing themselves\n    // back onto the queue.\n\n    this.callQueue_ = [];\n    callQueue.forEach(fun => fun());\n  }\n\n  processLoadQueue_() {\n    const loadQueue = this.loadQueue_; // Clear out the queue before the queued functions are run, since some of the\n    // functions may check the length of the load queue and default to pushing themselves\n    // back onto the queue.\n\n    this.loadQueue_ = [];\n    loadQueue.forEach(fun => fun());\n  }\n  /**\n   * Determines whether the loader has enough info to load the next segment.\n   *\n   * @return {boolean}\n   *         Whether or not the loader has enough info to load the next segment\n   */\n\n\n  hasEnoughInfoToLoad_() {\n    // Since primary timing goes by video, only the audio loader potentially needs to wait\n    // to load.\n    if (this.loaderType_ !== 'audio') {\n      return true;\n    }\n\n    const segmentInfo = this.pendingSegment_; // A fill buffer must have already run to establish a pending segment before there's\n    // enough info to load.\n\n    if (!segmentInfo) {\n      return false;\n    } // The first segment can and should be loaded immediately so that source buffers are\n    // created together (before appending). Source buffer creation uses the presence of\n    // audio and video data to determine whether to create audio/video source buffers, and\n    // uses processed (transmuxed or parsed) media to determine the types required.\n\n\n    if (!this.getCurrentMediaInfo_()) {\n      return true;\n    }\n\n    if ( // Technically, instead of waiting to load a segment on timeline changes, a segment\n    // can be requested and downloaded and only wait before it is transmuxed or parsed.\n    // But in practice, there are a few reasons why it is better to wait until a loader\n    // is ready to append that segment before requesting and downloading:\n    //\n    // 1. Because audio and main loaders cross discontinuities together, if this loader\n    //    is waiting for the other to catch up, then instead of requesting another\n    //    segment and using up more bandwidth, by not yet loading, more bandwidth is\n    //    allotted to the loader currently behind.\n    // 2. media-segment-request doesn't have to have logic to consider whether a segment\n    // is ready to be processed or not, isolating the queueing behavior to the loader.\n    // 3. The audio loader bases some of its segment properties on timing information\n    //    provided by the main loader, meaning that, if the logic for waiting on\n    //    processing was in media-segment-request, then it would also need to know how\n    //    to re-generate the segment information after the main loader caught up.\n    shouldWaitForTimelineChange({\n      timelineChangeController: this.timelineChangeController_,\n      currentTimeline: this.currentTimeline_,\n      segmentTimeline: segmentInfo.timeline,\n      loaderType: this.loaderType_,\n      audioDisabled: this.audioDisabled_\n    })) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getCurrentMediaInfo_(segmentInfo = this.pendingSegment_) {\n    return segmentInfo && segmentInfo.trackInfo || this.currentMediaInfo_;\n  }\n\n  getMediaInfo_(segmentInfo = this.pendingSegment_) {\n    return this.getCurrentMediaInfo_(segmentInfo) || this.startingMediaInfo_;\n  }\n\n  getPendingSegmentPlaylist() {\n    return this.pendingSegment_ ? this.pendingSegment_.playlist : null;\n  }\n\n  hasEnoughInfoToAppend_() {\n    if (!this.sourceUpdater_.ready()) {\n      return false;\n    } // If content needs to be removed or the loader is waiting on an append reattempt,\n    // then no additional content should be appended until the prior append is resolved.\n\n\n    if (this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_) {\n      return false;\n    }\n\n    const segmentInfo = this.pendingSegment_;\n    const trackInfo = this.getCurrentMediaInfo_(); // no segment to append any data for or\n    // we do not have information on this specific\n    // segment yet\n\n    if (!segmentInfo || !trackInfo) {\n      return false;\n    }\n\n    const {\n      hasAudio,\n      hasVideo,\n      isMuxed\n    } = trackInfo;\n\n    if (hasVideo && !segmentInfo.videoTimingInfo) {\n      return false;\n    } // muxed content only relies on video timing information for now.\n\n\n    if (hasAudio && !this.audioDisabled_ && !isMuxed && !segmentInfo.audioTimingInfo) {\n      return false;\n    } // we need to allow an append here even if we're moving to different timelines.\n\n\n    if (shouldWaitForTimelineChange({\n      timelineChangeController: this.timelineChangeController_,\n      currentTimeline: this.currentTimeline_,\n      segmentTimeline: segmentInfo.timeline,\n      loaderType: this.loaderType_,\n      audioDisabled: this.audioDisabled_\n    })) {\n      return false;\n    }\n\n    return true;\n  }\n\n  handleData_(simpleSegment, result) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    } // If there's anything in the call queue, then this data came later and should be\n    // executed after the calls currently queued.\n\n\n    if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {\n      checkAndFixTimelines(this);\n      this.callQueue_.push(this.handleData_.bind(this, simpleSegment, result));\n      return;\n    }\n\n    const segmentInfo = this.pendingSegment_; // update the time mapping so we can translate from display time to media time\n\n    this.setTimeMapping_(segmentInfo.timeline); // for tracking overall stats\n\n    this.updateMediaSecondsLoaded_(segmentInfo.part || segmentInfo.segment); // Note that the state isn't changed from loading to appending. This is because abort\n    // logic may change behavior depending on the state, and changing state too early may\n    // inflate our estimates of bandwidth. In the future this should be re-examined to\n    // note more granular states.\n    // don't process and append data if the mediaSource is closed\n\n    if (this.mediaSource_.readyState === 'closed') {\n      return;\n    } // if this request included an initialization segment, save that data\n    // to the initSegment cache\n\n\n    if (simpleSegment.map) {\n      simpleSegment.map = this.initSegmentForMap(simpleSegment.map, true); // move over init segment properties to media request\n\n      segmentInfo.segment.map = simpleSegment.map;\n    } // if this request included a segment key, save that data in the cache\n\n\n    if (simpleSegment.key) {\n      this.segmentKey(simpleSegment.key, true);\n    }\n\n    segmentInfo.isFmp4 = simpleSegment.isFmp4;\n    segmentInfo.timingInfo = segmentInfo.timingInfo || {};\n\n    if (segmentInfo.isFmp4) {\n      this.trigger('fmp4');\n      segmentInfo.timingInfo.start = segmentInfo[timingInfoPropertyForMedia(result.type)].start;\n    } else {\n      const trackInfo = this.getCurrentMediaInfo_();\n      const useVideoTimingInfo = this.loaderType_ === 'main' && trackInfo && trackInfo.hasVideo;\n      let firstVideoFrameTimeForData;\n\n      if (useVideoTimingInfo) {\n        firstVideoFrameTimeForData = segmentInfo.videoTimingInfo.start;\n      } // Segment loader knows more about segment timing than the transmuxer (in certain\n      // aspects), so make any changes required for a more accurate start time.\n      // Don't set the end time yet, as the segment may not be finished processing.\n\n\n      segmentInfo.timingInfo.start = this.trueSegmentStart_({\n        currentStart: segmentInfo.timingInfo.start,\n        playlist: segmentInfo.playlist,\n        mediaIndex: segmentInfo.mediaIndex,\n        currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),\n        useVideoTimingInfo,\n        firstVideoFrameTimeForData,\n        videoTimingInfo: segmentInfo.videoTimingInfo,\n        audioTimingInfo: segmentInfo.audioTimingInfo\n      });\n    } // Init segments for audio and video only need to be appended in certain cases. Now\n    // that data is about to be appended, we can check the final cases to determine\n    // whether we should append an init segment.\n\n\n    this.updateAppendInitSegmentStatus(segmentInfo, result.type); // Timestamp offset should be updated once we get new data and have its timing info,\n    // as we use the start of the segment to offset the best guess (playlist provided)\n    // timestamp offset.\n\n    this.updateSourceBufferTimestampOffset_(segmentInfo); // if this is a sync request we need to determine whether it should\n    // be appended or not.\n\n    if (segmentInfo.isSyncRequest) {\n      // first save/update our timing info for this segment.\n      // this is what allows us to choose an accurate segment\n      // and the main reason we make a sync request.\n      this.updateTimingInfoEnd_(segmentInfo);\n      this.syncController_.saveSegmentTimingInfo({\n        segmentInfo,\n        shouldSaveTimelineMapping: this.loaderType_ === 'main'\n      });\n      const next = this.chooseNextRequest_(); // If the sync request isn't the segment that would be requested next\n      // after taking into account its timing info, do not append it.\n\n      if (next.mediaIndex !== segmentInfo.mediaIndex || next.partIndex !== segmentInfo.partIndex) {\n        this.logger_('sync segment was incorrect, not appending');\n        return;\n      } // otherwise append it like any other segment as our guess was correct.\n\n\n      this.logger_('sync segment was correct, appending');\n    } // Save some state so that in the future anything waiting on first append (and/or\n    // timestamp offset(s)) can process immediately. While the extra state isn't optimal,\n    // we need some notion of whether the timestamp offset or other relevant information\n    // has had a chance to be set.\n\n\n    segmentInfo.hasAppendedData_ = true; // Now that the timestamp offset should be set, we can append any waiting ID3 tags.\n\n    this.processMetadataQueue_();\n    this.appendData_(segmentInfo, result);\n  }\n\n  updateAppendInitSegmentStatus(segmentInfo, type) {\n    // alt audio doesn't manage timestamp offset\n    if (this.loaderType_ === 'main' && typeof segmentInfo.timestampOffset === 'number' && // in the case that we're handling partial data, we don't want to append an init\n    // segment for each chunk\n    !segmentInfo.changedTimestampOffset) {\n      // if the timestamp offset changed, the timeline may have changed, so we have to re-\n      // append init segments\n      this.appendInitSegment_ = {\n        audio: true,\n        video: true\n      };\n    }\n\n    if (this.playlistOfLastInitSegment_[type] !== segmentInfo.playlist) {\n      // make sure we append init segment on playlist changes, in case the media config\n      // changed\n      this.appendInitSegment_[type] = true;\n    }\n  }\n\n  getInitSegmentAndUpdateState_({\n    type,\n    initSegment,\n    map,\n    playlist\n  }) {\n    // \"The EXT-X-MAP tag specifies how to obtain the Media Initialization Section\n    // (Section 3) required to parse the applicable Media Segments.  It applies to every\n    // Media Segment that appears after it in the Playlist until the next EXT-X-MAP tag\n    // or until the end of the playlist.\"\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.5\n    if (map) {\n      const id = initSegmentId(map);\n\n      if (this.activeInitSegmentId_ === id) {\n        // don't need to re-append the init segment if the ID matches\n        return null;\n      } // a map-specified init segment takes priority over any transmuxed (or otherwise\n      // obtained) init segment\n      //\n      // this also caches the init segment for later use\n\n\n      initSegment = this.initSegmentForMap(map, true).bytes;\n      this.activeInitSegmentId_ = id;\n    } // We used to always prepend init segments for video, however, that shouldn't be\n    // necessary. Instead, we should only append on changes, similar to what we've always\n    // done for audio. This is more important (though may not be that important) for\n    // frame-by-frame appending for LHLS, simply because of the increased quantity of\n    // appends.\n\n\n    if (initSegment && this.appendInitSegment_[type]) {\n      // Make sure we track the playlist that we last used for the init segment, so that\n      // we can re-append the init segment in the event that we get data from a new\n      // playlist. Discontinuities and track changes are handled in other sections.\n      this.playlistOfLastInitSegment_[type] = playlist; // Disable future init segment appends for this type. Until a change is necessary.\n\n      this.appendInitSegment_[type] = false; // we need to clear out the fmp4 active init segment id, since\n      // we are appending the muxer init segment\n\n      this.activeInitSegmentId_ = null;\n      return initSegment;\n    }\n\n    return null;\n  }\n\n  handleQuotaExceededError_({\n    segmentInfo,\n    type,\n    bytes\n  }, error) {\n    const audioBuffered = this.sourceUpdater_.audioBuffered();\n    const videoBuffered = this.sourceUpdater_.videoBuffered(); // For now we're ignoring any notion of gaps in the buffer, but they, in theory,\n    // should be cleared out during the buffer removals. However, log in case it helps\n    // debug.\n\n    if (audioBuffered.length > 1) {\n      this.logger_('On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: ' + timeRangesToArray(audioBuffered).join(', '));\n    }\n\n    if (videoBuffered.length > 1) {\n      this.logger_('On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: ' + timeRangesToArray(videoBuffered).join(', '));\n    }\n\n    const audioBufferStart = audioBuffered.length ? audioBuffered.start(0) : 0;\n    const audioBufferEnd = audioBuffered.length ? audioBuffered.end(audioBuffered.length - 1) : 0;\n    const videoBufferStart = videoBuffered.length ? videoBuffered.start(0) : 0;\n    const videoBufferEnd = videoBuffered.length ? videoBuffered.end(videoBuffered.length - 1) : 0;\n\n    if (audioBufferEnd - audioBufferStart <= MIN_BACK_BUFFER && videoBufferEnd - videoBufferStart <= MIN_BACK_BUFFER) {\n      // Can't remove enough buffer to make room for new segment (or the browser doesn't\n      // allow for appends of segments this size). In the future, it may be possible to\n      // split up the segment and append in pieces, but for now, error out this playlist\n      // in an attempt to switch to a more manageable rendition.\n      this.logger_('On QUOTA_EXCEEDED_ERR, single segment too large to append to ' + 'buffer, triggering an error. ' + `Appended byte length: ${bytes.byteLength}, ` + `audio buffer: ${timeRangesToArray(audioBuffered).join(', ')}, ` + `video buffer: ${timeRangesToArray(videoBuffered).join(', ')}, `);\n      this.error({\n        message: 'Quota exceeded error with append of a single segment of content',\n        excludeUntil: Infinity\n      });\n      this.trigger('error');\n      return;\n    } // To try to resolve the quota exceeded error, clear back buffer and retry. This means\n    // that the segment-loader should block on future events until this one is handled, so\n    // that it doesn't keep moving onto further segments. Adding the call to the call\n    // queue will prevent further appends until waitingOnRemove_ and\n    // quotaExceededErrorRetryTimeout_ are cleared.\n    //\n    // Note that this will only block the current loader. In the case of demuxed content,\n    // the other load may keep filling as fast as possible. In practice, this should be\n    // OK, as it is a rare case when either audio has a high enough bitrate to fill up a\n    // source buffer, or video fills without enough room for audio to append (and without\n    // the availability of clearing out seconds of back buffer to make room for audio).\n    // But it might still be good to handle this case in the future as a TODO.\n\n\n    this.waitingOnRemove_ = true;\n    this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {\n      segmentInfo,\n      type,\n      bytes\n    }));\n    const currentTime = this.currentTime_(); // Try to remove as much audio and video as possible to make room for new content\n    // before retrying.\n\n    const timeToRemoveUntil = currentTime - MIN_BACK_BUFFER;\n    this.logger_(`On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to ${timeToRemoveUntil}`);\n    this.remove(0, timeToRemoveUntil, () => {\n      this.logger_(`On QUOTA_EXCEEDED_ERR, retrying append in ${MIN_BACK_BUFFER}s`);\n      this.waitingOnRemove_ = false; // wait the length of time alotted in the back buffer to prevent wasted\n      // attempts (since we can't clear less than the minimum)\n\n      this.quotaExceededErrorRetryTimeout_ = window$1.setTimeout(() => {\n        this.logger_('On QUOTA_EXCEEDED_ERR, re-processing call queue');\n        this.quotaExceededErrorRetryTimeout_ = null;\n        this.processCallQueue_();\n      }, MIN_BACK_BUFFER * 1000);\n    }, true);\n  }\n\n  handleAppendError_({\n    segmentInfo,\n    type,\n    bytes\n  }, error) {\n    // if there's no error, nothing to do\n    if (!error) {\n      return;\n    }\n\n    if (error.code === QUOTA_EXCEEDED_ERR) {\n      this.handleQuotaExceededError_({\n        segmentInfo,\n        type,\n        bytes\n      }); // A quota exceeded error should be recoverable with a future re-append, so no need\n      // to trigger an append error.\n\n      return;\n    }\n\n    this.logger_('Received non QUOTA_EXCEEDED_ERR on append', error); // If an append errors, we often can't recover.\n    // (see https://w3c.github.io/media-source/#sourcebuffer-append-error).\n    //\n    // Trigger a special error so that it can be handled separately from normal,\n    // recoverable errors.\n\n    this.error({\n      message: `${type} append of ${bytes.length}b failed for segment ` + `#${segmentInfo.mediaIndex} in playlist ${segmentInfo.playlist.id}`,\n      metadata: {\n        errorType: videojs.Error.StreamingFailedToAppendSegment\n      }\n    });\n    this.trigger('appenderror');\n  }\n\n  appendToSourceBuffer_({\n    segmentInfo,\n    type,\n    initSegment,\n    data,\n    bytes\n  }) {\n    // If this is a re-append, bytes were already created and don't need to be recreated\n    if (!bytes) {\n      const segments = [data];\n      let byteLength = data.byteLength;\n\n      if (initSegment) {\n        // if the media initialization segment is changing, append it before the content\n        // segment\n        segments.unshift(initSegment);\n        byteLength += initSegment.byteLength;\n      } // Technically we should be OK appending the init segment separately, however, we\n      // haven't yet tested that, and prepending is how we have always done things.\n\n\n      bytes = concatSegments({\n        bytes: byteLength,\n        segments\n      });\n    }\n\n    const metadata = {\n      segmentInfo: segmentInfoPayload({\n        type: this.loaderType_,\n        segment: segmentInfo\n      })\n    };\n    this.trigger({\n      type: 'segmentappendstart',\n      metadata\n    });\n    this.sourceUpdater_.appendBuffer({\n      segmentInfo,\n      type,\n      bytes\n    }, this.handleAppendError_.bind(this, {\n      segmentInfo,\n      type,\n      bytes\n    }));\n  }\n\n  handleSegmentTimingInfo_(type, requestId, segmentTimingInfo) {\n    if (!this.pendingSegment_ || requestId !== this.pendingSegment_.requestId) {\n      return;\n    }\n\n    const segment = this.pendingSegment_.segment;\n    const timingInfoProperty = `${type}TimingInfo`;\n\n    if (!segment[timingInfoProperty]) {\n      segment[timingInfoProperty] = {};\n    }\n\n    segment[timingInfoProperty].transmuxerPrependedSeconds = segmentTimingInfo.prependedContentDuration || 0;\n    segment[timingInfoProperty].transmuxedPresentationStart = segmentTimingInfo.start.presentation;\n    segment[timingInfoProperty].transmuxedDecodeStart = segmentTimingInfo.start.decode;\n    segment[timingInfoProperty].transmuxedPresentationEnd = segmentTimingInfo.end.presentation;\n    segment[timingInfoProperty].transmuxedDecodeEnd = segmentTimingInfo.end.decode; // mainly used as a reference for debugging\n\n    segment[timingInfoProperty].baseMediaDecodeTime = segmentTimingInfo.baseMediaDecodeTime;\n  }\n\n  appendData_(segmentInfo, result) {\n    const {\n      type,\n      data\n    } = result;\n\n    if (!data || !data.byteLength) {\n      return;\n    }\n\n    if (type === 'audio' && this.audioDisabled_) {\n      return;\n    }\n\n    const initSegment = this.getInitSegmentAndUpdateState_({\n      type,\n      initSegment: result.initSegment,\n      playlist: segmentInfo.playlist,\n      map: segmentInfo.isFmp4 ? segmentInfo.segment.map : null\n    });\n    this.appendToSourceBuffer_({\n      segmentInfo,\n      type,\n      initSegment,\n      data\n    });\n  }\n  /**\n   * load a specific segment from a request into the buffer\n   *\n   * @private\n   */\n\n\n  loadSegment_(segmentInfo) {\n    this.state = 'WAITING';\n    this.pendingSegment_ = segmentInfo;\n    this.trimBackBuffer_(segmentInfo);\n\n    if (typeof segmentInfo.timestampOffset === 'number') {\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({\n          action: 'clearAllMp4Captions'\n        });\n      }\n    }\n\n    if (!this.hasEnoughInfoToLoad_()) {\n      checkAndFixTimelines(this);\n      this.loadQueue_.push(() => {\n        // regenerate the audioAppendStart, timestampOffset, etc as they\n        // may have changed since this function was added to the queue.\n        const options = _extends({}, segmentInfo, {\n          forceTimestampOffset: true\n        });\n\n        _extends(segmentInfo, this.generateSegmentInfo_(options));\n\n        this.isPendingTimestampOffset_ = false;\n        this.updateTransmuxerAndRequestSegment_(segmentInfo);\n      });\n      return;\n    }\n\n    this.updateTransmuxerAndRequestSegment_(segmentInfo);\n  }\n\n  updateTransmuxerAndRequestSegment_(segmentInfo) {\n    // We'll update the source buffer's timestamp offset once we have transmuxed data, but\n    // the transmuxer still needs to be updated before then.\n    //\n    // Even though keepOriginalTimestamps is set to true for the transmuxer, timestamp\n    // offset must be passed to the transmuxer for stream correcting adjustments.\n    if (this.shouldUpdateTransmuxerTimestampOffset_(segmentInfo.timestampOffset)) {\n      this.gopBuffer_.length = 0; // gopsToAlignWith was set before the GOP buffer was cleared\n\n      segmentInfo.gopsToAlignWith = [];\n      this.timeMapping_ = 0; // reset values in the transmuxer since a discontinuity should start fresh\n\n      this.transmuxer_.postMessage({\n        action: 'reset'\n      });\n      this.transmuxer_.postMessage({\n        action: 'setTimestampOffset',\n        timestampOffset: segmentInfo.timestampOffset\n      });\n    }\n\n    const simpleSegment = this.createSimplifiedSegmentObj_(segmentInfo);\n    const isEndOfStream = this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex);\n    const isWalkingForward = this.mediaIndex !== null;\n    const isDiscontinuity = segmentInfo.timeline !== this.currentTimeline_ && // currentTimeline starts at -1, so we shouldn't end the timeline switching to 0,\n    // the first timeline\n    segmentInfo.timeline > 0;\n    const isEndOfTimeline = isEndOfStream || isWalkingForward && isDiscontinuity;\n    this.logger_(`Requesting\n${compactSegmentUrlDescription(segmentInfo.uri)}\n${segmentInfoString(segmentInfo)}`); // If there's an init segment associated with this segment, but it is not cached (identified by a lack of bytes),\n    // then this init segment has never been seen before and should be appended.\n    //\n    // At this point the content type (audio/video or both) is not yet known, but it should be safe to set\n    // both to true and leave the decision of whether to append the init segment to append time.\n\n    if (simpleSegment.map && !simpleSegment.map.bytes) {\n      this.logger_('going to request init segment.');\n      this.appendInitSegment_ = {\n        video: true,\n        audio: true\n      };\n    }\n\n    segmentInfo.abortRequests = mediaSegmentRequest({\n      xhr: this.vhs_.xhr,\n      xhrOptions: this.xhrOptions_,\n      decryptionWorker: this.decrypter_,\n      segment: simpleSegment,\n      abortFn: this.handleAbort_.bind(this, segmentInfo),\n      progressFn: this.handleProgress_.bind(this),\n      trackInfoFn: this.handleTrackInfo_.bind(this),\n      timingInfoFn: this.handleTimingInfo_.bind(this),\n      videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, 'video', segmentInfo.requestId),\n      audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, 'audio', segmentInfo.requestId),\n      captionsFn: this.handleCaptions_.bind(this),\n      isEndOfTimeline,\n      endedTimelineFn: () => {\n        this.logger_('received endedtimeline callback');\n      },\n      id3Fn: this.handleId3_.bind(this),\n      dataFn: this.handleData_.bind(this),\n      doneFn: this.segmentRequestFinished_.bind(this),\n      onTransmuxerLog: ({\n        message,\n        level,\n        stream\n      }) => {\n        this.logger_(`${segmentInfoString(segmentInfo)} logged from transmuxer stream ${stream} as a ${level}: ${message}`);\n      },\n      triggerSegmentEventFn: ({\n        type,\n        segment,\n        keyInfo,\n        trackInfo,\n        timingInfo\n      }) => {\n        const segInfo = segmentInfoPayload({\n          segment\n        });\n        const metadata = {\n          segmentInfo: segInfo\n        }; // add other properties if necessary.\n\n        if (keyInfo) {\n          metadata.keyInfo = keyInfo;\n        }\n\n        if (trackInfo) {\n          metadata.trackInfo = trackInfo;\n        }\n\n        if (timingInfo) {\n          metadata.timingInfo = timingInfo;\n        }\n\n        this.trigger({\n          type,\n          metadata\n        });\n      }\n    });\n  }\n  /**\n   * trim the back buffer so that we don't have too much data\n   * in the source buffer\n   *\n   * @private\n   *\n   * @param {Object} segmentInfo - the current segment\n   */\n\n\n  trimBackBuffer_(segmentInfo) {\n    const removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10); // Chrome has a hard limit of 150MB of\n    // buffer and a very conservative \"garbage collector\"\n    // We manually clear out the old buffer to ensure\n    // we don't trigger the QuotaExceeded error\n    // on the source buffer during subsequent appends\n\n    if (removeToTime > 0) {\n      this.remove(0, removeToTime);\n    }\n  }\n  /**\n   * created a simplified copy of the segment object with just the\n   * information necessary to perform the XHR and decryption\n   *\n   * @private\n   *\n   * @param {Object} segmentInfo - the current segment\n   * @return {Object} a simplified segment object copy\n   */\n\n\n  createSimplifiedSegmentObj_(segmentInfo) {\n    const segment = segmentInfo.segment;\n    const part = segmentInfo.part;\n    const isEncrypted = segmentInfo.segment.key || segmentInfo.segment.map && segmentInfo.segment.map.key;\n    const isMediaInitialization = segmentInfo.segment.map && !segmentInfo.segment.map.bytes;\n    const simpleSegment = {\n      resolvedUri: part ? part.resolvedUri : segment.resolvedUri,\n      byterange: part ? part.byterange : segment.byterange,\n      requestId: segmentInfo.requestId,\n      transmuxer: segmentInfo.transmuxer,\n      audioAppendStart: segmentInfo.audioAppendStart,\n      gopsToAlignWith: segmentInfo.gopsToAlignWith,\n      part: segmentInfo.part,\n      type: this.loaderType_,\n      start: segmentInfo.startOfSegment,\n      duration: segmentInfo.duration,\n      isEncrypted,\n      isMediaInitialization\n    };\n    const previousSegment = segmentInfo.playlist.segments[segmentInfo.mediaIndex - 1];\n\n    if (previousSegment && previousSegment.timeline === segment.timeline) {\n      // The baseStartTime of a segment is used to handle rollover when probing the TS\n      // segment to retrieve timing information. Since the probe only looks at the media's\n      // times (e.g., PTS and DTS values of the segment), and doesn't consider the\n      // player's time (e.g., player.currentTime()), baseStartTime should reflect the\n      // media time as well. transmuxedDecodeEnd represents the end time of a segment, in\n      // seconds of media time, so should be used here. The previous segment is used since\n      // the end of the previous segment should represent the beginning of the current\n      // segment, so long as they are on the same timeline.\n      if (previousSegment.videoTimingInfo) {\n        simpleSegment.baseStartTime = previousSegment.videoTimingInfo.transmuxedDecodeEnd;\n      } else if (previousSegment.audioTimingInfo) {\n        simpleSegment.baseStartTime = previousSegment.audioTimingInfo.transmuxedDecodeEnd;\n      }\n    }\n\n    if (segment.key) {\n      // if the media sequence is greater than 2^32, the IV will be incorrect\n      // assuming 10s segments, that would be about 1300 years\n      const iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n      simpleSegment.key = this.segmentKey(segment.key);\n      simpleSegment.key.iv = iv;\n    }\n\n    if (segment.map) {\n      simpleSegment.map = this.initSegmentForMap(segment.map);\n    }\n\n    return simpleSegment;\n  }\n\n  saveTransferStats_(stats) {\n    // every request counts as a media request even if it has been aborted\n    // or canceled due to a timeout\n    this.mediaRequests += 1;\n\n    if (stats) {\n      this.mediaBytesTransferred += stats.bytesReceived;\n      this.mediaTransferDuration += stats.roundTripTime;\n    }\n  }\n\n  saveBandwidthRelatedStats_(duration, stats) {\n    // byteLength will be used for throughput, and should be based on bytes receieved,\n    // which we only know at the end of the request and should reflect total bytes\n    // downloaded rather than just bytes processed from components of the segment\n    this.pendingSegment_.byteLength = stats.bytesReceived;\n\n    if (duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {\n      this.logger_(`Ignoring segment's bandwidth because its duration of ${duration}` + ` is less than the min to record ${MIN_SEGMENT_DURATION_TO_SAVE_STATS}`);\n      return;\n    }\n\n    const metadata = {\n      bandwidthInfo: {\n        from: this.bandwidth,\n        to: stats.bandwidth\n      }\n    }; // player event with payload\n\n    this.trigger({\n      type: 'bandwidthupdated',\n      metadata\n    });\n    this.bandwidth = stats.bandwidth;\n    this.roundTrip = stats.roundTripTime;\n  }\n\n  handleTimeout_() {\n    // although the VTT segment loader bandwidth isn't really used, it's good to\n    // maintain functinality between segment loaders\n    this.mediaRequestsTimedout += 1;\n    this.bandwidth = 1;\n    this.roundTrip = NaN;\n    this.trigger('bandwidthupdate');\n    this.trigger('timeout');\n  }\n  /**\n   * Handle the callback from the segmentRequest function and set the\n   * associated SegmentLoader state and errors if necessary\n   *\n   * @private\n   */\n\n\n  segmentRequestFinished_(error, simpleSegment, result) {\n    // TODO handle special cases, e.g., muxed audio/video but only audio in the segment\n    // check the call queue directly since this function doesn't need to deal with any\n    // data, and can continue even if the source buffers are not set up and we didn't get\n    // any data from the segment\n    if (this.callQueue_.length) {\n      this.callQueue_.push(this.segmentRequestFinished_.bind(this, error, simpleSegment, result));\n      return;\n    }\n\n    this.saveTransferStats_(simpleSegment.stats); // The request was aborted and the SegmentLoader has already been reset\n\n    if (!this.pendingSegment_) {\n      return;\n    } // the request was aborted and the SegmentLoader has already started\n    // another request. this can happen when the timeout for an aborted\n    // request triggers due to a limitation in the XHR library\n    // do not count this as any sort of request or we risk double-counting\n\n\n    if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n      return;\n    } // an error occurred from the active pendingSegment_ so reset everything\n\n\n    if (error) {\n      this.pendingSegment_ = null;\n      this.state = 'READY'; // aborts are not a true error condition and nothing corrective needs to be done\n\n      if (error.code === REQUEST_ERRORS.ABORTED) {\n        return;\n      }\n\n      this.pause(); // the error is really just that at least one of the requests timed-out\n      // set the bandwidth to a very low value and trigger an ABR switch to\n      // take emergency action\n\n      if (error.code === REQUEST_ERRORS.TIMEOUT) {\n        this.handleTimeout_();\n        return;\n      } // if control-flow has arrived here, then the error is real\n      // emit an error event to exclude the current playlist\n\n\n      this.mediaRequestsErrored += 1;\n      this.error(error);\n      this.trigger('error');\n      return;\n    }\n\n    const segmentInfo = this.pendingSegment_; // the response was a success so set any bandwidth stats the request\n    // generated for ABR purposes\n\n    this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats);\n    segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n\n    if (result.gopInfo) {\n      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, result.gopInfo, this.safeAppend_);\n    } // Although we may have already started appending on progress, we shouldn't switch the\n    // state away from loading until we are officially done loading the segment data.\n\n\n    this.state = 'APPENDING'; // used for testing\n\n    this.trigger('appending');\n    this.waitForAppendsToComplete_(segmentInfo);\n  }\n\n  setTimeMapping_(timeline) {\n    const timelineMapping = this.syncController_.mappingForTimeline(timeline);\n\n    if (timelineMapping !== null) {\n      this.timeMapping_ = timelineMapping;\n    }\n  }\n\n  updateMediaSecondsLoaded_(segment) {\n    if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n      this.mediaSecondsLoaded += segment.end - segment.start;\n    } else {\n      this.mediaSecondsLoaded += segment.duration;\n    }\n  }\n\n  shouldUpdateTransmuxerTimestampOffset_(timestampOffset) {\n    if (timestampOffset === null) {\n      return false;\n    } // note that we're potentially using the same timestamp offset for both video and\n    // audio\n\n\n    if (this.loaderType_ === 'main' && timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {\n      return true;\n    }\n\n    if (!this.audioDisabled_ && timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  trueSegmentStart_({\n    currentStart,\n    playlist,\n    mediaIndex,\n    firstVideoFrameTimeForData,\n    currentVideoTimestampOffset,\n    useVideoTimingInfo,\n    videoTimingInfo,\n    audioTimingInfo\n  }) {\n    if (typeof currentStart !== 'undefined') {\n      // if start was set once, keep using it\n      return currentStart;\n    }\n\n    if (!useVideoTimingInfo) {\n      return audioTimingInfo.start;\n    }\n\n    const previousSegment = playlist.segments[mediaIndex - 1]; // The start of a segment should be the start of the first full frame contained\n    // within that segment. Since the transmuxer maintains a cache of incomplete data\n    // from and/or the last frame seen, the start time may reflect a frame that starts\n    // in the previous segment. Check for that case and ensure the start time is\n    // accurate for the segment.\n\n    if (mediaIndex === 0 || !previousSegment || typeof previousSegment.start === 'undefined' || previousSegment.end !== firstVideoFrameTimeForData + currentVideoTimestampOffset) {\n      return firstVideoFrameTimeForData;\n    }\n\n    return videoTimingInfo.start;\n  }\n\n  waitForAppendsToComplete_(segmentInfo) {\n    const trackInfo = this.getCurrentMediaInfo_(segmentInfo);\n\n    if (!trackInfo) {\n      this.error({\n        message: 'No starting media returned, likely due to an unsupported media format.',\n        playlistExclusionDuration: Infinity\n      });\n      this.trigger('error');\n      return;\n    } // Although transmuxing is done, appends may not yet be finished. Throw a marker\n    // on each queue this loader is responsible for to ensure that the appends are\n    // complete.\n\n\n    const {\n      hasAudio,\n      hasVideo,\n      isMuxed\n    } = trackInfo;\n    const waitForVideo = this.loaderType_ === 'main' && hasVideo;\n    const waitForAudio = !this.audioDisabled_ && hasAudio && !isMuxed;\n    segmentInfo.waitingOnAppends = 0; // segments with no data\n\n    if (!segmentInfo.hasAppendedData_) {\n      if (!segmentInfo.timingInfo && typeof segmentInfo.timestampOffset === 'number') {\n        // When there's no audio or video data in the segment, there's no audio or video\n        // timing information.\n        //\n        // If there's no audio or video timing information, then the timestamp offset\n        // can't be adjusted to the appropriate value for the transmuxer and source\n        // buffers.\n        //\n        // Therefore, the next segment should be used to set the timestamp offset.\n        this.isPendingTimestampOffset_ = true;\n      } // override settings for metadata only segments\n\n\n      segmentInfo.timingInfo = {\n        start: 0\n      };\n      segmentInfo.waitingOnAppends++;\n\n      if (!this.isPendingTimestampOffset_) {\n        // update the timestampoffset\n        this.updateSourceBufferTimestampOffset_(segmentInfo); // make sure the metadata queue is processed even though we have\n        // no video/audio data.\n\n        this.processMetadataQueue_();\n      } // append is \"done\" instantly with no data.\n\n\n      this.checkAppendsDone_(segmentInfo);\n      return;\n    } // Since source updater could call back synchronously, do the increments first.\n\n\n    if (waitForVideo) {\n      segmentInfo.waitingOnAppends++;\n    }\n\n    if (waitForAudio) {\n      segmentInfo.waitingOnAppends++;\n    }\n\n    if (waitForVideo) {\n      this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));\n    }\n\n    if (waitForAudio) {\n      this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));\n    }\n  }\n\n  checkAppendsDone_(segmentInfo) {\n    if (this.checkForAbort_(segmentInfo.requestId)) {\n      return;\n    }\n\n    segmentInfo.waitingOnAppends--;\n\n    if (segmentInfo.waitingOnAppends === 0) {\n      this.handleAppendsDone_();\n    }\n  }\n\n  checkForIllegalMediaSwitch(trackInfo) {\n    const illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.getCurrentMediaInfo_(), trackInfo);\n\n    if (illegalMediaSwitchError) {\n      this.error({\n        message: illegalMediaSwitchError,\n        playlistExclusionDuration: Infinity\n      });\n      this.trigger('error');\n      return true;\n    }\n\n    return false;\n  }\n\n  updateSourceBufferTimestampOffset_(segmentInfo) {\n    if (segmentInfo.timestampOffset === null || // we don't yet have the start for whatever media type (video or audio) has\n    // priority, timing-wise, so we must wait\n    typeof segmentInfo.timingInfo.start !== 'number' || // already updated the timestamp offset for this segment\n    segmentInfo.changedTimestampOffset || // the alt audio loader should not be responsible for setting the timestamp offset\n    this.loaderType_ !== 'main') {\n      return;\n    }\n\n    let didChange = false; // Primary timing goes by video, and audio is trimmed in the transmuxer, meaning that\n    // the timing info here comes from video. In the event that the audio is longer than\n    // the video, this will trim the start of the audio.\n    // This also trims any offset from 0 at the beginning of the media\n\n    segmentInfo.timestampOffset -= this.getSegmentStartTimeForTimestampOffsetCalculation_({\n      videoTimingInfo: segmentInfo.segment.videoTimingInfo,\n      audioTimingInfo: segmentInfo.segment.audioTimingInfo,\n      timingInfo: segmentInfo.timingInfo\n    }); // In the event that there are part segment downloads, each will try to update the\n    // timestamp offset. Retaining this bit of state prevents us from updating in the\n    // future (within the same segment), however, there may be a better way to handle it.\n\n    segmentInfo.changedTimestampOffset = true;\n\n    if (segmentInfo.timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {\n      this.sourceUpdater_.videoTimestampOffset(segmentInfo.timestampOffset);\n      didChange = true;\n    }\n\n    if (segmentInfo.timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {\n      this.sourceUpdater_.audioTimestampOffset(segmentInfo.timestampOffset);\n      didChange = true;\n    }\n\n    if (didChange) {\n      this.trigger('timestampoffset');\n    }\n  }\n\n  getSegmentStartTimeForTimestampOffsetCalculation_({\n    videoTimingInfo,\n    audioTimingInfo,\n    timingInfo\n  }) {\n    if (!this.useDtsForTimestampOffset_) {\n      return timingInfo.start;\n    }\n\n    if (videoTimingInfo && typeof videoTimingInfo.transmuxedDecodeStart === 'number') {\n      return videoTimingInfo.transmuxedDecodeStart;\n    } // handle audio only\n\n\n    if (audioTimingInfo && typeof audioTimingInfo.transmuxedDecodeStart === 'number') {\n      return audioTimingInfo.transmuxedDecodeStart;\n    } // handle content not transmuxed (e.g., MP4)\n\n\n    return timingInfo.start;\n  }\n\n  updateTimingInfoEnd_(segmentInfo) {\n    segmentInfo.timingInfo = segmentInfo.timingInfo || {};\n    const trackInfo = this.getMediaInfo_();\n    const useVideoTimingInfo = this.loaderType_ === 'main' && trackInfo && trackInfo.hasVideo;\n    const prioritizedTimingInfo = useVideoTimingInfo && segmentInfo.videoTimingInfo ? segmentInfo.videoTimingInfo : segmentInfo.audioTimingInfo;\n\n    if (!prioritizedTimingInfo) {\n      return;\n    }\n\n    segmentInfo.timingInfo.end = typeof prioritizedTimingInfo.end === 'number' ? // End time may not exist in a case where we aren't parsing the full segment (one\n    // current example is the case of fmp4), so use the rough duration to calculate an\n    // end time.\n    prioritizedTimingInfo.end : prioritizedTimingInfo.start + segmentInfo.duration;\n  }\n  /**\n   * callback to run when appendBuffer is finished. detects if we are\n   * in a good state to do things with the data we got, or if we need\n   * to wait for more\n   *\n   * @private\n   */\n\n\n  handleAppendsDone_() {\n    // appendsdone can cause an abort\n    if (this.pendingSegment_) {\n      const metadata = {\n        segmentInfo: segmentInfoPayload({\n          type: this.loaderType_,\n          segment: this.pendingSegment_\n        })\n      };\n      this.trigger({\n        type: 'appendsdone',\n        metadata\n      });\n    }\n\n    if (!this.pendingSegment_) {\n      this.state = 'READY'; // TODO should this move into this.checkForAbort to speed up requests post abort in\n      // all appending cases?\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n\n      return;\n    }\n\n    const segmentInfo = this.pendingSegment_;\n\n    if (segmentInfo.part && segmentInfo.part.syncInfo) {\n      // low-latency flow\n      segmentInfo.part.syncInfo.markAppended();\n    } else if (segmentInfo.segment.syncInfo) {\n      // normal flow\n      segmentInfo.segment.syncInfo.markAppended();\n    } // Now that the end of the segment has been reached, we can set the end time. It's\n    // best to wait until all appends are done so we're sure that the primary media is\n    // finished (and we have its end time).\n\n\n    this.updateTimingInfoEnd_(segmentInfo);\n\n    if (this.shouldSaveSegmentTimingInfo_) {\n      // Timeline mappings should only be saved for the main loader. This is for multiple\n      // reasons:\n      //\n      // 1) Only one mapping is saved per timeline, meaning that if both the audio loader\n      //    and the main loader try to save the timeline mapping, whichever comes later\n      //    will overwrite the first. In theory this is OK, as the mappings should be the\n      //    same, however, it breaks for (2)\n      // 2) In the event of a live stream, the initial live point will make for a somewhat\n      //    arbitrary mapping. If audio and video streams are not perfectly in-sync, then\n      //    the mapping will be off for one of the streams, dependent on which one was\n      //    first saved (see (1)).\n      // 3) Primary timing goes by video in VHS, so the mapping should be video.\n      //\n      // Since the audio loader will wait for the main loader to load the first segment,\n      // the main loader will save the first timeline mapping, and ensure that there won't\n      // be a case where audio loads two segments without saving a mapping (thus leading\n      // to missing segment timing info).\n      this.syncController_.saveSegmentTimingInfo({\n        segmentInfo,\n        shouldSaveTimelineMapping: this.loaderType_ === 'main'\n      });\n    }\n\n    const segmentDurationMessage = getTroublesomeSegmentDurationMessage(segmentInfo, this.sourceType_);\n\n    if (segmentDurationMessage) {\n      if (segmentDurationMessage.severity === 'warn') {\n        videojs.log.warn(segmentDurationMessage.message);\n      } else {\n        this.logger_(segmentDurationMessage.message);\n      }\n    }\n\n    this.recordThroughput_(segmentInfo);\n    this.pendingSegment_ = null;\n    this.state = 'READY';\n\n    if (segmentInfo.isSyncRequest) {\n      this.trigger('syncinfoupdate'); // if the sync request was not appended\n      // then it was not the correct segment.\n      // throw it away and use the data it gave us\n      // to get the correct one.\n\n      if (!segmentInfo.hasAppendedData_) {\n        this.logger_(`Throwing away un-appended sync request ${segmentInfoString(segmentInfo)}`);\n        return;\n      }\n    }\n\n    this.logger_(`Appended ${segmentInfoString(segmentInfo)}`);\n    this.addSegmentMetadataCue_(segmentInfo);\n    this.fetchAtBuffer_ = true;\n\n    if (this.currentTimeline_ !== segmentInfo.timeline) {\n      this.timelineChangeController_.lastTimelineChange({\n        type: this.loaderType_,\n        from: this.currentTimeline_,\n        to: segmentInfo.timeline\n      }); // If audio is not disabled, the main segment loader is responsible for updating\n      // the audio timeline as well. If the content is video only, this won't have any\n      // impact.\n\n      if (this.loaderType_ === 'main' && !this.audioDisabled_) {\n        this.timelineChangeController_.lastTimelineChange({\n          type: 'audio',\n          from: this.currentTimeline_,\n          to: segmentInfo.timeline\n        });\n      }\n    }\n\n    this.currentTimeline_ = segmentInfo.timeline; // We must update the syncinfo to recalculate the seekable range before\n    // the following conditional otherwise it may consider this a bad \"guess\"\n    // and attempt to resync when the post-update seekable window and live\n    // point would mean that this was the perfect segment to fetch\n\n    this.trigger('syncinfoupdate');\n    const segment = segmentInfo.segment;\n    const part = segmentInfo.part;\n    const badSegmentGuess = segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3;\n    const badPartGuess = part && part.end && this.currentTime_() - part.end > segmentInfo.playlist.partTargetDuration * 3; // If we previously appended a segment/part that ends more than 3 part/targetDurations before\n    // the currentTime_ that means that our conservative guess was too conservative.\n    // In that case, reset the loader state so that we try to use any information gained\n    // from the previous request to create a new, more accurate, sync-point.\n\n    if (badSegmentGuess || badPartGuess) {\n      this.logger_(`bad ${badSegmentGuess ? 'segment' : 'part'} ${segmentInfoString(segmentInfo)}`);\n      this.resetEverything();\n      return;\n    }\n\n    const isWalkingForward = this.mediaIndex !== null; // Don't do a rendition switch unless we have enough time to get a sync segment\n    // and conservatively guess\n\n    if (isWalkingForward) {\n      this.trigger('bandwidthupdate');\n    }\n\n    this.trigger('progress');\n    this.mediaIndex = segmentInfo.mediaIndex;\n    this.partIndex = segmentInfo.partIndex; // any time an update finishes and the last segment is in the\n    // buffer, end the stream. this ensures the \"ended\" event will\n    // fire if playback reaches that point.\n\n    if (this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex)) {\n      this.endOfStream();\n    } // used for testing\n\n\n    this.trigger('appended');\n\n    if (segmentInfo.hasAppendedData_) {\n      this.mediaAppends++;\n    }\n\n    if (!this.paused()) {\n      this.monitorBuffer_();\n    }\n  }\n  /**\n   * Records the current throughput of the decrypt, transmux, and append\n   * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n   * moving average of the throughput. `throughput.count` is the number of\n   * data points in the average.\n   *\n   * @private\n   * @param {Object} segmentInfo the object returned by loadSegment\n   */\n\n\n  recordThroughput_(segmentInfo) {\n    if (segmentInfo.duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {\n      this.logger_(`Ignoring segment's throughput because its duration of ${segmentInfo.duration}` + ` is less than the min to record ${MIN_SEGMENT_DURATION_TO_SAVE_STATS}`);\n      return;\n    }\n\n    const rate = this.throughput.rate; // Add one to the time to ensure that we don't accidentally attempt to divide\n    // by zero in the case where the throughput is ridiculously high\n\n    const segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1; // Multiply by 8000 to convert from bytes/millisecond to bits/second\n\n    const segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000); // This is just a cumulative moving average calculation:\n    //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n\n    this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n  }\n  /**\n   * Adds a cue to the segment-metadata track with some metadata information about the\n   * segment\n   *\n   * @private\n   * @param {Object} segmentInfo\n   *        the object returned by loadSegment\n   * @method addSegmentMetadataCue_\n   */\n\n\n  addSegmentMetadataCue_(segmentInfo) {\n    if (!this.segmentMetadataTrack_) {\n      return;\n    }\n\n    const segment = segmentInfo.segment;\n    const start = segment.start;\n    const end = segment.end; // Do not try adding the cue if the start and end times are invalid.\n\n    if (!finite(start) || !finite(end)) {\n      return;\n    }\n\n    removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n    const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n    const value = {\n      custom: segment.custom,\n      dateTimeObject: segment.dateTimeObject,\n      dateTimeString: segment.dateTimeString,\n      programDateTime: segment.programDateTime,\n      bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,\n      resolution: segmentInfo.playlist.attributes.RESOLUTION,\n      codecs: segmentInfo.playlist.attributes.CODECS,\n      byteLength: segmentInfo.byteLength,\n      uri: segmentInfo.uri,\n      timeline: segmentInfo.timeline,\n      playlist: segmentInfo.playlist.id,\n      start,\n      end\n    };\n    const data = JSON.stringify(value);\n    const cue = new Cue(start, end, data); // Attach the metadata to the value property of the cue to keep consistency between\n    // the differences of WebKitDataCue in safari and VTTCue in other browsers\n\n    cue.value = value;\n    this.segmentMetadataTrack_.addCue(cue);\n  }\n\n}\n\nfunction noop() {}\n\nconst toTitleCase = function (string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n\n  return string.replace(/./, w => w.toUpperCase());\n};\n\n/**\n * @file source-updater.js\n */\nconst bufferTypes = ['video', 'audio'];\n\nconst updating = (type, sourceUpdater) => {\n  const sourceBuffer = sourceUpdater[`${type}Buffer`];\n  return sourceBuffer && sourceBuffer.updating || sourceUpdater.queuePending[type];\n};\n\nconst nextQueueIndexOfType = (type, queue) => {\n  for (let i = 0; i < queue.length; i++) {\n    const queueEntry = queue[i];\n\n    if (queueEntry.type === 'mediaSource') {\n      // If the next entry is a media source entry (uses multiple source buffers), block\n      // processing to allow it to go through first.\n      return null;\n    }\n\n    if (queueEntry.type === type) {\n      return i;\n    }\n  }\n\n  return null;\n};\n\nconst shiftQueue = (type, sourceUpdater) => {\n  if (sourceUpdater.queue.length === 0) {\n    return;\n  }\n\n  let queueIndex = 0;\n  let queueEntry = sourceUpdater.queue[queueIndex];\n\n  if (queueEntry.type === 'mediaSource') {\n    if (!sourceUpdater.updating() && sourceUpdater.mediaSource.readyState !== 'closed') {\n      sourceUpdater.queue.shift();\n      queueEntry.action(sourceUpdater);\n\n      if (queueEntry.doneFn) {\n        queueEntry.doneFn();\n      } // Only specific source buffer actions must wait for async updateend events. Media\n      // Source actions process synchronously. Therefore, both audio and video source\n      // buffers are now clear to process the next queue entries.\n\n\n      shiftQueue('audio', sourceUpdater);\n      shiftQueue('video', sourceUpdater);\n    } // Media Source actions require both source buffers, so if the media source action\n    // couldn't process yet (because one or both source buffers are busy), block other\n    // queue actions until both are available and the media source action can process.\n\n\n    return;\n  }\n\n  if (type === 'mediaSource') {\n    // If the queue was shifted by a media source action (this happens when pushing a\n    // media source action onto the queue), then it wasn't from an updateend event from an\n    // audio or video source buffer, so there's no change from previous state, and no\n    // processing should be done.\n    return;\n  } // Media source queue entries don't need to consider whether the source updater is\n  // started (i.e., source buffers are created) as they don't need the source buffers, but\n  // source buffer queue entries do.\n\n\n  if (!sourceUpdater.ready() || sourceUpdater.mediaSource.readyState === 'closed' || updating(type, sourceUpdater)) {\n    return;\n  }\n\n  if (queueEntry.type !== type) {\n    queueIndex = nextQueueIndexOfType(type, sourceUpdater.queue);\n\n    if (queueIndex === null) {\n      // Either there's no queue entry that uses this source buffer type in the queue, or\n      // there's a media source queue entry before the next entry of this type, in which\n      // case wait for that action to process first.\n      return;\n    }\n\n    queueEntry = sourceUpdater.queue[queueIndex];\n  }\n\n  sourceUpdater.queue.splice(queueIndex, 1); // Keep a record that this source buffer type is in use.\n  //\n  // The queue pending operation must be set before the action is performed in the event\n  // that the action results in a synchronous event that is acted upon. For instance, if\n  // an exception is thrown that can be handled, it's possible that new actions will be\n  // appended to an empty queue and immediately executed, but would not have the correct\n  // pending information if this property was set after the action was performed.\n\n  sourceUpdater.queuePending[type] = queueEntry;\n  queueEntry.action(type, sourceUpdater);\n\n  if (!queueEntry.doneFn) {\n    // synchronous operation, process next entry\n    sourceUpdater.queuePending[type] = null;\n    shiftQueue(type, sourceUpdater);\n    return;\n  }\n};\n\nconst cleanupBuffer = (type, sourceUpdater) => {\n  const buffer = sourceUpdater[`${type}Buffer`];\n  const titleType = toTitleCase(type);\n\n  if (!buffer) {\n    return;\n  }\n\n  buffer.removeEventListener('updateend', sourceUpdater[`on${titleType}UpdateEnd_`]);\n  buffer.removeEventListener('error', sourceUpdater[`on${titleType}Error_`]);\n  sourceUpdater.codecs[type] = null;\n  sourceUpdater[`${type}Buffer`] = null;\n};\n\nconst inSourceBuffers = (mediaSource, sourceBuffer) => mediaSource && sourceBuffer && Array.prototype.indexOf.call(mediaSource.sourceBuffers, sourceBuffer) !== -1;\n\nconst actions = {\n  appendBuffer: (bytes, segmentInfo, onError) => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n\n    sourceUpdater.logger_(`Appending segment ${segmentInfo.mediaIndex}'s ${bytes.length} bytes to ${type}Buffer`);\n\n    try {\n      sourceBuffer.appendBuffer(bytes);\n    } catch (e) {\n      sourceUpdater.logger_(`Error with code ${e.code} ` + (e.code === QUOTA_EXCEEDED_ERR ? '(QUOTA_EXCEEDED_ERR) ' : '') + `when appending segment ${segmentInfo.mediaIndex} to ${type}Buffer`);\n      sourceUpdater.queuePending[type] = null;\n      onError(e);\n    }\n  },\n  remove: (start, end) => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n\n    sourceUpdater.logger_(`Removing ${start} to ${end} from ${type}Buffer`);\n\n    try {\n      sourceBuffer.remove(start, end);\n    } catch (e) {\n      sourceUpdater.logger_(`Remove ${start} to ${end} from ${type}Buffer failed`);\n    }\n  },\n  timestampOffset: offset => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n\n    sourceUpdater.logger_(`Setting ${type}timestampOffset to ${offset}`);\n    sourceBuffer.timestampOffset = offset;\n  },\n  callback: callback => (type, sourceUpdater) => {\n    callback();\n  },\n  endOfStream: error => sourceUpdater => {\n    if (sourceUpdater.mediaSource.readyState !== 'open') {\n      return;\n    }\n\n    sourceUpdater.logger_(`Calling mediaSource endOfStream(${error || ''})`);\n\n    try {\n      sourceUpdater.mediaSource.endOfStream(error);\n    } catch (e) {\n      videojs.log.warn('Failed to call media source endOfStream', e);\n    }\n  },\n  duration: duration => sourceUpdater => {\n    sourceUpdater.logger_(`Setting mediaSource duration to ${duration}`);\n\n    try {\n      sourceUpdater.mediaSource.duration = duration;\n    } catch (e) {\n      videojs.log.warn('Failed to set media source duration', e);\n    }\n  },\n  abort: () => (type, sourceUpdater) => {\n    if (sourceUpdater.mediaSource.readyState !== 'open') {\n      return;\n    }\n\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n\n    sourceUpdater.logger_(`calling abort on ${type}Buffer`);\n\n    try {\n      sourceBuffer.abort();\n    } catch (e) {\n      videojs.log.warn(`Failed to abort on ${type}Buffer`, e);\n    }\n  },\n  addSourceBuffer: (type, codec) => sourceUpdater => {\n    const titleType = toTitleCase(type);\n    const mime = getMimeForCodec(codec);\n    sourceUpdater.logger_(`Adding ${type}Buffer with codec ${codec} to mediaSource`);\n    const sourceBuffer = sourceUpdater.mediaSource.addSourceBuffer(mime);\n    sourceBuffer.addEventListener('updateend', sourceUpdater[`on${titleType}UpdateEnd_`]);\n    sourceBuffer.addEventListener('error', sourceUpdater[`on${titleType}Error_`]);\n    sourceUpdater.codecs[type] = codec;\n    sourceUpdater[`${type}Buffer`] = sourceBuffer;\n  },\n  removeSourceBuffer: type => sourceUpdater => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`];\n    cleanupBuffer(type, sourceUpdater); // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n\n    sourceUpdater.logger_(`Removing ${type}Buffer with codec ${sourceUpdater.codecs[type]} from mediaSource`);\n\n    try {\n      sourceUpdater.mediaSource.removeSourceBuffer(sourceBuffer);\n    } catch (e) {\n      videojs.log.warn(`Failed to removeSourceBuffer ${type}Buffer`, e);\n    }\n  },\n  changeType: codec => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`];\n    const mime = getMimeForCodec(codec); // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    } // do not update codec if we don't need to.\n    // Only update if we change the codec base.\n    // For example, going from avc1.640028 to avc1.64001f does not require a changeType call.\n\n\n    const newCodecBase = codec.substring(0, codec.indexOf('.'));\n    const oldCodec = sourceUpdater.codecs[type];\n    const oldCodecBase = oldCodec.substring(0, oldCodec.indexOf('.'));\n\n    if (oldCodecBase === newCodecBase) {\n      return;\n    }\n\n    const metadata = {\n      codecsChangeInfo: {\n        from: oldCodec,\n        to: codec\n      }\n    };\n    sourceUpdater.trigger({\n      type: 'codecschange',\n      metadata\n    });\n    sourceUpdater.logger_(`changing ${type}Buffer codec from ${oldCodec} to ${codec}`); // check if change to the provided type is supported\n\n    try {\n      sourceBuffer.changeType(mime);\n      sourceUpdater.codecs[type] = codec;\n    } catch (e) {\n      metadata.errorType = videojs.Error.StreamingCodecsChangeError;\n      metadata.error = e;\n      e.metadata = metadata;\n      sourceUpdater.error_ = e;\n      sourceUpdater.trigger('error');\n      videojs.log.warn(`Failed to changeType on ${type}Buffer`, e);\n    }\n  }\n};\n\nconst pushQueue = ({\n  type,\n  sourceUpdater,\n  action,\n  doneFn,\n  name\n}) => {\n  sourceUpdater.queue.push({\n    type,\n    action,\n    doneFn,\n    name\n  });\n  shiftQueue(type, sourceUpdater);\n};\n\nconst onUpdateend = (type, sourceUpdater) => e => {\n  // Although there should, in theory, be a pending action for any updateend receieved,\n  // there are some actions that may trigger updateend events without set definitions in\n  // the w3c spec. For instance, setting the duration on the media source may trigger\n  // updateend events on source buffers. This does not appear to be in the spec. As such,\n  // if we encounter an updateend without a corresponding pending action from our queue\n  // for that source buffer type, process the next action.\n  const bufferedRangesForType = sourceUpdater[`${type}Buffered`]();\n  const descriptiveString = bufferedRangesToString(bufferedRangesForType);\n  sourceUpdater.logger_(`received \"updateend\" event for ${type} Source Buffer: `, descriptiveString);\n\n  if (sourceUpdater.queuePending[type]) {\n    const doneFn = sourceUpdater.queuePending[type].doneFn;\n    sourceUpdater.queuePending[type] = null;\n\n    if (doneFn) {\n      // if there's an error, report it\n      doneFn(sourceUpdater[`${type}Error_`]);\n    }\n  }\n\n  shiftQueue(type, sourceUpdater);\n};\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the SourceBuffer from\n * @param {string} mimeType the desired MIME type of the underlying SourceBuffer\n */\n\n\nclass SourceUpdater extends videojs.EventTarget {\n  constructor(mediaSource) {\n    super();\n    this.mediaSource = mediaSource;\n\n    this.sourceopenListener_ = () => shiftQueue('mediaSource', this);\n\n    this.mediaSource.addEventListener('sourceopen', this.sourceopenListener_);\n    this.logger_ = logger('SourceUpdater'); // initial timestamp offset is 0\n\n    this.audioTimestampOffset_ = 0;\n    this.videoTimestampOffset_ = 0;\n    this.queue = [];\n    this.queuePending = {\n      audio: null,\n      video: null\n    };\n    this.delayedAudioAppendQueue_ = [];\n    this.videoAppendQueued_ = false;\n    this.codecs = {};\n    this.onVideoUpdateEnd_ = onUpdateend('video', this);\n    this.onAudioUpdateEnd_ = onUpdateend('audio', this);\n\n    this.onVideoError_ = e => {\n      // used for debugging\n      this.videoError_ = e;\n    };\n\n    this.onAudioError_ = e => {\n      // used for debugging\n      this.audioError_ = e;\n    };\n\n    this.createdSourceBuffers_ = false;\n    this.initializedEme_ = false;\n    this.triggeredReady_ = false;\n  }\n\n  initializedEme() {\n    this.initializedEme_ = true;\n    this.triggerReady();\n  }\n\n  hasCreatedSourceBuffers() {\n    // if false, likely waiting on one of the segment loaders to get enough data to create\n    // source buffers\n    return this.createdSourceBuffers_;\n  }\n\n  hasInitializedAnyEme() {\n    return this.initializedEme_;\n  }\n\n  ready() {\n    return this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme();\n  }\n\n  createSourceBuffers(codecs) {\n    if (this.hasCreatedSourceBuffers()) {\n      // already created them before\n      return;\n    } // the intial addOrChangeSourceBuffers will always be\n    // two add buffers.\n\n\n    this.addOrChangeSourceBuffers(codecs);\n    this.createdSourceBuffers_ = true;\n    this.trigger('createdsourcebuffers');\n    this.triggerReady();\n  }\n\n  triggerReady() {\n    // only allow ready to be triggered once, this prevents the case\n    // where:\n    // 1. we trigger createdsourcebuffers\n    // 2. ie 11 synchronously initializates eme\n    // 3. the synchronous initialization causes us to trigger ready\n    // 4. We go back to the ready check in createSourceBuffers and ready is triggered again.\n    if (this.ready() && !this.triggeredReady_) {\n      this.triggeredReady_ = true;\n      this.trigger('ready');\n    }\n  }\n  /**\n   * Add a type of source buffer to the media source.\n   *\n   * @param {string} type\n   *        The type of source buffer to add.\n   *\n   * @param {string} codec\n   *        The codec to add the source buffer with.\n   */\n\n\n  addSourceBuffer(type, codec) {\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.addSourceBuffer(type, codec),\n      name: 'addSourceBuffer'\n    });\n  }\n  /**\n   * call abort on a source buffer.\n   *\n   * @param {string} type\n   *        The type of source buffer to call abort on.\n   */\n\n\n  abort(type) {\n    pushQueue({\n      type,\n      sourceUpdater: this,\n      action: actions.abort(type),\n      name: 'abort'\n    });\n  }\n  /**\n   * Call removeSourceBuffer and remove a specific type\n   * of source buffer on the mediaSource.\n   *\n   * @param {string} type\n   *        The type of source buffer to remove.\n   */\n\n\n  removeSourceBuffer(type) {\n    if (!this.canRemoveSourceBuffer()) {\n      videojs.log.error('removeSourceBuffer is not supported!');\n      return;\n    }\n\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.removeSourceBuffer(type),\n      name: 'removeSourceBuffer'\n    });\n  }\n  /**\n   * Whether or not the removeSourceBuffer function is supported\n   * on the mediaSource.\n   *\n   * @return {boolean}\n   *          if removeSourceBuffer can be called.\n   */\n\n\n  canRemoveSourceBuffer() {\n    // As of Firefox 83 removeSourceBuffer\n    // throws errors, so we report that it does not support this.\n    return !videojs.browser.IS_FIREFOX && window$1.MediaSource && window$1.MediaSource.prototype && typeof window$1.MediaSource.prototype.removeSourceBuffer === 'function';\n  }\n  /**\n   * Whether or not the changeType function is supported\n   * on our SourceBuffers.\n   *\n   * @return {boolean}\n   *         if changeType can be called.\n   */\n\n\n  static canChangeType() {\n    return window$1.SourceBuffer && window$1.SourceBuffer.prototype && typeof window$1.SourceBuffer.prototype.changeType === 'function';\n  }\n  /**\n   * Whether or not the changeType function is supported\n   * on our SourceBuffers.\n   *\n   * @return {boolean}\n   *         if changeType can be called.\n   */\n\n\n  canChangeType() {\n    return this.constructor.canChangeType();\n  }\n  /**\n   * Call the changeType function on a source buffer, given the code and type.\n   *\n   * @param {string} type\n   *        The type of source buffer to call changeType on.\n   *\n   * @param {string} codec\n   *        The codec string to change type with on the source buffer.\n   */\n\n\n  changeType(type, codec) {\n    if (!this.canChangeType()) {\n      videojs.log.error('changeType is not supported!');\n      return;\n    }\n\n    pushQueue({\n      type,\n      sourceUpdater: this,\n      action: actions.changeType(codec),\n      name: 'changeType'\n    });\n  }\n  /**\n   * Add source buffers with a codec or, if they are already created,\n   * call changeType on source buffers using changeType.\n   *\n   * @param {Object} codecs\n   *        Codecs to switch to\n   */\n\n\n  addOrChangeSourceBuffers(codecs) {\n    if (!codecs || typeof codecs !== 'object' || Object.keys(codecs).length === 0) {\n      throw new Error('Cannot addOrChangeSourceBuffers to undefined codecs');\n    }\n\n    Object.keys(codecs).forEach(type => {\n      const codec = codecs[type];\n\n      if (!this.hasCreatedSourceBuffers()) {\n        return this.addSourceBuffer(type, codec);\n      }\n\n      if (this.canChangeType()) {\n        this.changeType(type, codec);\n      }\n    });\n  }\n  /**\n   * Queue an update to append an ArrayBuffer.\n   *\n   * @param {MediaObject} object containing audioBytes and/or videoBytes\n   * @param {Function} done the function to call when done\n   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n   */\n\n\n  appendBuffer(options, doneFn) {\n    const {\n      segmentInfo,\n      type,\n      bytes\n    } = options;\n    this.processedAppend_ = true;\n\n    if (type === 'audio' && this.videoBuffer && !this.videoAppendQueued_) {\n      this.delayedAudioAppendQueue_.push([options, doneFn]);\n      this.logger_(`delayed audio append of ${bytes.length} until video append`);\n      return;\n    } // In the case of certain errors, for instance, QUOTA_EXCEEDED_ERR, updateend will\n    // not be fired. This means that the queue will be blocked until the next action\n    // taken by the segment-loader. Provide a mechanism for segment-loader to handle\n    // these errors by calling the doneFn with the specific error.\n\n\n    const onError = doneFn;\n    pushQueue({\n      type,\n      sourceUpdater: this,\n      action: actions.appendBuffer(bytes, segmentInfo || {\n        mediaIndex: -1\n      }, onError),\n      doneFn,\n      name: 'appendBuffer'\n    });\n\n    if (type === 'video') {\n      this.videoAppendQueued_ = true;\n\n      if (!this.delayedAudioAppendQueue_.length) {\n        return;\n      }\n\n      const queue = this.delayedAudioAppendQueue_.slice();\n      this.logger_(`queuing delayed audio ${queue.length} appendBuffers`);\n      this.delayedAudioAppendQueue_.length = 0;\n      queue.forEach(que => {\n        this.appendBuffer.apply(this, que);\n      });\n    }\n  }\n  /**\n   * Get the audio buffer's buffered timerange.\n   *\n   * @return {TimeRange}\n   *         The audio buffer's buffered time range\n   */\n\n\n  audioBuffered() {\n    // no media source/source buffer or it isn't in the media sources\n    // source buffer list\n    if (!inSourceBuffers(this.mediaSource, this.audioBuffer)) {\n      return createTimeRanges();\n    }\n\n    return this.audioBuffer.buffered ? this.audioBuffer.buffered : createTimeRanges();\n  }\n  /**\n   * Get the video buffer's buffered timerange.\n   *\n   * @return {TimeRange}\n   *         The video buffer's buffered time range\n   */\n\n\n  videoBuffered() {\n    // no media source/source buffer or it isn't in the media sources\n    // source buffer list\n    if (!inSourceBuffers(this.mediaSource, this.videoBuffer)) {\n      return createTimeRanges();\n    }\n\n    return this.videoBuffer.buffered ? this.videoBuffer.buffered : createTimeRanges();\n  }\n  /**\n   * Get a combined video/audio buffer's buffered timerange.\n   *\n   * @return {TimeRange}\n   *         the combined time range\n   */\n\n\n  buffered() {\n    const video = inSourceBuffers(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null;\n    const audio = inSourceBuffers(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;\n\n    if (audio && !video) {\n      return this.audioBuffered();\n    }\n\n    if (video && !audio) {\n      return this.videoBuffered();\n    }\n\n    return bufferIntersection(this.audioBuffered(), this.videoBuffered());\n  }\n  /**\n   * Add a callback to the queue that will set duration on the mediaSource.\n   *\n   * @param {number} duration\n   *        The duration to set\n   *\n   * @param {Function} [doneFn]\n   *        function to run after duration has been set.\n   */\n\n\n  setDuration(duration, doneFn = noop) {\n    // In order to set the duration on the media source, it's necessary to wait for all\n    // source buffers to no longer be updating. \"If the updating attribute equals true on\n    // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and\n    // abort these steps.\" (source: https://www.w3.org/TR/media-source/#attributes).\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.duration(duration),\n      name: 'duration',\n      doneFn\n    });\n  }\n  /**\n   * Add a mediaSource endOfStream call to the queue\n   *\n   * @param {Error} [error]\n   *        Call endOfStream with an error\n   *\n   * @param {Function} [doneFn]\n   *        A function that should be called when the\n   *        endOfStream call has finished.\n   */\n\n\n  endOfStream(error = null, doneFn = noop) {\n    if (typeof error !== 'string') {\n      error = undefined;\n    } // In order to set the duration on the media source, it's necessary to wait for all\n    // source buffers to no longer be updating. \"If the updating attribute equals true on\n    // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and\n    // abort these steps.\" (source: https://www.w3.org/TR/media-source/#attributes).\n\n\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.endOfStream(error),\n      name: 'endOfStream',\n      doneFn\n    });\n  }\n  /**\n   * Queue an update to remove a time range from the buffer.\n   *\n   * @param {number} start where to start the removal\n   * @param {number} end where to end the removal\n   * @param {Function} [done=noop] optional callback to be executed when the remove\n   * operation is complete\n   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n   */\n\n\n  removeAudio(start, end, done = noop) {\n    if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {\n      done();\n      return;\n    }\n\n    pushQueue({\n      type: 'audio',\n      sourceUpdater: this,\n      action: actions.remove(start, end),\n      doneFn: done,\n      name: 'remove'\n    });\n  }\n  /**\n   * Queue an update to remove a time range from the buffer.\n   *\n   * @param {number} start where to start the removal\n   * @param {number} end where to end the removal\n   * @param {Function} [done=noop] optional callback to be executed when the remove\n   * operation is complete\n   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n   */\n\n\n  removeVideo(start, end, done = noop) {\n    if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {\n      done();\n      return;\n    }\n\n    pushQueue({\n      type: 'video',\n      sourceUpdater: this,\n      action: actions.remove(start, end),\n      doneFn: done,\n      name: 'remove'\n    });\n  }\n  /**\n   * Whether the underlying sourceBuffer is updating or not\n   *\n   * @return {boolean} the updating status of the SourceBuffer\n   */\n\n\n  updating() {\n    // the audio/video source buffer is updating\n    if (updating('audio', this) || updating('video', this)) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Set/get the timestampoffset on the audio SourceBuffer\n   *\n   * @return {number} the timestamp offset\n   */\n\n\n  audioTimestampOffset(offset) {\n    if (typeof offset !== 'undefined' && this.audioBuffer && // no point in updating if it's the same\n    this.audioTimestampOffset_ !== offset) {\n      pushQueue({\n        type: 'audio',\n        sourceUpdater: this,\n        action: actions.timestampOffset(offset),\n        name: 'timestampOffset'\n      });\n      this.audioTimestampOffset_ = offset;\n    }\n\n    return this.audioTimestampOffset_;\n  }\n  /**\n   * Set/get the timestampoffset on the video SourceBuffer\n   *\n   * @return {number} the timestamp offset\n   */\n\n\n  videoTimestampOffset(offset) {\n    if (typeof offset !== 'undefined' && this.videoBuffer && // no point in updating if it's the same\n    this.videoTimestampOffset_ !== offset) {\n      pushQueue({\n        type: 'video',\n        sourceUpdater: this,\n        action: actions.timestampOffset(offset),\n        name: 'timestampOffset'\n      });\n      this.videoTimestampOffset_ = offset;\n    }\n\n    return this.videoTimestampOffset_;\n  }\n  /**\n   * Add a function to the queue that will be called\n   * when it is its turn to run in the audio queue.\n   *\n   * @param {Function} callback\n   *        The callback to queue.\n   */\n\n\n  audioQueueCallback(callback) {\n    if (!this.audioBuffer) {\n      return;\n    }\n\n    pushQueue({\n      type: 'audio',\n      sourceUpdater: this,\n      action: actions.callback(callback),\n      name: 'callback'\n    });\n  }\n  /**\n   * Add a function to the queue that will be called\n   * when it is its turn to run in the video queue.\n   *\n   * @param {Function} callback\n   *        The callback to queue.\n   */\n\n\n  videoQueueCallback(callback) {\n    if (!this.videoBuffer) {\n      return;\n    }\n\n    pushQueue({\n      type: 'video',\n      sourceUpdater: this,\n      action: actions.callback(callback),\n      name: 'callback'\n    });\n  }\n  /**\n   * dispose of the source updater and the underlying sourceBuffer\n   */\n\n\n  dispose() {\n    this.trigger('dispose');\n    bufferTypes.forEach(type => {\n      this.abort(type);\n\n      if (this.canRemoveSourceBuffer()) {\n        this.removeSourceBuffer(type);\n      } else {\n        this[`${type}QueueCallback`](() => cleanupBuffer(type, this));\n      }\n    });\n    this.videoAppendQueued_ = false;\n    this.delayedAudioAppendQueue_.length = 0;\n\n    if (this.sourceopenListener_) {\n      this.mediaSource.removeEventListener('sourceopen', this.sourceopenListener_);\n    }\n\n    this.off();\n  }\n\n}\n\nconst uint8ToUtf8 = uintArray => decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));\nconst bufferToHexString = buffer => {\n  const uInt8Buffer = new Uint8Array(buffer);\n  return Array.from(uInt8Buffer).map(byte => byte.toString(16).padStart(2, '0')).join('');\n};\n\n/**\n * @file vtt-segment-loader.js\n */\nconst VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(char => char.charCodeAt(0)));\n\nclass NoVttJsError extends Error {\n  constructor() {\n    super('Trying to parse received VTT cues, but there is no WebVTT. Make sure vtt.js is loaded.');\n  }\n\n}\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\n\nclass VTTSegmentLoader extends SegmentLoader {\n  constructor(settings, options = {}) {\n    super(settings, options); // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n\n    this.mediaSource_ = null;\n    this.subtitlesTrack_ = null;\n    this.featuresNativeTextTracks_ = settings.featuresNativeTextTracks;\n    this.loadVttJs = settings.loadVttJs; // The VTT segment will have its own time mappings. Saving VTT segment timing info in\n    // the sync controller leads to improper behavior.\n\n    this.shouldSaveSegmentTimingInfo_ = false;\n  }\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n\n  buffered_() {\n    if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length) {\n      return createTimeRanges();\n    }\n\n    const cues = this.subtitlesTrack_.cues;\n    const start = cues[0].startTime;\n    const end = cues[cues.length - 1].startTime;\n    return createTimeRanges([[start, end]]);\n  }\n  /**\n   * Gets and sets init segment for the provided map\n   *\n   * @param {Object} map\n   *        The map object representing the init segment to get or set\n   * @param {boolean=} set\n   *        If true, the init segment for the provided map should be saved\n   * @return {Object}\n   *         map object for desired init segment\n   */\n\n\n  initSegmentForMap(map, set = false) {\n    if (!map) {\n      return null;\n    }\n\n    const id = initSegmentId(map);\n    let storedMap = this.initSegments_[id];\n\n    if (set && !storedMap && map.bytes) {\n      // append WebVTT line terminators to the media initialization segment if it exists\n      // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n      // requires two or more WebVTT line terminators between the WebVTT header and the\n      // rest of the file\n      const combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n      const combinedSegment = new Uint8Array(combinedByteLength);\n      combinedSegment.set(map.bytes);\n      combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n      this.initSegments_[id] = storedMap = {\n        resolvedUri: map.resolvedUri,\n        byterange: map.byterange,\n        bytes: combinedSegment\n      };\n    }\n\n    return storedMap || map;\n  }\n  /**\n   * Returns true if all configuration required for loading is present, otherwise false.\n   *\n   * @return {boolean} True if the all configuration is ready for loading\n   * @private\n   */\n\n\n  couldBeginLoading_() {\n    return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n  }\n  /**\n   * Once all the starting parameters have been specified, begin\n   * operation. This method should only be invoked from the INIT\n   * state.\n   *\n   * @private\n   */\n\n\n  init_() {\n    this.state = 'READY';\n    this.resetEverything();\n    return this.monitorBuffer_();\n  }\n  /**\n   * Set a subtitle track on the segment loader to add subtitles to\n   *\n   * @param {TextTrack=} track\n   *        The text track to add loaded subtitles to\n   * @return {TextTrack}\n   *        Returns the subtitles track\n   */\n\n\n  track(track) {\n    if (typeof track === 'undefined') {\n      return this.subtitlesTrack_;\n    }\n\n    this.subtitlesTrack_ = track; // if we were unpaused but waiting for a sourceUpdater, start\n    // buffering now\n\n    if (this.state === 'INIT' && this.couldBeginLoading_()) {\n      this.init_();\n    }\n\n    return this.subtitlesTrack_;\n  }\n  /**\n   * Remove any data in the source buffer between start and end times\n   *\n   * @param {number} start - the start time of the region to remove from the buffer\n   * @param {number} end - the end time of the region to remove from the buffer\n   */\n\n\n  remove(start, end) {\n    removeCuesFromTrack(start, end, this.subtitlesTrack_);\n  }\n  /**\n   * fill the buffer with segements unless the sourceBuffers are\n   * currently updating\n   *\n   * Note: this function should only ever be called by monitorBuffer_\n   * and never directly\n   *\n   * @private\n   */\n\n\n  fillBuffer_() {\n    // see if we need to begin loading immediately\n    const segmentInfo = this.chooseNextRequest_();\n\n    if (!segmentInfo) {\n      return;\n    }\n\n    if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n      // We don't have the timestamp offset that we need to sync subtitles.\n      // Rerun on a timestamp offset or user interaction.\n      const checkTimestampOffset = () => {\n        this.state = 'READY';\n\n        if (!this.paused()) {\n          // if not paused, queue a buffer check as soon as possible\n          this.monitorBuffer_();\n        }\n      };\n\n      this.syncController_.one('timestampoffset', checkTimestampOffset);\n      this.state = 'WAITING_ON_TIMELINE';\n      return;\n    }\n\n    this.loadSegment_(segmentInfo);\n  } // never set a timestamp offset for vtt segments.\n\n\n  timestampOffsetForSegment_() {\n    return null;\n  }\n\n  chooseNextRequest_() {\n    return this.skipEmptySegments_(super.chooseNextRequest_());\n  }\n  /**\n   * Prevents the segment loader from requesting segments we know contain no subtitles\n   * by walking forward until we find the next segment that we don't know whether it is\n   * empty or not.\n   *\n   * @param {Object} segmentInfo\n   *        a segment info object that describes the current segment\n   * @return {Object}\n   *         a segment info object that describes the current segment\n   */\n\n\n  skipEmptySegments_(segmentInfo) {\n    while (segmentInfo && segmentInfo.segment.empty) {\n      // stop at the last possible segmentInfo\n      if (segmentInfo.mediaIndex + 1 >= segmentInfo.playlist.segments.length) {\n        segmentInfo = null;\n        break;\n      }\n\n      segmentInfo = this.generateSegmentInfo_({\n        playlist: segmentInfo.playlist,\n        mediaIndex: segmentInfo.mediaIndex + 1,\n        startOfSegment: segmentInfo.startOfSegment + segmentInfo.duration,\n        isSyncRequest: segmentInfo.isSyncRequest\n      });\n    }\n\n    return segmentInfo;\n  }\n\n  stopForError(error) {\n    this.error(error);\n    this.state = 'READY';\n    this.pause();\n    this.trigger('error');\n  }\n  /**\n   * append a decrypted segement to the SourceBuffer through a SourceUpdater\n   *\n   * @private\n   */\n\n\n  segmentRequestFinished_(error, simpleSegment, result) {\n    if (!this.subtitlesTrack_) {\n      this.state = 'READY';\n      return;\n    }\n\n    this.saveTransferStats_(simpleSegment.stats); // the request was aborted\n\n    if (!this.pendingSegment_) {\n      this.state = 'READY';\n      this.mediaRequestsAborted += 1;\n      return;\n    }\n\n    if (error) {\n      if (error.code === REQUEST_ERRORS.TIMEOUT) {\n        this.handleTimeout_();\n      }\n\n      if (error.code === REQUEST_ERRORS.ABORTED) {\n        this.mediaRequestsAborted += 1;\n      } else {\n        this.mediaRequestsErrored += 1;\n      }\n\n      this.stopForError(error);\n      return;\n    }\n\n    const segmentInfo = this.pendingSegment_;\n    const isMp4WebVttSegmentWithCues = result.mp4VttCues && result.mp4VttCues.length;\n\n    if (isMp4WebVttSegmentWithCues) {\n      segmentInfo.mp4VttCues = result.mp4VttCues;\n    } // although the VTT segment loader bandwidth isn't really used, it's good to\n    // maintain functionality between segment loaders\n\n\n    this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats); // if this request included a segment key, save that data in the cache\n\n    if (simpleSegment.key) {\n      this.segmentKey(simpleSegment.key, true);\n    }\n\n    this.state = 'APPENDING'; // used for tests\n\n    this.trigger('appending');\n    const segment = segmentInfo.segment;\n\n    if (segment.map) {\n      segment.map.bytes = simpleSegment.map.bytes;\n    }\n\n    segmentInfo.bytes = simpleSegment.bytes; // Make sure that vttjs has loaded, otherwise, load it and wait till it finished loading\n\n    if (typeof window$1.WebVTT !== 'function' && typeof this.loadVttJs === 'function') {\n      this.state = 'WAITING_ON_VTTJS'; // should be fine to call multiple times\n      // script will be loaded once but multiple listeners will be added to the queue, which is expected.\n\n      this.loadVttJs().then(() => this.segmentRequestFinished_(error, simpleSegment, result), () => this.stopForError({\n        message: 'Error loading vtt.js'\n      }));\n      return;\n    }\n\n    segment.requested = true;\n\n    try {\n      this.parseVTTCues_(segmentInfo);\n    } catch (e) {\n      this.stopForError({\n        message: e.message,\n        metadata: {\n          errorType: videojs.Error.StreamingVttParserError,\n          error: e\n        }\n      });\n      return;\n    }\n\n    if (!isMp4WebVttSegmentWithCues) {\n      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n    }\n\n    if (segmentInfo.cues.length) {\n      segmentInfo.timingInfo = {\n        start: segmentInfo.cues[0].startTime,\n        end: segmentInfo.cues[segmentInfo.cues.length - 1].endTime\n      };\n    } else {\n      segmentInfo.timingInfo = {\n        start: segmentInfo.startOfSegment,\n        end: segmentInfo.startOfSegment + segmentInfo.duration\n      };\n    }\n\n    if (segmentInfo.isSyncRequest) {\n      this.trigger('syncinfoupdate');\n      this.pendingSegment_ = null;\n      this.state = 'READY';\n      return;\n    }\n\n    segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n    this.mediaSecondsLoaded += segment.duration; // Create VTTCue instances for each cue in the new segment and add them to\n    // the subtitle track\n\n    segmentInfo.cues.forEach(cue => {\n      this.subtitlesTrack_.addCue(this.featuresNativeTextTracks_ ? new window$1.VTTCue(cue.startTime, cue.endTime, cue.text) : cue);\n    }); // Remove any duplicate cues from the subtitle track. The WebVTT spec allows\n    // cues to have identical time-intervals, but if the text is also identical\n    // we can safely assume it is a duplicate that can be removed (ex. when a cue\n    // \"overlaps\" VTT segments)\n\n    removeDuplicateCuesFromTrack(this.subtitlesTrack_);\n    this.handleAppendsDone_();\n  }\n\n  handleData_(simpleSegment, result) {\n    const isVttType = simpleSegment && simpleSegment.type === 'vtt';\n    const isTextResult = result && result.type === 'text';\n    const isFmp4VttSegment = isVttType && isTextResult; // handle segment data for fmp4 encapsulated webvtt\n\n    if (isFmp4VttSegment) {\n      super.handleData_(simpleSegment, result);\n    }\n  }\n\n  updateTimingInfoEnd_() {// noop\n  }\n  /**\n   * Utility function for converting mp4 webvtt cue objects into VTTCues.\n   *\n   * @param {Object} segmentInfo with mp4 webvtt cues for parsing into VTTCue objecs\n   */\n\n\n  parseMp4VttCues_(segmentInfo) {\n    const timestampOffset = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();\n    segmentInfo.mp4VttCues.forEach(cue => {\n      const start = cue.start + timestampOffset;\n      const end = cue.end + timestampOffset;\n      const vttCue = new window$1.VTTCue(start, end, cue.cueText);\n\n      if (cue.settings) {\n        cue.settings.split(' ').forEach(cueSetting => {\n          const keyValString = cueSetting.split(':');\n          const key = keyValString[0];\n          const value = keyValString[1];\n          vttCue[key] = isNaN(value) ? value : Number(value);\n        });\n      }\n\n      segmentInfo.cues.push(vttCue);\n    });\n  }\n  /**\n   * Uses the WebVTT parser to parse the segment response\n   *\n   * @throws NoVttJsError\n   *\n   * @param {Object} segmentInfo\n   *        a segment info object that describes the current segment\n   * @private\n   */\n\n\n  parseVTTCues_(segmentInfo) {\n    let decoder;\n    let decodeBytesToString = false;\n\n    if (typeof window$1.WebVTT !== 'function') {\n      // caller is responsible for exception handling.\n      throw new NoVttJsError();\n    }\n\n    segmentInfo.cues = [];\n    segmentInfo.timestampmap = {\n      MPEGTS: 0,\n      LOCAL: 0\n    };\n\n    if (segmentInfo.mp4VttCues) {\n      this.parseMp4VttCues_(segmentInfo);\n      return;\n    }\n\n    if (typeof window$1.TextDecoder === 'function') {\n      decoder = new window$1.TextDecoder('utf8');\n    } else {\n      decoder = window$1.WebVTT.StringDecoder();\n      decodeBytesToString = true;\n    }\n\n    const parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, decoder);\n    parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n\n    parser.ontimestampmap = map => {\n      segmentInfo.timestampmap = map;\n    };\n\n    parser.onparsingerror = error => {\n      videojs.log.warn('Error encountered when parsing cues: ' + error.message);\n    };\n\n    if (segmentInfo.segment.map) {\n      let mapData = segmentInfo.segment.map.bytes;\n\n      if (decodeBytesToString) {\n        mapData = uint8ToUtf8(mapData);\n      }\n\n      parser.parse(mapData);\n    }\n\n    let segmentData = segmentInfo.bytes;\n\n    if (decodeBytesToString) {\n      segmentData = uint8ToUtf8(segmentData);\n    }\n\n    parser.parse(segmentData);\n    parser.flush();\n  }\n  /**\n   * Updates the start and end times of any cues parsed by the WebVTT parser using\n   * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n   * from the SyncController\n   *\n   * @param {Object} segmentInfo\n   *        a segment info object that describes the current segment\n   * @param {Object} mappingObj\n   *        object containing a mapping from TS to media time\n   * @param {Object} playlist\n   *        the playlist object containing the segment\n   * @private\n   */\n\n\n  updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n    const segment = segmentInfo.segment;\n\n    if (!mappingObj) {\n      // If the sync controller does not have a mapping of TS to Media Time for the\n      // timeline, then we don't have enough information to update the cue\n      // start/end times\n      return;\n    }\n\n    if (!segmentInfo.cues.length) {\n      // If there are no cues, we also do not have enough information to figure out\n      // segment timing. Mark that the segment contains no cues so we don't re-request\n      // an empty segment.\n      segment.empty = true;\n      return;\n    }\n\n    const {\n      MPEGTS,\n      LOCAL\n    } = segmentInfo.timestampmap;\n    /**\n     * From the spec:\n     * The MPEGTS media timestamp MUST use a 90KHz timescale,\n     * even when non-WebVTT Media Segments use a different timescale.\n     */\n\n    const mpegTsInSeconds = MPEGTS / ONE_SECOND_IN_TS;\n    const diff = mpegTsInSeconds - LOCAL + mappingObj.mapping;\n    segmentInfo.cues.forEach(cue => {\n      const duration = cue.endTime - cue.startTime;\n      const startTime = this.handleRollover_(cue.startTime + diff, mappingObj.time);\n      cue.startTime = Math.max(startTime, 0);\n      cue.endTime = Math.max(startTime + duration, 0);\n    });\n\n    if (!playlist.syncInfo) {\n      const firstStart = segmentInfo.cues[0].startTime;\n      const lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n      playlist.syncInfo = {\n        mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n        time: Math.min(firstStart, lastStart - segment.duration)\n      };\n    }\n  }\n  /**\n   * MPEG-TS PES timestamps are limited to 2^33.\n   * Once they reach 2^33, they roll over to 0.\n   * mux.js handles PES timestamp rollover for the following scenarios:\n   * [forward rollover(right)] ->\n   *    PES timestamps monotonically increase, and once they reach 2^33, they roll over to 0\n   * [backward rollover(left)] -->\n   *    we seek back to position before rollover.\n   *\n   * According to the HLS SPEC:\n   * When synchronizing WebVTT with PES timestamps, clients SHOULD account\n   * for cases where the 33-bit PES timestamps have wrapped and the WebVTT\n   * cue times have not.  When the PES timestamp wraps, the WebVTT Segment\n   * SHOULD have a X-TIMESTAMP-MAP header that maps the current WebVTT\n   * time to the new (low valued) PES timestamp.\n   *\n   * So we want to handle rollover here and align VTT Cue start/end time to the player's time.\n   */\n\n\n  handleRollover_(value, reference) {\n    if (reference === null) {\n      return value;\n    }\n\n    let valueIn90khz = value * ONE_SECOND_IN_TS;\n    const referenceIn90khz = reference * ONE_SECOND_IN_TS;\n    let offset;\n\n    if (referenceIn90khz < valueIn90khz) {\n      // - 2^33\n      offset = -8589934592;\n    } else {\n      // + 2^33\n      offset = 8589934592;\n    } // distance(value - reference) > 2^32\n\n\n    while (Math.abs(valueIn90khz - referenceIn90khz) > 4294967296) {\n      valueIn90khz += offset;\n    }\n\n    return valueIn90khz / ONE_SECOND_IN_TS;\n  }\n\n}\n\n/**\n * @file ad-cue-tags.js\n */\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n *\n * @param {Object} track\n *        the track to find the cue for\n *\n * @param {number} mediaTime\n *        the time to find the cue at\n *\n * @return {Object|null}\n *         the found cue or null\n */\n\nconst findAdCue = function (track, mediaTime) {\n  const cues = track.cues;\n\n  for (let i = 0; i < cues.length; i++) {\n    const cue = cues[i];\n\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n\n  return null;\n};\nconst updateAdCues = function (media, track, offset = 0) {\n  if (!media.segments) {\n    return;\n  }\n\n  let mediaTime = offset;\n  let cue;\n\n  for (let i = 0; i < media.segments.length; i++) {\n    const segment = media.segments[i];\n\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      } // otherwise extend cue until a CUE-IN is found\n\n\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime; // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n        const [adOffset, adTotal] = segment.cueOutCont.split('/').map(parseFloat);\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n\n    mediaTime += segment.duration;\n  }\n};\n\nclass SyncInfo {\n  /**\n   * @param {number} start - media sequence start\n   * @param {number} end - media sequence end\n   * @param {number} segmentIndex - index for associated segment\n   * @param {number|null} [partIndex] - index for associated part\n   * @param {boolean} [appended] - appended indicator\n   *\n   */\n  constructor({\n    start,\n    end,\n    segmentIndex,\n    partIndex = null,\n    appended = false\n  }) {\n    this.start_ = start;\n    this.end_ = end;\n    this.segmentIndex_ = segmentIndex;\n    this.partIndex_ = partIndex;\n    this.appended_ = appended;\n  }\n\n  isInRange(targetTime) {\n    return targetTime >= this.start && targetTime < this.end;\n  }\n\n  markAppended() {\n    this.appended_ = true;\n  }\n\n  resetAppendedStatus() {\n    this.appended_ = false;\n  }\n\n  get isAppended() {\n    return this.appended_;\n  }\n\n  get start() {\n    return this.start_;\n  }\n\n  get end() {\n    return this.end_;\n  }\n\n  get segmentIndex() {\n    return this.segmentIndex_;\n  }\n\n  get partIndex() {\n    return this.partIndex_;\n  }\n\n}\n\nclass SyncInfoData {\n  /**\n   *\n   * @param {SyncInfo} segmentSyncInfo - sync info for a given segment\n   * @param {Array<SyncInfo>} [partsSyncInfo] - sync infos for a list of parts for a given segment\n   */\n  constructor(segmentSyncInfo, partsSyncInfo = []) {\n    this.segmentSyncInfo_ = segmentSyncInfo;\n    this.partsSyncInfo_ = partsSyncInfo;\n  }\n\n  get segmentSyncInfo() {\n    return this.segmentSyncInfo_;\n  }\n\n  get partsSyncInfo() {\n    return this.partsSyncInfo_;\n  }\n\n  get hasPartsSyncInfo() {\n    return this.partsSyncInfo_.length > 0;\n  }\n\n  resetAppendStatus() {\n    this.segmentSyncInfo_.resetAppendedStatus();\n    this.partsSyncInfo_.forEach(partSyncInfo => partSyncInfo.resetAppendedStatus());\n  }\n\n}\n\nclass MediaSequenceSync {\n  constructor() {\n    /**\n     * @type {Map<number, SyncInfoData>}\n     * @protected\n     */\n    this.storage_ = new Map();\n    this.diagnostics_ = '';\n    this.isReliable_ = false;\n    this.start_ = -Infinity;\n    this.end_ = Infinity;\n  }\n\n  get start() {\n    return this.start_;\n  }\n\n  get end() {\n    return this.end_;\n  }\n\n  get diagnostics() {\n    return this.diagnostics_;\n  }\n\n  get isReliable() {\n    return this.isReliable_;\n  }\n\n  resetAppendedStatus() {\n    this.storage_.forEach(syncInfoData => syncInfoData.resetAppendStatus());\n  }\n  /**\n   * update sync storage\n   *\n   * @param {Object} playlist\n   * @param {number} currentTime\n   *\n   * @return {void}\n   */\n\n\n  update(playlist, currentTime) {\n    const {\n      mediaSequence,\n      segments\n    } = playlist;\n    this.isReliable_ = this.isReliablePlaylist_(mediaSequence, segments);\n\n    if (!this.isReliable_) {\n      return;\n    }\n\n    return this.updateStorage_(segments, mediaSequence, this.calculateBaseTime_(mediaSequence, segments, currentTime));\n  }\n  /**\n   * @param {number} targetTime\n   * @return {SyncInfo|null}\n   */\n\n\n  getSyncInfoForTime(targetTime) {\n    for (const {\n      segmentSyncInfo,\n      partsSyncInfo\n    } of this.storage_.values()) {\n      // Normal segment flow:\n      if (!partsSyncInfo.length) {\n        if (segmentSyncInfo.isInRange(targetTime)) {\n          return segmentSyncInfo;\n        }\n      } else {\n        // Low latency flow:\n        for (const partSyncInfo of partsSyncInfo) {\n          if (partSyncInfo.isInRange(targetTime)) {\n            return partSyncInfo;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  getSyncInfoForMediaSequence(mediaSequence) {\n    return this.storage_.get(mediaSequence);\n  }\n\n  updateStorage_(segments, startingMediaSequence, startingTime) {\n    const newStorage = new Map();\n    let newDiagnostics = '\\n';\n    let currentStart = startingTime;\n    let currentMediaSequence = startingMediaSequence;\n    this.start_ = currentStart;\n    segments.forEach((segment, segmentIndex) => {\n      const prevSyncInfoData = this.storage_.get(currentMediaSequence);\n      const segmentStart = currentStart;\n      const segmentEnd = segmentStart + segment.duration;\n      const segmentIsAppended = Boolean(prevSyncInfoData && prevSyncInfoData.segmentSyncInfo && prevSyncInfoData.segmentSyncInfo.isAppended);\n      const segmentSyncInfo = new SyncInfo({\n        start: segmentStart,\n        end: segmentEnd,\n        appended: segmentIsAppended,\n        segmentIndex\n      });\n      segment.syncInfo = segmentSyncInfo;\n      let currentPartStart = currentStart;\n      const partsSyncInfo = (segment.parts || []).map((part, partIndex) => {\n        const partStart = currentPartStart;\n        const partEnd = currentPartStart + part.duration;\n        const partIsAppended = Boolean(prevSyncInfoData && prevSyncInfoData.partsSyncInfo && prevSyncInfoData.partsSyncInfo[partIndex] && prevSyncInfoData.partsSyncInfo[partIndex].isAppended);\n        const partSyncInfo = new SyncInfo({\n          start: partStart,\n          end: partEnd,\n          appended: partIsAppended,\n          segmentIndex,\n          partIndex\n        });\n        currentPartStart = partEnd;\n        newDiagnostics += `Media Sequence: ${currentMediaSequence}.${partIndex} | Range: ${partStart} --> ${partEnd} | Appended: ${partIsAppended}\\n`;\n        part.syncInfo = partSyncInfo;\n        return partSyncInfo;\n      });\n      newStorage.set(currentMediaSequence, new SyncInfoData(segmentSyncInfo, partsSyncInfo));\n      newDiagnostics += `${compactSegmentUrlDescription(segment.resolvedUri)} | Media Sequence: ${currentMediaSequence} | Range: ${segmentStart} --> ${segmentEnd} | Appended: ${segmentIsAppended}\\n`;\n      currentMediaSequence++;\n      currentStart = segmentEnd;\n    });\n    this.end_ = currentStart;\n    this.storage_ = newStorage;\n    this.diagnostics_ = newDiagnostics;\n  }\n\n  calculateBaseTime_(mediaSequence, segments, fallback) {\n    if (!this.storage_.size) {\n      // Initial setup flow.\n      return 0;\n    }\n\n    if (this.storage_.has(mediaSequence)) {\n      // Normal flow.\n      return this.storage_.get(mediaSequence).segmentSyncInfo.start;\n    }\n\n    const minMediaSequenceFromStorage = Math.min(...this.storage_.keys()); // This case captures a race condition that can occur if we switch to a new media playlist that is out of date\n    // and still has an older Media Sequence. If this occurs, we extrapolate backwards to get the base time.\n\n    if (mediaSequence < minMediaSequenceFromStorage) {\n      const mediaSequenceDiff = minMediaSequenceFromStorage - mediaSequence;\n      let baseTime = this.storage_.get(minMediaSequenceFromStorage).segmentSyncInfo.start;\n\n      for (let i = 0; i < mediaSequenceDiff; i++) {\n        const segment = segments[i];\n        baseTime -= segment.duration;\n      }\n\n      return baseTime;\n    } // Fallback flow.\n    // There is a gap between last recorded playlist and a new one received.\n\n\n    return fallback;\n  }\n\n  isReliablePlaylist_(mediaSequence, segments) {\n    return mediaSequence !== undefined && mediaSequence !== null && Array.isArray(segments) && segments.length;\n  }\n\n}\nclass DependantMediaSequenceSync extends MediaSequenceSync {\n  constructor(parent) {\n    super();\n    this.parent_ = parent;\n  }\n\n  calculateBaseTime_(mediaSequence, segments, fallback) {\n    if (!this.storage_.size) {\n      const info = this.parent_.getSyncInfoForMediaSequence(mediaSequence);\n\n      if (info) {\n        return info.segmentSyncInfo.start;\n      }\n\n      return 0;\n    }\n\n    return super.calculateBaseTime_(mediaSequence, segments, fallback);\n  }\n\n}\n\n/**\n * @file sync-controller.js\n */\n// synchronize expired playlist segments.\n// the max media sequence diff is 48 hours of live stream\n// content with two second segments. Anything larger than that\n// will likely be invalid.\n\nconst MAX_MEDIA_SEQUENCE_DIFF_FOR_SYNC = 86400;\nconst syncPointStrategies = [// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    if (duration !== Infinity) {\n      const syncPoint = {\n        time: 0,\n        segmentIndex: 0,\n        partIndex: null\n      };\n      return syncPoint;\n    }\n\n    return null;\n  }\n}, {\n  name: 'MediaSequence',\n\n  /**\n   * run media sequence strategy\n   *\n   * @param {SyncController} syncController\n   * @param {Object} playlist\n   * @param {number} duration\n   * @param {number} currentTimeline\n   * @param {number} currentTime\n   * @param {string} type\n   */\n  run: (syncController, playlist, duration, currentTimeline, currentTime, type) => {\n    const mediaSequenceSync = syncController.getMediaSequenceSync(type);\n\n    if (!mediaSequenceSync) {\n      return null;\n    }\n\n    if (!mediaSequenceSync.isReliable) {\n      return null;\n    }\n\n    const syncInfo = mediaSequenceSync.getSyncInfoForTime(currentTime);\n\n    if (!syncInfo) {\n      return null;\n    }\n\n    return {\n      time: syncInfo.start,\n      partIndex: syncInfo.partIndex,\n      segmentIndex: syncInfo.segmentIndex\n    };\n  }\n}, // Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    if (!Object.keys(syncController.timelineToDatetimeMappings).length) {\n      return null;\n    }\n\n    let syncPoint = null;\n    let lastDistance = null;\n    const partsAndSegments = getPartsAndSegments(playlist);\n    currentTime = currentTime || 0;\n\n    for (let i = 0; i < partsAndSegments.length; i++) {\n      // start from the end and loop backwards for live\n      // or start from the front and loop forwards for non-live\n      const index = playlist.endList || currentTime === 0 ? i : partsAndSegments.length - (i + 1);\n      const partAndSegment = partsAndSegments[index];\n      const segment = partAndSegment.segment;\n      const datetimeMapping = syncController.timelineToDatetimeMappings[segment.timeline];\n\n      if (!datetimeMapping || !segment.dateTimeObject) {\n        continue;\n      }\n\n      const segmentTime = segment.dateTimeObject.getTime() / 1000;\n      let start = segmentTime + datetimeMapping; // take part duration into account.\n\n      if (segment.parts && typeof partAndSegment.partIndex === 'number') {\n        for (let z = 0; z < partAndSegment.partIndex; z++) {\n          start += segment.parts[z].duration;\n        }\n      }\n\n      const distance = Math.abs(currentTime - start); // Once the distance begins to increase, or if distance is 0, we have passed\n      // currentTime and can stop looking for better candidates\n\n      if (lastDistance !== null && (distance === 0 || lastDistance < distance)) {\n        break;\n      }\n\n      lastDistance = distance;\n      syncPoint = {\n        time: start,\n        segmentIndex: partAndSegment.segmentIndex,\n        partIndex: partAndSegment.partIndex\n      };\n    }\n\n    return syncPoint;\n  }\n}, // Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    let syncPoint = null;\n    let lastDistance = null;\n    currentTime = currentTime || 0;\n    const partsAndSegments = getPartsAndSegments(playlist);\n\n    for (let i = 0; i < partsAndSegments.length; i++) {\n      // start from the end and loop backwards for live\n      // or start from the front and loop forwards for non-live\n      const index = playlist.endList || currentTime === 0 ? i : partsAndSegments.length - (i + 1);\n      const partAndSegment = partsAndSegments[index];\n      const segment = partAndSegment.segment;\n      const start = partAndSegment.part && partAndSegment.part.start || segment && segment.start;\n\n      if (segment.timeline === currentTimeline && typeof start !== 'undefined') {\n        const distance = Math.abs(currentTime - start); // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: start,\n            segmentIndex: partAndSegment.segmentIndex,\n            partIndex: partAndSegment.partIndex\n          };\n        }\n      }\n    }\n\n    return syncPoint;\n  }\n}, // Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    let syncPoint = null;\n    currentTime = currentTime || 0;\n\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      let lastDistance = null;\n\n      for (let i = 0; i < playlist.discontinuityStarts.length; i++) {\n        const segmentIndex = playlist.discontinuityStarts[i];\n        const discontinuity = playlist.discontinuitySequence + i + 1;\n        const discontinuitySync = syncController.discontinuities[discontinuity];\n\n        if (discontinuitySync) {\n          const distance = Math.abs(currentTime - discontinuitySync.time); // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex,\n              partIndex: null\n            };\n          }\n        }\n      }\n    }\n\n    return syncPoint;\n  }\n}, // Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    if (playlist.syncInfo) {\n      const syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence,\n        partIndex: null\n      };\n      return syncPoint;\n    }\n\n    return null;\n  }\n}];\nclass SyncController extends videojs.EventTarget {\n  constructor(options = {}) {\n    super(); // ...for synching across variants\n\n    this.timelines = [];\n    this.discontinuities = [];\n    this.timelineToDatetimeMappings = {}; // TODO: this map should be only available for HLS. Since only HLS has MediaSequence.\n    //  For some reason this map helps with syncing between quality switch for MPEG-DASH as well.\n    //  Moreover if we disable this map for MPEG-DASH - quality switch will be broken.\n    //  MPEG-DASH should have its own separate sync strategy\n\n    const main = new MediaSequenceSync();\n    const audio = new DependantMediaSequenceSync(main);\n    const vtt = new DependantMediaSequenceSync(main);\n    this.mediaSequenceStorage_ = {\n      main,\n      audio,\n      vtt\n    };\n    this.logger_ = logger('SyncController');\n  }\n  /**\n   *\n   * @param {string} loaderType\n   * @return {MediaSequenceSync|null}\n   */\n\n\n  getMediaSequenceSync(loaderType) {\n    return this.mediaSequenceStorage_[loaderType] || null;\n  }\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @param {number} currentTime\n   *        Current player's time\n   * @param {string} type\n   *        Segment loader type\n   * @return {Object}\n   *          A sync-point object\n   */\n\n\n  getSyncPoint(playlist, duration, currentTimeline, currentTime, type) {\n    // Always use VOD sync point for VOD\n    if (duration !== Infinity) {\n      const vodSyncPointStrategy = syncPointStrategies.find(({\n        name\n      }) => name === 'VOD');\n      return vodSyncPointStrategy.run(this, playlist, duration);\n    }\n\n    const syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime, type);\n\n    if (!syncPoints.length) {\n      // Signal that we need to attempt to get a sync-point manually\n      // by fetching a segment in the playlist and constructing\n      // a sync-point from that information\n      return null;\n    } // If we have exact match just return it instead of finding the nearest distance\n\n\n    for (const syncPointInfo of syncPoints) {\n      const {\n        syncPoint,\n        strategy\n      } = syncPointInfo;\n      const {\n        segmentIndex,\n        time\n      } = syncPoint;\n\n      if (segmentIndex < 0) {\n        continue;\n      }\n\n      const selectedSegment = playlist.segments[segmentIndex];\n      const start = time;\n      const end = start + selectedSegment.duration;\n      this.logger_(`Strategy: ${strategy}. Current time: ${currentTime}. selected segment: ${segmentIndex}. Time: [${start} -> ${end}]}`);\n\n      if (currentTime >= start && currentTime < end) {\n        this.logger_('Found sync point with exact match: ', syncPoint);\n        return syncPoint;\n      }\n    } // Now find the sync-point that is closest to the currentTime because\n    // that should result in the most accurate guess about which segment\n    // to fetch\n\n\n    return this.selectSyncPoint_(syncPoints, {\n      key: 'time',\n      value: currentTime\n    });\n  }\n  /**\n   * Calculate the amount of time that has expired off the playlist during playback\n   *\n   * @param {Playlist} playlist\n   *        Playlist object to calculate expired from\n   * @param {number} duration\n   *        Duration of the MediaSource (Infinity if playling a live source)\n   * @return {number|null}\n   *          The amount of time that has expired off the playlist during playback. Null\n   *          if no sync-points for the playlist can be found.\n   */\n\n\n  getExpiredTime(playlist, duration) {\n    if (!playlist || !playlist.segments) {\n      return null;\n    }\n\n    const syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0); // Without sync-points, there is not enough information to determine the expired time\n\n    if (!syncPoints.length) {\n      return null;\n    }\n\n    const syncPoint = this.selectSyncPoint_(syncPoints, {\n      key: 'segmentIndex',\n      value: 0\n    }); // If the sync-point is beyond the start of the playlist, we want to subtract the\n    // duration from index 0 to syncPoint.segmentIndex instead of adding.\n\n    if (syncPoint.segmentIndex > 0) {\n      syncPoint.time *= -1;\n    }\n\n    return Math.abs(syncPoint.time + sumDurations({\n      defaultDuration: playlist.targetDuration,\n      durationList: playlist.segments,\n      startIndex: syncPoint.segmentIndex,\n      endIndex: 0\n    }));\n  }\n  /**\n   * Runs each sync-point strategy and returns a list of sync-points returned by the\n   * strategies\n   *\n   * @private\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {number} duration\n   *        Duration of the MediaSource (Infinity if playing a live source)\n   * @param {number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @param {number} currentTime\n   *        Current player's time\n   * @param {string} type\n   *        Segment loader type\n   * @return {Array}\n   *          A list of sync-point objects\n   */\n\n\n  runStrategies_(playlist, duration, currentTimeline, currentTime, type) {\n    const syncPoints = []; // Try to find a sync-point in by utilizing various strategies...\n\n    for (let i = 0; i < syncPointStrategies.length; i++) {\n      const strategy = syncPointStrategies[i];\n      const syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime, type);\n\n      if (syncPoint) {\n        syncPoint.strategy = strategy.name;\n        syncPoints.push({\n          strategy: strategy.name,\n          syncPoint\n        });\n      }\n    }\n\n    return syncPoints;\n  }\n  /**\n   * Selects the sync-point nearest the specified target\n   *\n   * @private\n   * @param {Array} syncPoints\n   *        List of sync-points to select from\n   * @param {Object} target\n   *        Object specifying the property and value we are targeting\n   * @param {string} target.key\n   *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n   * @param {number} target.value\n   *        The value to target for the specified key.\n   * @return {Object}\n   *          The sync-point nearest the target\n   */\n\n\n  selectSyncPoint_(syncPoints, target) {\n    let bestSyncPoint = syncPoints[0].syncPoint;\n    let bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n    let bestStrategy = syncPoints[0].strategy;\n\n    for (let i = 1; i < syncPoints.length; i++) {\n      const newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n\n      if (newDistance < bestDistance) {\n        bestDistance = newDistance;\n        bestSyncPoint = syncPoints[i].syncPoint;\n        bestStrategy = syncPoints[i].strategy;\n      }\n    }\n\n    this.logger_(`syncPoint for [${target.key}: ${target.value}] chosen with strategy` + ` [${bestStrategy}]: [time:${bestSyncPoint.time},` + ` segmentIndex:${bestSyncPoint.segmentIndex}` + (typeof bestSyncPoint.partIndex === 'number' ? `,partIndex:${bestSyncPoint.partIndex}` : '') + ']');\n    return bestSyncPoint;\n  }\n  /**\n   * Save any meta-data present on the segments when segments leave\n   * the live window to the playlist to allow for synchronization at the\n   * playlist level later.\n   *\n   * @param {Playlist} oldPlaylist - The previous active playlist\n   * @param {Playlist} newPlaylist - The updated and most current playlist\n   */\n\n\n  saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n    const mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence; // Ignore large media sequence gaps\n\n    if (mediaSequenceDiff > MAX_MEDIA_SEQUENCE_DIFF_FOR_SYNC) {\n      videojs.log.warn(`Not saving expired segment info. Media sequence gap ${mediaSequenceDiff} is too large.`);\n      return;\n    } // When a segment expires from the playlist and it has a start time\n    // save that information as a possible sync-point reference in future\n\n\n    for (let i = mediaSequenceDiff - 1; i >= 0; i--) {\n      const lastRemovedSegment = oldPlaylist.segments[i];\n\n      if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n        newPlaylist.syncInfo = {\n          mediaSequence: oldPlaylist.mediaSequence + i,\n          time: lastRemovedSegment.start\n        };\n        this.logger_(`playlist refresh sync: [time:${newPlaylist.syncInfo.time},` + ` mediaSequence: ${newPlaylist.syncInfo.mediaSequence}]`);\n        this.trigger('syncinfoupdate');\n        break;\n      }\n    }\n  }\n  /**\n   * Save the mapping from playlist's ProgramDateTime to display. This should only happen\n   * before segments start to load.\n   *\n   * @param {Playlist} playlist - The currently active playlist\n   */\n\n\n  setDateTimeMappingForStart(playlist) {\n    // It's possible for the playlist to be updated before playback starts, meaning time\n    // zero is not yet set. If, during these playlist refreshes, a discontinuity is\n    // crossed, then the old time zero mapping (for the prior timeline) would be retained\n    // unless the mappings are cleared.\n    this.timelineToDatetimeMappings = {};\n\n    if (playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {\n      const firstSegment = playlist.segments[0];\n      const playlistTimestamp = firstSegment.dateTimeObject.getTime() / 1000;\n      this.timelineToDatetimeMappings[firstSegment.timeline] = -playlistTimestamp;\n    }\n  }\n  /**\n   * Calculates and saves timeline mappings, playlist sync info, and segment timing values\n   * based on the latest timing information.\n   *\n   * @param {Object} options\n   *        Options object\n   * @param {SegmentInfo} options.segmentInfo\n   *        The current active request information\n   * @param {boolean} options.shouldSaveTimelineMapping\n   *        If there's a timeline change, determines if the timeline mapping should be\n   *        saved for timeline mapping and program date time mappings.\n   */\n\n\n  saveSegmentTimingInfo({\n    segmentInfo,\n    shouldSaveTimelineMapping\n  }) {\n    const didCalculateSegmentTimeMapping = this.calculateSegmentTimeMapping_(segmentInfo, segmentInfo.timingInfo, shouldSaveTimelineMapping);\n    const segment = segmentInfo.segment;\n\n    if (didCalculateSegmentTimeMapping) {\n      this.saveDiscontinuitySyncInfo_(segmentInfo); // If the playlist does not have sync information yet, record that information\n      // now with segment timing information\n\n      if (!segmentInfo.playlist.syncInfo) {\n        segmentInfo.playlist.syncInfo = {\n          mediaSequence: segmentInfo.playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: segment.start\n        };\n      }\n    }\n\n    const dateTime = segment.dateTimeObject;\n\n    if (segment.discontinuity && shouldSaveTimelineMapping && dateTime) {\n      this.timelineToDatetimeMappings[segment.timeline] = -(dateTime.getTime() / 1000);\n    }\n  }\n\n  timestampOffsetForTimeline(timeline) {\n    if (typeof this.timelines[timeline] === 'undefined') {\n      return null;\n    }\n\n    return this.timelines[timeline].time;\n  }\n\n  mappingForTimeline(timeline) {\n    if (typeof this.timelines[timeline] === 'undefined') {\n      return null;\n    }\n\n    return this.timelines[timeline].mapping;\n  }\n  /**\n   * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n   * save that display time to the segment.\n   *\n   * @private\n   * @param {SegmentInfo} segmentInfo\n   *        The current active request information\n   * @param {Object} timingInfo\n   *        The start and end time of the current segment in \"media time\"\n   * @param {boolean} shouldSaveTimelineMapping\n   *        If there's a timeline change, determines if the timeline mapping should be\n   *        saved in timelines.\n   * @return {boolean}\n   *          Returns false if segment time mapping could not be calculated\n   */\n\n\n  calculateSegmentTimeMapping_(segmentInfo, timingInfo, shouldSaveTimelineMapping) {\n    // TODO: remove side effects\n    const segment = segmentInfo.segment;\n    const part = segmentInfo.part;\n    let mappingObj = this.timelines[segmentInfo.timeline];\n    let start;\n    let end;\n\n    if (typeof segmentInfo.timestampOffset === 'number') {\n      mappingObj = {\n        time: segmentInfo.startOfSegment,\n        mapping: segmentInfo.startOfSegment - timingInfo.start\n      };\n\n      if (shouldSaveTimelineMapping) {\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n        this.logger_(`time mapping for timeline ${segmentInfo.timeline}: ` + `[time: ${mappingObj.time}] [mapping: ${mappingObj.mapping}]`);\n      }\n\n      start = segmentInfo.startOfSegment;\n      end = timingInfo.end + mappingObj.mapping;\n    } else if (mappingObj) {\n      start = timingInfo.start + mappingObj.mapping;\n      end = timingInfo.end + mappingObj.mapping;\n    } else {\n      return false;\n    }\n\n    if (part) {\n      part.start = start;\n      part.end = end;\n    } // If we don't have a segment start yet or the start value we got\n    // is less than our current segment.start value, save a new start value.\n    // We have to do this because parts will have segment timing info saved\n    // multiple times and we want segment start to be the earliest part start\n    // value for that segment.\n\n\n    if (!segment.start || start < segment.start) {\n      segment.start = start;\n    }\n\n    segment.end = end;\n    return true;\n  }\n  /**\n   * Each time we have discontinuity in the playlist, attempt to calculate the location\n   * in display of the start of the discontinuity and save that. We also save an accuracy\n   * value so that we save values with the most accuracy (closest to 0.)\n   *\n   * @private\n   * @param {SegmentInfo} segmentInfo - The current active request information\n   */\n\n\n  saveDiscontinuitySyncInfo_(segmentInfo) {\n    const playlist = segmentInfo.playlist;\n    const segment = segmentInfo.segment; // If the current segment is a discontinuity then we know exactly where\n    // the start of the range and it's accuracy is 0 (greater accuracy values\n    // mean more approximation)\n\n    if (segment.discontinuity) {\n      this.discontinuities[segment.timeline] = {\n        time: segment.start,\n        accuracy: 0\n      };\n    } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      // Search for future discontinuities that we can provide better timing\n      // information for and save that information for sync purposes\n      for (let i = 0; i < playlist.discontinuityStarts.length; i++) {\n        const segmentIndex = playlist.discontinuityStarts[i];\n        const discontinuity = playlist.discontinuitySequence + i + 1;\n        const mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n        const accuracy = Math.abs(mediaIndexDiff);\n\n        if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n          let time;\n\n          if (mediaIndexDiff < 0) {\n            time = segment.start - sumDurations({\n              defaultDuration: playlist.targetDuration,\n              durationList: playlist.segments,\n              startIndex: segmentInfo.mediaIndex,\n              endIndex: segmentIndex\n            });\n          } else {\n            time = segment.end + sumDurations({\n              defaultDuration: playlist.targetDuration,\n              durationList: playlist.segments,\n              startIndex: segmentInfo.mediaIndex + 1,\n              endIndex: segmentIndex\n            });\n          }\n\n          this.discontinuities[discontinuity] = {\n            time,\n            accuracy\n          };\n        }\n      }\n    }\n  }\n\n  dispose() {\n    this.trigger('dispose');\n    this.off();\n  }\n\n}\n\n/**\n * The TimelineChangeController acts as a source for segment loaders to listen for and\n * keep track of latest and pending timeline changes. This is useful to ensure proper\n * sync, as each loader may need to make a consideration for what timeline the other\n * loader is on before making changes which could impact the other loader's media.\n *\n * @class TimelineChangeController\n * @extends videojs.EventTarget\n */\n\nclass TimelineChangeController extends videojs.EventTarget {\n  constructor() {\n    super();\n    this.pendingTimelineChanges_ = {};\n    this.lastTimelineChanges_ = {};\n  }\n\n  clearPendingTimelineChange(type) {\n    this.pendingTimelineChanges_[type] = null;\n    this.trigger('pendingtimelinechange');\n  }\n\n  pendingTimelineChange({\n    type,\n    from,\n    to\n  }) {\n    if (typeof from === 'number' && typeof to === 'number') {\n      this.pendingTimelineChanges_[type] = {\n        type,\n        from,\n        to\n      };\n      this.trigger('pendingtimelinechange');\n    }\n\n    return this.pendingTimelineChanges_[type];\n  }\n\n  lastTimelineChange({\n    type,\n    from,\n    to\n  }) {\n    if (typeof from === 'number' && typeof to === 'number') {\n      this.lastTimelineChanges_[type] = {\n        type,\n        from,\n        to\n      };\n      delete this.pendingTimelineChanges_[type];\n      const metadata = {\n        timelineChangeInfo: {\n          from,\n          to\n        }\n      };\n      this.trigger({\n        type: 'timelinechange',\n        metadata\n      });\n    }\n\n    return this.lastTimelineChanges_[type];\n  }\n\n  dispose() {\n    this.trigger('dispose');\n    this.pendingTimelineChanges_ = {};\n    this.lastTimelineChanges_ = {};\n    this.off();\n  }\n\n}\n\n/* rollup-plugin-worker-factory start for worker!/home/runner/work/http-streaming/http-streaming/src/decrypter-worker.js */\nconst workerCode = transform(getWorkerString(function () {\n  /**\n   * @file stream.js\n   */\n\n  /**\n   * A lightweight readable stream implemention that handles event dispatching.\n   *\n   * @class Stream\n   */\n\n  var Stream = /*#__PURE__*/function () {\n    function Stream() {\n      this.listeners = {};\n    }\n    /**\n     * Add a listener for a specified event type.\n     *\n     * @param {string} type the event name\n     * @param {Function} listener the callback to be invoked when an event of\n     * the specified type occurs\n     */\n\n\n    var _proto = Stream.prototype;\n\n    _proto.on = function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n\n      this.listeners[type].push(listener);\n    }\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {string} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {boolean} if we could turn it off or not\n     */\n    ;\n\n    _proto.off = function off(type, listener) {\n      if (!this.listeners[type]) {\n        return false;\n      }\n\n      var index = this.listeners[type].indexOf(listener); // TODO: which is better?\n      // In Video.js we slice listener functions\n      // on trigger so that it does not mess up the order\n      // while we loop through.\n      //\n      // Here we slice on off so that the loop in trigger\n      // can continue using it's old reference to loop without\n      // messing up the order.\n\n      this.listeners[type] = this.listeners[type].slice(0);\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {string} type the event name\n     */\n    ;\n\n    _proto.trigger = function trigger(type) {\n      var callbacks = this.listeners[type];\n\n      if (!callbacks) {\n        return;\n      } // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n\n\n      if (arguments.length === 2) {\n        var length = callbacks.length;\n\n        for (var i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        var args = Array.prototype.slice.call(arguments, 1);\n        var _length = callbacks.length;\n\n        for (var _i = 0; _i < _length; ++_i) {\n          callbacks[_i].apply(this, args);\n        }\n      }\n    }\n    /**\n     * Destroys the stream and cleans up.\n     */\n    ;\n\n    _proto.dispose = function dispose() {\n      this.listeners = {};\n    }\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */\n    ;\n\n    _proto.pipe = function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    };\n\n    return Stream;\n  }();\n  /*! @name pkcs7 @version 1.0.4 @license Apache-2.0 */\n\n  /**\n   * Returns the subarray of a Uint8Array without PKCS#7 padding.\n   *\n   * @param padded {Uint8Array} unencrypted bytes that have been padded\n   * @return {Uint8Array} the unpadded bytes\n   * @see http://tools.ietf.org/html/rfc5652\n   */\n\n\n  function unpad(padded) {\n    return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n  }\n  /*! @name aes-decrypter @version 4.0.2 @license Apache-2.0 */\n\n  /**\n   * @file aes.js\n   *\n   * This file contains an adaptation of the AES decryption algorithm\n   * from the Standford Javascript Cryptography Library. That work is\n   * covered by the following copyright and permissions notice:\n   *\n   * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n   * All rights reserved.\n   *\n   * Redistribution and use in source and binary forms, with or without\n   * modification, are permitted provided that the following conditions are\n   * met:\n   *\n   * 1. Redistributions of source code must retain the above copyright\n   *    notice, this list of conditions and the following disclaimer.\n   *\n   * 2. Redistributions in binary form must reproduce the above\n   *    copyright notice, this list of conditions and the following\n   *    disclaimer in the documentation and/or other materials provided\n   *    with the distribution.\n   *\n   * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n   * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n   * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n   * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n   * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n   * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   *\n   * The views and conclusions contained in the software and documentation\n   * are those of the authors and should not be interpreted as representing\n   * official policies, either expressed or implied, of the authors.\n   */\n\n  /**\n   * Expand the S-box tables.\n   *\n   * @private\n   */\n\n\n  const precompute = function () {\n    const tables = [[[], [], [], [], []], [[], [], [], [], []]];\n    const encTable = tables[0];\n    const decTable = tables[1];\n    const sbox = encTable[4];\n    const sboxInv = decTable[4];\n    let i;\n    let x;\n    let xInv;\n    const d = [];\n    const th = [];\n    let x2;\n    let x4;\n    let x8;\n    let s;\n    let tEnc;\n    let tDec; // Compute double and third tables\n\n    for (i = 0; i < 256; i++) {\n      th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n    }\n\n    for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n      // Compute sbox\n      s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n      s = s >> 8 ^ s & 255 ^ 99;\n      sbox[x] = s;\n      sboxInv[s] = x; // Compute MixColumns\n\n      x8 = d[x4 = d[x2 = d[x]]];\n      tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n      tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n      for (i = 0; i < 4; i++) {\n        encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n      }\n    } // Compactify. Considerable speedup on Firefox.\n\n\n    for (i = 0; i < 5; i++) {\n      encTable[i] = encTable[i].slice(0);\n      decTable[i] = decTable[i].slice(0);\n    }\n\n    return tables;\n  };\n\n  let aesTables = null;\n  /**\n   * Schedule out an AES key for both encryption and decryption. This\n   * is a low-level class. Use a cipher mode to do bulk encryption.\n   *\n   * @class AES\n   * @param key {Array} The key as an array of 4, 6 or 8 words.\n   */\n\n  class AES {\n    constructor(key) {\n      /**\n      * The expanded S-box and inverse S-box tables. These will be computed\n      * on the client so that we don't have to send them down the wire.\n      *\n      * There are two tables, _tables[0] is for encryption and\n      * _tables[1] is for decryption.\n      *\n      * The first 4 sub-tables are the expanded S-box with MixColumns. The\n      * last (_tables[01][4]) is the S-box itself.\n      *\n      * @private\n      */\n      // if we have yet to precompute the S-box tables\n      // do so now\n      if (!aesTables) {\n        aesTables = precompute();\n      } // then make a copy of that object for use\n\n\n      this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n      let i;\n      let j;\n      let tmp;\n      const sbox = this._tables[0][4];\n      const decTable = this._tables[1];\n      const keyLen = key.length;\n      let rcon = 1;\n\n      if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n        throw new Error('Invalid aes key size');\n      }\n\n      const encKey = key.slice(0);\n      const decKey = [];\n      this._key = [encKey, decKey]; // schedule encryption keys\n\n      for (i = keyLen; i < 4 * keyLen + 28; i++) {\n        tmp = encKey[i - 1]; // apply sbox\n\n        if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n          tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255]; // shift rows and add rcon\n\n          if (i % keyLen === 0) {\n            tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n            rcon = rcon << 1 ^ (rcon >> 7) * 283;\n          }\n        }\n\n        encKey[i] = encKey[i - keyLen] ^ tmp;\n      } // schedule decryption keys\n\n\n      for (j = 0; i; j++, i--) {\n        tmp = encKey[j & 3 ? i : i - 4];\n\n        if (i <= 4 || j < 4) {\n          decKey[j] = tmp;\n        } else {\n          decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n        }\n      }\n    }\n    /**\n     * Decrypt 16 bytes, specified as four 32-bit words.\n     *\n     * @param {number} encrypted0 the first word to decrypt\n     * @param {number} encrypted1 the second word to decrypt\n     * @param {number} encrypted2 the third word to decrypt\n     * @param {number} encrypted3 the fourth word to decrypt\n     * @param {Int32Array} out the array to write the decrypted words\n     * into\n     * @param {number} offset the offset into the output array to start\n     * writing results\n     * @return {Array} The plaintext.\n     */\n\n\n    decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n      const key = this._key[1]; // state variables a,b,c,d are loaded with pre-whitened data\n\n      let a = encrypted0 ^ key[0];\n      let b = encrypted3 ^ key[1];\n      let c = encrypted2 ^ key[2];\n      let d = encrypted1 ^ key[3];\n      let a2;\n      let b2;\n      let c2; // key.length === 2 ?\n\n      const nInnerRounds = key.length / 4 - 2;\n      let i;\n      let kIndex = 4;\n      const table = this._tables[1]; // load up the tables\n\n      const table0 = table[0];\n      const table1 = table[1];\n      const table2 = table[2];\n      const table3 = table[3];\n      const sbox = table[4]; // Inner rounds. Cribbed from OpenSSL.\n\n      for (i = 0; i < nInnerRounds; i++) {\n        a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n        b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n        c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n        d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n        kIndex += 4;\n        a = a2;\n        b = b2;\n        c = c2;\n      } // Last round.\n\n\n      for (i = 0; i < 4; i++) {\n        out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n        a2 = a;\n        a = b;\n        b = c;\n        c = d;\n        d = a2;\n      }\n    }\n\n  }\n  /**\n   * @file async-stream.js\n   */\n\n  /**\n   * A wrapper around the Stream class to use setTimeout\n   * and run stream \"jobs\" Asynchronously\n   *\n   * @class AsyncStream\n   * @extends Stream\n   */\n\n\n  class AsyncStream extends Stream {\n    constructor() {\n      super(Stream);\n      this.jobs = [];\n      this.delay = 1;\n      this.timeout_ = null;\n    }\n    /**\n     * process an async job\n     *\n     * @private\n     */\n\n\n    processJob_() {\n      this.jobs.shift()();\n\n      if (this.jobs.length) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      } else {\n        this.timeout_ = null;\n      }\n    }\n    /**\n     * push a job into the stream\n     *\n     * @param {Function} job the job to push into the stream\n     */\n\n\n    push(job) {\n      this.jobs.push(job);\n\n      if (!this.timeout_) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      }\n    }\n\n  }\n  /**\n   * @file decrypter.js\n   *\n   * An asynchronous implementation of AES-128 CBC decryption with\n   * PKCS#7 padding.\n   */\n\n  /**\n   * Convert network-order (big-endian) bytes into their little-endian\n   * representation.\n   */\n\n\n  const ntoh = function (word) {\n    return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n  };\n  /**\n   * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n   *\n   * @param {Uint8Array} encrypted the encrypted bytes\n   * @param {Uint32Array} key the bytes of the decryption key\n   * @param {Uint32Array} initVector the initialization vector (IV) to\n   * use for the first round of CBC.\n   * @return {Uint8Array} the decrypted bytes\n   *\n   * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n   * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n   * @see https://tools.ietf.org/html/rfc2315\n   */\n\n\n  const decrypt = function (encrypted, key, initVector) {\n    // word-level access to the encrypted bytes\n    const encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n    const decipher = new AES(Array.prototype.slice.call(key)); // byte and word-level access for the decrypted output\n\n    const decrypted = new Uint8Array(encrypted.byteLength);\n    const decrypted32 = new Int32Array(decrypted.buffer); // temporary variables for working with the IV, encrypted, and\n    // decrypted data\n\n    let init0;\n    let init1;\n    let init2;\n    let init3;\n    let encrypted0;\n    let encrypted1;\n    let encrypted2;\n    let encrypted3; // iteration variable\n\n    let wordIx; // pull out the words of the IV to ensure we don't modify the\n    // passed-in reference and easier access\n\n    init0 = initVector[0];\n    init1 = initVector[1];\n    init2 = initVector[2];\n    init3 = initVector[3]; // decrypt four word sequences, applying cipher-block chaining (CBC)\n    // to each decrypted block\n\n    for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n      // convert big-endian (network order) words into little-endian\n      // (javascript order)\n      encrypted0 = ntoh(encrypted32[wordIx]);\n      encrypted1 = ntoh(encrypted32[wordIx + 1]);\n      encrypted2 = ntoh(encrypted32[wordIx + 2]);\n      encrypted3 = ntoh(encrypted32[wordIx + 3]); // decrypt the block\n\n      decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx); // XOR with the IV, and restore network byte-order to obtain the\n      // plaintext\n\n      decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n      decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n      decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n      decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3); // setup the IV for the next round\n\n      init0 = encrypted0;\n      init1 = encrypted1;\n      init2 = encrypted2;\n      init3 = encrypted3;\n    }\n\n    return decrypted;\n  };\n  /**\n   * The `Decrypter` class that manages decryption of AES\n   * data through `AsyncStream` objects and the `decrypt`\n   * function\n   *\n   * @param {Uint8Array} encrypted the encrypted bytes\n   * @param {Uint32Array} key the bytes of the decryption key\n   * @param {Uint32Array} initVector the initialization vector (IV) to\n   * @param {Function} done the function to run when done\n   * @class Decrypter\n   */\n\n\n  class Decrypter {\n    constructor(encrypted, key, initVector, done) {\n      const step = Decrypter.STEP;\n      const encrypted32 = new Int32Array(encrypted.buffer);\n      const decrypted = new Uint8Array(encrypted.byteLength);\n      let i = 0;\n      this.asyncStream_ = new AsyncStream(); // split up the encryption job and do the individual chunks asynchronously\n\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n\n      for (i = step; i < encrypted32.length; i += step) {\n        initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n      } // invoke the done() callback when everything is finished\n\n\n      this.asyncStream_.push(function () {\n        // remove pkcs#7 padding from the decrypted bytes\n        done(null, unpad(decrypted));\n      });\n    }\n    /**\n     * a getter for step the maximum number of bytes to process at one time\n     *\n     * @return {number} the value of step 32000\n     */\n\n\n    static get STEP() {\n      // 4 * 8000;\n      return 32000;\n    }\n    /**\n     * @private\n     */\n\n\n    decryptChunk_(encrypted, key, initVector, decrypted) {\n      return function () {\n        const bytes = decrypt(encrypted, key, initVector);\n        decrypted.set(bytes, encrypted.byteOffset);\n      };\n    }\n\n  }\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n  var win;\n\n  if (typeof window !== \"undefined\") {\n    win = window;\n  } else if (typeof commonjsGlobal !== \"undefined\") {\n    win = commonjsGlobal;\n  } else if (typeof self !== \"undefined\") {\n    win = self;\n  } else {\n    win = {};\n  }\n\n  var window_1 = win;\n\n  var isArrayBufferView = function isArrayBufferView(obj) {\n    if (ArrayBuffer.isView === 'function') {\n      return ArrayBuffer.isView(obj);\n    }\n\n    return obj && obj.buffer instanceof ArrayBuffer;\n  };\n\n  var BigInt = window_1.BigInt || Number;\n  [BigInt('0x1'), BigInt('0x100'), BigInt('0x10000'), BigInt('0x1000000'), BigInt('0x100000000'), BigInt('0x10000000000'), BigInt('0x1000000000000'), BigInt('0x100000000000000'), BigInt('0x10000000000000000')];\n\n  (function () {\n    var a = new Uint16Array([0xFFCC]);\n    var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\n\n    if (b[0] === 0xFF) {\n      return 'big';\n    }\n\n    if (b[0] === 0xCC) {\n      return 'little';\n    }\n\n    return 'unknown';\n  })();\n  /**\n   * Creates an object for sending to a web worker modifying properties that are TypedArrays\n   * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n   *\n   * @param {Object} message\n   *        Object of properties and values to send to the web worker\n   * @return {Object}\n   *         Modified message with TypedArray values expanded\n   * @function createTransferableMessage\n   */\n\n\n  const createTransferableMessage = function (message) {\n    const transferable = {};\n    Object.keys(message).forEach(key => {\n      const value = message[key];\n\n      if (isArrayBufferView(value)) {\n        transferable[key] = {\n          bytes: value.buffer,\n          byteOffset: value.byteOffset,\n          byteLength: value.byteLength\n        };\n      } else {\n        transferable[key] = value;\n      }\n    });\n    return transferable;\n  };\n  /* global self */\n\n  /**\n   * Our web worker interface so that things can talk to aes-decrypter\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   */\n\n\n  self.onmessage = function (event) {\n    const data = event.data;\n    const encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n    const key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n    const iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n    /* eslint-disable no-new, handle-callback-err */\n\n    new Decrypter(encrypted, key, iv, function (err, bytes) {\n      self.postMessage(createTransferableMessage({\n        source: data.source,\n        decrypted: bytes\n      }), [bytes.buffer]);\n    });\n    /* eslint-enable */\n  };\n}));\nvar Decrypter = factory(workerCode);\n/* rollup-plugin-worker-factory end for worker!/home/runner/work/http-streaming/http-streaming/src/decrypter-worker.js */\n\n/**\n * Convert the properties of an HLS track into an audioTrackKind.\n *\n * @private\n */\n\nconst audioTrackKind_ = properties => {\n  let kind = properties.default ? 'main' : 'alternative';\n\n  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n    kind = 'main-desc';\n  }\n\n  return kind;\n};\n/**\n * Pause provided segment loader and playlist loader if active\n *\n * @param {SegmentLoader} segmentLoader\n *        SegmentLoader to pause\n * @param {Object} mediaType\n *        Active media type\n * @function stopLoaders\n */\n\n\nconst stopLoaders = (segmentLoader, mediaType) => {\n  segmentLoader.abort();\n  segmentLoader.pause();\n\n  if (mediaType && mediaType.activePlaylistLoader) {\n    mediaType.activePlaylistLoader.pause();\n    mediaType.activePlaylistLoader = null;\n  }\n};\n/**\n * Start loading provided segment loader and playlist loader\n *\n * @param {PlaylistLoader} playlistLoader\n *        PlaylistLoader to start loading\n * @param {Object} mediaType\n *        Active media type\n * @function startLoaders\n */\n\nconst startLoaders = (playlistLoader, mediaType) => {\n  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the\n  // playlist loader\n  mediaType.activePlaylistLoader = playlistLoader;\n  playlistLoader.load();\n};\n/**\n * Returns a function to be called when the media group changes. It performs a\n * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a\n * change of group is merely a rendition switch of the same content at another encoding,\n * rather than a change of content, such as switching audio from English to Spanish.\n *\n * @param {string} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a non-destructive resync of SegmentLoader when the active media\n *         group changes.\n * @function onGroupChanged\n */\n\nconst onGroupChanged = (type, settings) => () => {\n  const {\n    segmentLoaders: {\n      [type]: segmentLoader,\n      main: mainSegmentLoader\n    },\n    mediaTypes: {\n      [type]: mediaType\n    }\n  } = settings;\n  const activeTrack = mediaType.activeTrack();\n  const activeGroup = mediaType.getActiveGroup();\n  const previousActiveLoader = mediaType.activePlaylistLoader;\n  const lastGroup = mediaType.lastGroup_; // the group did not change do nothing\n\n  if (activeGroup && lastGroup && activeGroup.id === lastGroup.id) {\n    return;\n  }\n\n  mediaType.lastGroup_ = activeGroup;\n  mediaType.lastTrack_ = activeTrack;\n  stopLoaders(segmentLoader, mediaType);\n\n  if (!activeGroup || activeGroup.isMainPlaylist) {\n    // there is no group active or active group is a main playlist and won't change\n    return;\n  }\n\n  if (!activeGroup.playlistLoader) {\n    if (previousActiveLoader) {\n      // The previous group had a playlist loader but the new active group does not\n      // this means we are switching from demuxed to muxed audio. In this case we want to\n      // do a destructive reset of the main segment loader and not restart the audio\n      // loaders.\n      mainSegmentLoader.resetEverything();\n    }\n\n    return;\n  } // Non-destructive resync\n\n\n  segmentLoader.resyncLoader();\n  startLoaders(activeGroup.playlistLoader, mediaType);\n};\nconst onGroupChanging = (type, settings) => () => {\n  const {\n    segmentLoaders: {\n      [type]: segmentLoader\n    },\n    mediaTypes: {\n      [type]: mediaType\n    }\n  } = settings;\n  mediaType.lastGroup_ = null;\n  segmentLoader.abort();\n  segmentLoader.pause();\n};\n/**\n * Returns a function to be called when the media track changes. It performs a\n * destructive reset of the SegmentLoader to ensure we start loading as close to\n * currentTime as possible.\n *\n * @param {string} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a destructive reset of SegmentLoader when the active media\n *         track changes.\n * @function onTrackChanged\n */\n\nconst onTrackChanged = (type, settings) => () => {\n  const {\n    mainPlaylistLoader,\n    segmentLoaders: {\n      [type]: segmentLoader,\n      main: mainSegmentLoader\n    },\n    mediaTypes: {\n      [type]: mediaType\n    }\n  } = settings;\n  const activeTrack = mediaType.activeTrack();\n  const activeGroup = mediaType.getActiveGroup();\n  const previousActiveLoader = mediaType.activePlaylistLoader;\n  const lastTrack = mediaType.lastTrack_; // track did not change, do nothing\n\n  if (lastTrack && activeTrack && lastTrack.id === activeTrack.id) {\n    return;\n  }\n\n  mediaType.lastGroup_ = activeGroup;\n  mediaType.lastTrack_ = activeTrack;\n  stopLoaders(segmentLoader, mediaType);\n\n  if (!activeGroup) {\n    // there is no group active so we do not want to restart loaders\n    return;\n  }\n\n  if (activeGroup.isMainPlaylist) {\n    // track did not change, do nothing\n    if (!activeTrack || !lastTrack || activeTrack.id === lastTrack.id) {\n      return;\n    }\n\n    const pc = settings.vhs.playlistController_;\n    const newPlaylist = pc.selectPlaylist(); // media will not change do nothing\n\n    if (pc.media() === newPlaylist) {\n      return;\n    }\n\n    mediaType.logger_(`track change. Switching main audio from ${lastTrack.id} to ${activeTrack.id}`);\n    mainPlaylistLoader.pause();\n    mainSegmentLoader.resetEverything();\n    pc.fastQualityChange_(newPlaylist);\n    return;\n  }\n\n  if (type === 'AUDIO') {\n    if (!activeGroup.playlistLoader) {\n      // when switching from demuxed audio/video to muxed audio/video (noted by no\n      // playlist loader for the audio group), we want to do a destructive reset of the\n      // main segment loader and not restart the audio loaders\n      mainSegmentLoader.setAudio(true); // don't have to worry about disabling the audio of the audio segment loader since\n      // it should be stopped\n\n      mainSegmentLoader.resetEverything();\n      return;\n    } // although the segment loader is an audio segment loader, call the setAudio\n    // function to ensure it is prepared to re-append the init segment (or handle other\n    // config changes)\n\n\n    segmentLoader.setAudio(true);\n    mainSegmentLoader.setAudio(false);\n  }\n\n  if (previousActiveLoader === activeGroup.playlistLoader) {\n    // Nothing has actually changed. This can happen because track change events can fire\n    // multiple times for a \"single\" change. One for enabling the new active track, and\n    // one for disabling the track that was active\n    startLoaders(activeGroup.playlistLoader, mediaType);\n    return;\n  }\n\n  if (segmentLoader.track) {\n    // For WebVTT, set the new text track in the segmentloader\n    segmentLoader.track(activeTrack);\n  } // destructive reset\n\n\n  segmentLoader.resetEverything();\n  startLoaders(activeGroup.playlistLoader, mediaType);\n};\nconst onError = {\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning (or error if the playlist is excluded) to\n   *         console and switches back to default audio track.\n   * @function onError.AUDIO\n   */\n  AUDIO: (type, settings) => () => {\n    const {\n      mediaTypes: {\n        [type]: mediaType\n      },\n      excludePlaylist\n    } = settings; // switch back to default audio track\n\n    const activeTrack = mediaType.activeTrack();\n    const activeGroup = mediaType.activeGroup();\n    const id = (activeGroup.filter(group => group.default)[0] || activeGroup[0]).id;\n    const defaultTrack = mediaType.tracks[id];\n\n    if (activeTrack === defaultTrack) {\n      // Default track encountered an error. All we can do now is exclude the current\n      // rendition and hope another will switch audio groups\n      excludePlaylist({\n        error: {\n          message: 'Problem encountered loading the default audio track.'\n        }\n      });\n      return;\n    }\n\n    videojs.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');\n\n    for (const trackId in mediaType.tracks) {\n      mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;\n    }\n\n    mediaType.onTrackChanged();\n  },\n\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning to console and disables the active subtitle track\n   * @function onError.SUBTITLES\n   */\n  SUBTITLES: (type, settings) => () => {\n    const {\n      mediaTypes: {\n        [type]: mediaType\n      }\n    } = settings;\n    videojs.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');\n    const track = mediaType.activeTrack();\n\n    if (track) {\n      track.mode = 'disabled';\n    }\n\n    mediaType.onTrackChanged();\n  }\n};\nconst setupListeners = {\n  /**\n   * Setup event listeners for audio playlist loader\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.AUDIO\n   */\n  AUDIO: (type, playlistLoader, settings) => {\n    if (!playlistLoader) {\n      // no playlist loader means audio will be muxed with the video\n      return;\n    }\n\n    const {\n      tech,\n      requestOptions,\n      segmentLoaders: {\n        [type]: segmentLoader\n      }\n    } = settings;\n    playlistLoader.on('loadedmetadata', () => {\n      const media = playlistLoader.media();\n      segmentLoader.playlist(media, requestOptions); // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('loadedplaylist', () => {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\n\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('error', onError[type](type, settings));\n  },\n\n  /**\n   * Setup event listeners for subtitle playlist loader\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.SUBTITLES\n   */\n  SUBTITLES: (type, playlistLoader, settings) => {\n    const {\n      tech,\n      requestOptions,\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      mediaTypes: {\n        [type]: mediaType\n      }\n    } = settings;\n    playlistLoader.on('loadedmetadata', () => {\n      const media = playlistLoader.media();\n      segmentLoader.playlist(media, requestOptions);\n      segmentLoader.track(mediaType.activeTrack()); // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('loadedplaylist', () => {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\n\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('error', onError[type](type, settings));\n  }\n};\nconst initialize = {\n  /**\n   * Setup PlaylistLoaders and AudioTracks for the audio groups\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.AUDIO\n   */\n  'AUDIO': (type, settings) => {\n    const {\n      vhs,\n      sourceType,\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      requestOptions,\n      main: {\n        mediaGroups\n      },\n      mediaTypes: {\n        [type]: {\n          groups,\n          tracks,\n          logger_\n        }\n      },\n      mainPlaylistLoader\n    } = settings;\n    const audioOnlyMain = isAudioOnly(mainPlaylistLoader.main); // force a default if we have none\n\n    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {\n      mediaGroups[type] = {\n        main: {\n          default: {\n            default: true\n          }\n        }\n      };\n\n      if (audioOnlyMain) {\n        mediaGroups[type].main.default.playlists = mainPlaylistLoader.main.playlists;\n      }\n    }\n\n    for (const groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (const variantLabel in mediaGroups[type][groupId]) {\n        let properties = mediaGroups[type][groupId][variantLabel];\n        let playlistLoader;\n\n        if (audioOnlyMain) {\n          logger_(`AUDIO group '${groupId}' label '${variantLabel}' is a main playlist`);\n          properties.isMainPlaylist = true;\n          playlistLoader = null; // if vhs-json was provided as the source, and the media playlist was resolved,\n          // use the resolved media playlist object\n        } else if (sourceType === 'vhs-json' && properties.playlists) {\n          playlistLoader = new PlaylistLoader(properties.playlists[0], vhs, requestOptions);\n        } else if (properties.resolvedUri) {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions); // TODO: dash isn't the only type with properties.playlists\n          // should we even have properties.playlists in this check.\n        } else if (properties.playlists && sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, mainPlaylistLoader);\n        } else {\n          // no resolvedUri means the audio is muxed with the video when using this\n          // audio track\n          playlistLoader = null;\n        }\n\n        properties = merge({\n          id: variantLabel,\n          playlistLoader\n        }, properties);\n        setupListeners[type](type, properties.playlistLoader, settings);\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          const track = new videojs.AudioTrack({\n            id: variantLabel,\n            kind: audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            default: properties.default,\n            label: variantLabel\n          });\n          tracks[variantLabel] = track;\n        }\n      }\n    } // setup single error event handler for the segment loader\n\n\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n\n  /**\n   * Setup PlaylistLoaders and TextTracks for the subtitle groups\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.SUBTITLES\n   */\n  'SUBTITLES': (type, settings) => {\n    const {\n      tech,\n      vhs,\n      sourceType,\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      requestOptions,\n      main: {\n        mediaGroups\n      },\n      mediaTypes: {\n        [type]: {\n          groups,\n          tracks\n        }\n      },\n      mainPlaylistLoader\n    } = settings;\n\n    for (const groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (const variantLabel in mediaGroups[type][groupId]) {\n        if (!vhs.options_.useForcedSubtitles && mediaGroups[type][groupId][variantLabel].forced) {\n          // Subtitle playlists with the forced attribute are not selectable in Safari.\n          // According to Apple's HLS Authoring Specification:\n          //   If content has forced subtitles and regular subtitles in a given language,\n          //   the regular subtitles track in that language MUST contain both the forced\n          //   subtitles and the regular subtitles for that language.\n          // Because of this requirement and that Safari does not add forced subtitles,\n          // forced subtitles are skipped here to maintain consistent experience across\n          // all platforms\n          continue;\n        }\n\n        let properties = mediaGroups[type][groupId][variantLabel];\n        let playlistLoader;\n\n        if (sourceType === 'hls') {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions);\n        } else if (sourceType === 'dash') {\n          const playlists = properties.playlists.filter(p => p.excludeUntil !== Infinity);\n\n          if (!playlists.length) {\n            return;\n          }\n\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, mainPlaylistLoader);\n        } else if (sourceType === 'vhs-json') {\n          playlistLoader = new PlaylistLoader( // if the vhs-json object included the media playlist, use the media playlist\n          // as provided, otherwise use the resolved URI to load the playlist\n          properties.playlists ? properties.playlists[0] : properties.resolvedUri, vhs, requestOptions);\n        }\n\n        properties = merge({\n          id: variantLabel,\n          playlistLoader\n        }, properties);\n        setupListeners[type](type, properties.playlistLoader, settings);\n        groups[groupId].push(properties);\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          const track = tech.addRemoteTextTrack({\n            id: variantLabel,\n            kind: 'subtitles',\n            default: properties.default && properties.autoselect,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n          tracks[variantLabel] = track;\n        }\n      }\n    } // setup single error event handler for the segment loader\n\n\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n\n  /**\n   * Setup TextTracks for the closed-caption groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize['CLOSED-CAPTIONS']\n   */\n  'CLOSED-CAPTIONS': (type, settings) => {\n    const {\n      tech,\n      main: {\n        mediaGroups\n      },\n      mediaTypes: {\n        [type]: {\n          groups,\n          tracks\n        }\n      }\n    } = settings;\n\n    for (const groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n\n      for (const variantLabel in mediaGroups[type][groupId]) {\n        const properties = mediaGroups[type][groupId][variantLabel]; // Look for either 608 (CCn) or 708 (SERVICEn) caption services\n\n        if (!/^(?:CC|SERVICE)/.test(properties.instreamId)) {\n          continue;\n        }\n\n        const captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {};\n        let newProps = {\n          label: variantLabel,\n          language: properties.language,\n          instreamId: properties.instreamId,\n          default: properties.default && properties.autoselect\n        };\n\n        if (captionServices[newProps.instreamId]) {\n          newProps = merge(newProps, captionServices[newProps.instreamId]);\n        }\n\n        if (newProps.default === undefined) {\n          delete newProps.default;\n        } // No PlaylistLoader is required for Closed-Captions because the captions are\n        // embedded within the video stream\n\n\n        groups[groupId].push(merge({\n          id: variantLabel\n        }, properties));\n\n        if (typeof tracks[variantLabel] === 'undefined') {\n          const track = tech.addRemoteTextTrack({\n            id: newProps.instreamId,\n            kind: 'captions',\n            default: newProps.default,\n            language: newProps.language,\n            label: newProps.label\n          }, false).track;\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n  }\n};\n\nconst groupMatch = (list, media) => {\n  for (let i = 0; i < list.length; i++) {\n    if (playlistMatch(media, list[i])) {\n      return true;\n    }\n\n    if (list[i].playlists && groupMatch(list[i].playlists, media)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Returns a function used to get the active group of the provided type\n *\n * @param {string} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Function that returns the active media group for the provided type. Takes an\n *         optional parameter {TextTrack} track. If no track is provided, a list of all\n *         variants in the group, otherwise the variant corresponding to the provided\n *         track is returned.\n * @function activeGroup\n */\n\n\nconst activeGroup = (type, settings) => track => {\n  const {\n    mainPlaylistLoader,\n    mediaTypes: {\n      [type]: {\n        groups\n      }\n    }\n  } = settings;\n  const media = mainPlaylistLoader.media();\n\n  if (!media) {\n    return null;\n  }\n\n  let variants = null; // set to variants to main media active group\n\n  if (media.attributes[type]) {\n    variants = groups[media.attributes[type]];\n  }\n\n  const groupKeys = Object.keys(groups);\n\n  if (!variants) {\n    // find the mainPlaylistLoader media\n    // that is in a media group if we are dealing\n    // with audio only\n    if (type === 'AUDIO' && groupKeys.length > 1 && isAudioOnly(settings.main)) {\n      for (let i = 0; i < groupKeys.length; i++) {\n        const groupPropertyList = groups[groupKeys[i]];\n\n        if (groupMatch(groupPropertyList, media)) {\n          variants = groupPropertyList;\n          break;\n        }\n      } // use the main group if it exists\n\n    } else if (groups.main) {\n      variants = groups.main; // only one group, use that one\n    } else if (groupKeys.length === 1) {\n      variants = groups[groupKeys[0]];\n    }\n  }\n\n  if (typeof track === 'undefined') {\n    return variants;\n  }\n\n  if (track === null || !variants) {\n    // An active track was specified so a corresponding group is expected. track === null\n    // means no track is currently active so there is no corresponding group\n    return null;\n  }\n\n  return variants.filter(props => props.id === track.id)[0] || null;\n};\nconst activeTrack = {\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.AUDIO\n   */\n  AUDIO: (type, settings) => () => {\n    const {\n      mediaTypes: {\n        [type]: {\n          tracks\n        }\n      }\n    } = settings;\n\n    for (const id in tracks) {\n      if (tracks[id].enabled) {\n        return tracks[id];\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.SUBTITLES\n   */\n  SUBTITLES: (type, settings) => () => {\n    const {\n      mediaTypes: {\n        [type]: {\n          tracks\n        }\n      }\n    } = settings;\n\n    for (const id in tracks) {\n      if (tracks[id].mode === 'showing' || tracks[id].mode === 'hidden') {\n        return tracks[id];\n      }\n    }\n\n    return null;\n  }\n};\nconst getActiveGroup = (type, {\n  mediaTypes\n}) => () => {\n  const activeTrack_ = mediaTypes[type].activeTrack();\n\n  if (!activeTrack_) {\n    return null;\n  }\n\n  return mediaTypes[type].activeGroup(activeTrack_);\n};\n/**\n * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,\n * Closed-Captions) specified in the main manifest.\n *\n * @param {Object} settings\n *        Object containing required information for setting up the media groups\n * @param {Tech} settings.tech\n *        The tech of the player\n * @param {Object} settings.requestOptions\n *        XHR request options used by the segment loaders\n * @param {PlaylistLoader} settings.mainPlaylistLoader\n *        PlaylistLoader for the main source\n * @param {VhsHandler} settings.vhs\n *        VHS SourceHandler\n * @param {Object} settings.main\n *        The parsed main manifest\n * @param {Object} settings.mediaTypes\n *        Object to store the loaders, tracks, and utility methods for each media type\n * @param {Function} settings.excludePlaylist\n *        Excludes the current rendition and forces a rendition switch.\n * @function setupMediaGroups\n */\n\nconst setupMediaGroups = settings => {\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\n    initialize[type](type, settings);\n  });\n  const {\n    mediaTypes,\n    mainPlaylistLoader,\n    tech,\n    vhs,\n    segmentLoaders: {\n      ['AUDIO']: audioSegmentLoader,\n      main: mainSegmentLoader\n    }\n  } = settings; // setup active group and track getters and change event handlers\n\n  ['AUDIO', 'SUBTITLES'].forEach(type => {\n    mediaTypes[type].activeGroup = activeGroup(type, settings);\n    mediaTypes[type].activeTrack = activeTrack[type](type, settings);\n    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);\n    mediaTypes[type].onGroupChanging = onGroupChanging(type, settings);\n    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);\n    mediaTypes[type].getActiveGroup = getActiveGroup(type, settings);\n  }); // DO NOT enable the default subtitle or caption track.\n  // DO enable the default audio track\n\n  const audioGroup = mediaTypes.AUDIO.activeGroup();\n\n  if (audioGroup) {\n    const groupId = (audioGroup.filter(group => group.default)[0] || audioGroup[0]).id;\n    mediaTypes.AUDIO.tracks[groupId].enabled = true;\n    mediaTypes.AUDIO.onGroupChanged();\n    mediaTypes.AUDIO.onTrackChanged();\n    const activeAudioGroup = mediaTypes.AUDIO.getActiveGroup(); // a similar check for handling setAudio on each loader is run again each time the\n    // track is changed, but needs to be handled here since the track may not be considered\n    // changed on the first call to onTrackChanged\n\n    if (!activeAudioGroup.playlistLoader) {\n      // either audio is muxed with video or the stream is audio only\n      mainSegmentLoader.setAudio(true);\n    } else {\n      // audio is demuxed\n      mainSegmentLoader.setAudio(false);\n      audioSegmentLoader.setAudio(true);\n    }\n  }\n\n  mainPlaylistLoader.on('mediachange', () => {\n    ['AUDIO', 'SUBTITLES'].forEach(type => mediaTypes[type].onGroupChanged());\n  });\n  mainPlaylistLoader.on('mediachanging', () => {\n    ['AUDIO', 'SUBTITLES'].forEach(type => mediaTypes[type].onGroupChanging());\n  }); // custom audio track change event handler for usage event\n\n  const onAudioTrackChanged = () => {\n    mediaTypes.AUDIO.onTrackChanged();\n    tech.trigger({\n      type: 'usage',\n      name: 'vhs-audio-change'\n    });\n  };\n\n  tech.audioTracks().addEventListener('change', onAudioTrackChanged);\n  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  vhs.on('dispose', () => {\n    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);\n    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  }); // clear existing audio tracks and add the ones we just created\n\n  tech.clearTracks('audio');\n\n  for (const id in mediaTypes.AUDIO.tracks) {\n    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);\n  }\n};\n/**\n * Creates skeleton object used to store the loaders, tracks, and utility methods for each\n * media type\n *\n * @return {Object}\n *         Object to store the loaders, tracks, and utility methods for each media type\n * @function createMediaTypes\n */\n\nconst createMediaTypes = () => {\n  const mediaTypes = {};\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\n    mediaTypes[type] = {\n      groups: {},\n      tracks: {},\n      activePlaylistLoader: null,\n      activeGroup: noop,\n      activeTrack: noop,\n      getActiveGroup: noop,\n      onGroupChanged: noop,\n      onTrackChanged: noop,\n      lastTrack_: null,\n      logger_: logger(`MediaGroups[${type}]`)\n    };\n  });\n  return mediaTypes;\n};\n\n/**\n * A utility class for setting properties and maintaining the state of the content steering manifest.\n *\n * Content Steering manifest format:\n * VERSION: number (required) currently only version 1 is supported.\n * TTL: number in seconds (optional) until the next content steering manifest reload.\n * RELOAD-URI: string (optional) uri to fetch the next content steering manifest.\n * SERVICE-LOCATION-PRIORITY or PATHWAY-PRIORITY a non empty array of unique string values.\n * PATHWAY-CLONES: array (optional) (HLS only) pathway clone objects to copy from other playlists.\n */\n\nclass SteeringManifest {\n  constructor() {\n    this.priority_ = [];\n    this.pathwayClones_ = new Map();\n  }\n\n  set version(number) {\n    // Only version 1 is currently supported for both DASH and HLS.\n    if (number === 1) {\n      this.version_ = number;\n    }\n  }\n\n  set ttl(seconds) {\n    // TTL = time-to-live, default = 300 seconds.\n    this.ttl_ = seconds || 300;\n  }\n\n  set reloadUri(uri) {\n    if (uri) {\n      // reload URI can be relative to the previous reloadUri.\n      this.reloadUri_ = resolveUrl(this.reloadUri_, uri);\n    }\n  }\n\n  set priority(array) {\n    // priority must be non-empty and unique values.\n    if (array && array.length) {\n      this.priority_ = array;\n    }\n  }\n\n  set pathwayClones(array) {\n    // pathwayClones must be non-empty.\n    if (array && array.length) {\n      this.pathwayClones_ = new Map(array.map(clone => [clone.ID, clone]));\n    }\n  }\n\n  get version() {\n    return this.version_;\n  }\n\n  get ttl() {\n    return this.ttl_;\n  }\n\n  get reloadUri() {\n    return this.reloadUri_;\n  }\n\n  get priority() {\n    return this.priority_;\n  }\n\n  get pathwayClones() {\n    return this.pathwayClones_;\n  }\n\n}\n/**\n * This class represents a content steering manifest and associated state. See both HLS and DASH specifications.\n * HLS: https://developer.apple.com/streaming/HLSContentSteeringSpecification.pdf and\n * https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/ section 4.4.6.6.\n * DASH: https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf\n *\n * @param {function} xhr for making a network request from the browser.\n * @param {function} bandwidth for fetching the current bandwidth from the main segment loader.\n */\n\n\nclass ContentSteeringController extends videojs.EventTarget {\n  constructor(xhr, bandwidth) {\n    super();\n    this.currentPathway = null;\n    this.defaultPathway = null;\n    this.queryBeforeStart = false;\n    this.availablePathways_ = new Set();\n    this.steeringManifest = new SteeringManifest();\n    this.proxyServerUrl_ = null;\n    this.manifestType_ = null;\n    this.ttlTimeout_ = null;\n    this.request_ = null;\n    this.currentPathwayClones = new Map();\n    this.nextPathwayClones = new Map();\n    this.excludedSteeringManifestURLs = new Set();\n    this.logger_ = logger('Content Steering');\n    this.xhr_ = xhr;\n    this.getBandwidth_ = bandwidth;\n  }\n  /**\n   * Assigns the content steering tag properties to the steering controller\n   *\n   * @param {string} baseUrl the baseURL from the main manifest for resolving the steering manifest url\n   * @param {Object} steeringTag the content steering tag from the main manifest\n   */\n\n\n  assignTagProperties(baseUrl, steeringTag) {\n    this.manifestType_ = steeringTag.serverUri ? 'HLS' : 'DASH'; // serverUri is HLS serverURL is DASH\n\n    const steeringUri = steeringTag.serverUri || steeringTag.serverURL;\n\n    if (!steeringUri) {\n      this.logger_(`steering manifest URL is ${steeringUri}, cannot request steering manifest.`);\n      this.trigger('error');\n      return;\n    } // Content steering manifests can be encoded as a data URI. We can decode, parse and return early if that's the case.\n\n\n    if (steeringUri.startsWith('data:')) {\n      this.decodeDataUriManifest_(steeringUri.substring(steeringUri.indexOf(',') + 1));\n      return;\n    } // reloadUri is the resolution of the main manifest URL and steering URL.\n\n\n    this.steeringManifest.reloadUri = resolveUrl(baseUrl, steeringUri); // pathwayId is HLS defaultServiceLocation is DASH\n\n    this.defaultPathway = steeringTag.pathwayId || steeringTag.defaultServiceLocation; // currently only DASH supports the following properties on <ContentSteering> tags.\n\n    this.queryBeforeStart = steeringTag.queryBeforeStart;\n    this.proxyServerUrl_ = steeringTag.proxyServerURL; // trigger a steering event if we have a pathway from the content steering tag.\n    // this tells VHS which segment pathway to start with.\n    // If queryBeforeStart is true we need to wait for the steering manifest response.\n\n    if (this.defaultPathway && !this.queryBeforeStart) {\n      this.trigger('content-steering');\n    }\n  }\n  /**\n   * Requests the content steering manifest and parse the response. This should only be called after\n   * assignTagProperties was called with a content steering tag.\n   *\n   * @param {string} initialUri The optional uri to make the request with.\n   *    If set, the request should be made with exactly what is passed in this variable.\n   *    This scenario should only happen once on initalization.\n   */\n\n\n  requestSteeringManifest(initial) {\n    const reloadUri = this.steeringManifest.reloadUri;\n\n    if (!reloadUri) {\n      return;\n    } // We currently don't support passing MPD query parameters directly to the content steering URL as this requires\n    // ExtUrlQueryInfo tag support. See the DASH content steering spec section 8.1.\n    // This request URI accounts for manifest URIs that have been excluded.\n\n\n    const uri = initial ? reloadUri : this.getRequestURI(reloadUri); // If there are no valid manifest URIs, we should stop content steering.\n\n    if (!uri) {\n      this.logger_('No valid content steering manifest URIs. Stopping content steering.');\n      this.trigger('error');\n      this.dispose();\n      return;\n    }\n\n    const metadata = {\n      contentSteeringInfo: {\n        uri\n      }\n    };\n    this.trigger({\n      type: 'contentsteeringloadstart',\n      metadata\n    });\n    this.request_ = this.xhr_({\n      uri,\n      requestType: 'content-steering-manifest'\n    }, (error, errorInfo) => {\n      if (error) {\n        // If the client receives HTTP 410 Gone in response to a manifest request,\n        // it MUST NOT issue another request for that URI for the remainder of the\n        // playback session. It MAY continue to use the most-recently obtained set\n        // of Pathways.\n        if (errorInfo.status === 410) {\n          this.logger_(`manifest request 410 ${error}.`);\n          this.logger_(`There will be no more content steering requests to ${uri} this session.`);\n          this.excludedSteeringManifestURLs.add(uri);\n          return;\n        } // If the client receives HTTP 429 Too Many Requests with a Retry-After\n        // header in response to a manifest request, it SHOULD wait until the time\n        // specified by the Retry-After header to reissue the request.\n\n\n        if (errorInfo.status === 429) {\n          const retrySeconds = errorInfo.responseHeaders['retry-after'];\n          this.logger_(`manifest request 429 ${error}.`);\n          this.logger_(`content steering will retry in ${retrySeconds} seconds.`);\n          this.startTTLTimeout_(parseInt(retrySeconds, 10));\n          return;\n        } // If the Steering Manifest cannot be loaded and parsed correctly, the\n        // client SHOULD continue to use the previous values and attempt to reload\n        // it after waiting for the previously-specified TTL (or 5 minutes if\n        // none).\n\n\n        this.logger_(`manifest failed to load ${error}.`);\n        this.startTTLTimeout_();\n        return;\n      }\n\n      this.trigger({\n        type: 'contentsteeringloadcomplete',\n        metadata\n      });\n      let steeringManifestJson;\n\n      try {\n        steeringManifestJson = JSON.parse(this.request_.responseText);\n      } catch (parseError) {\n        const errorMetadata = {\n          errorType: videojs.Error.StreamingContentSteeringParserError,\n          error: parseError\n        };\n        this.trigger({\n          type: 'error',\n          metadata: errorMetadata\n        });\n      }\n\n      this.assignSteeringProperties_(steeringManifestJson);\n      const parsedMetadata = {\n        contentSteeringInfo: metadata.contentSteeringInfo,\n        contentSteeringManifest: {\n          version: this.steeringManifest.version,\n          reloadUri: this.steeringManifest.reloadUri,\n          priority: this.steeringManifest.priority\n        }\n      };\n      this.trigger({\n        type: 'contentsteeringparsed',\n        metadata: parsedMetadata\n      });\n      this.startTTLTimeout_();\n    });\n  }\n  /**\n   * Set the proxy server URL and add the steering manifest url as a URI encoded parameter.\n   *\n   * @param {string} steeringUrl the steering manifest url\n   * @return the steering manifest url to a proxy server with all parameters set\n   */\n\n\n  setProxyServerUrl_(steeringUrl) {\n    const steeringUrlObject = new window$1.URL(steeringUrl);\n    const proxyServerUrlObject = new window$1.URL(this.proxyServerUrl_);\n    proxyServerUrlObject.searchParams.set('url', encodeURI(steeringUrlObject.toString()));\n    return this.setSteeringParams_(proxyServerUrlObject.toString());\n  }\n  /**\n   * Decodes and parses the data uri encoded steering manifest\n   *\n   * @param {string} dataUri the data uri to be decoded and parsed.\n   */\n\n\n  decodeDataUriManifest_(dataUri) {\n    const steeringManifestJson = JSON.parse(window$1.atob(dataUri));\n    this.assignSteeringProperties_(steeringManifestJson);\n  }\n  /**\n   * Set the HLS or DASH content steering manifest request query parameters. For example:\n   * _HLS_pathway=\"<CURRENT-PATHWAY-ID>\" and _HLS_throughput=<THROUGHPUT>\n   * _DASH_pathway and _DASH_throughput\n   *\n   * @param {string} uri to add content steering server parameters to.\n   * @return a new uri as a string with the added steering query parameters.\n   */\n\n\n  setSteeringParams_(url) {\n    const urlObject = new window$1.URL(url);\n    const path = this.getPathway();\n    const networkThroughput = this.getBandwidth_();\n\n    if (path) {\n      const pathwayKey = `_${this.manifestType_}_pathway`;\n      urlObject.searchParams.set(pathwayKey, path);\n    }\n\n    if (networkThroughput) {\n      const throughputKey = `_${this.manifestType_}_throughput`;\n      urlObject.searchParams.set(throughputKey, networkThroughput);\n    }\n\n    return urlObject.toString();\n  }\n  /**\n   * Assigns the current steering manifest properties and to the SteeringManifest object\n   *\n   * @param {Object} steeringJson the raw JSON steering manifest\n   */\n\n\n  assignSteeringProperties_(steeringJson) {\n    this.steeringManifest.version = steeringJson.VERSION;\n\n    if (!this.steeringManifest.version) {\n      this.logger_(`manifest version is ${steeringJson.VERSION}, which is not supported.`);\n      this.trigger('error');\n      return;\n    }\n\n    this.steeringManifest.ttl = steeringJson.TTL;\n    this.steeringManifest.reloadUri = steeringJson['RELOAD-URI']; // HLS = PATHWAY-PRIORITY required. DASH = SERVICE-LOCATION-PRIORITY optional\n\n    this.steeringManifest.priority = steeringJson['PATHWAY-PRIORITY'] || steeringJson['SERVICE-LOCATION-PRIORITY']; // Pathway clones to be created/updated in HLS.\n    // See section 7.2 https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/\n\n    this.steeringManifest.pathwayClones = steeringJson['PATHWAY-CLONES'];\n    this.nextPathwayClones = this.steeringManifest.pathwayClones; // 1. apply first pathway from the array.\n    // 2. if first pathway doesn't exist in manifest, try next pathway.\n    //    a. if all pathways are exhausted, ignore the steering manifest priority.\n    // 3. if segments fail from an established pathway, try all variants/renditions, then exclude the failed pathway.\n    //    a. exclude a pathway for a minimum of the last TTL duration. Meaning, from the next steering response,\n    //       the excluded pathway will be ignored.\n    //       See excludePathway usage in excludePlaylist().\n    // If there are no available pathways, we need to stop content steering.\n\n    if (!this.availablePathways_.size) {\n      this.logger_('There are no available pathways for content steering. Ending content steering.');\n      this.trigger('error');\n      this.dispose();\n    }\n\n    const chooseNextPathway = pathwaysByPriority => {\n      for (const path of pathwaysByPriority) {\n        if (this.availablePathways_.has(path)) {\n          return path;\n        }\n      } // If no pathway matches, ignore the manifest and choose the first available.\n\n\n      return [...this.availablePathways_][0];\n    };\n\n    const nextPathway = chooseNextPathway(this.steeringManifest.priority);\n\n    if (this.currentPathway !== nextPathway) {\n      this.currentPathway = nextPathway;\n      this.trigger('content-steering');\n    }\n  }\n  /**\n   * Returns the pathway to use for steering decisions\n   *\n   * @return {string} returns the current pathway or the default\n   */\n\n\n  getPathway() {\n    return this.currentPathway || this.defaultPathway;\n  }\n  /**\n   * Chooses the manifest request URI based on proxy URIs and server URLs.\n   * Also accounts for exclusion on certain manifest URIs.\n   *\n   * @param {string} reloadUri the base uri before parameters\n   *\n   * @return {string} the final URI for the request to the manifest server.\n   */\n\n\n  getRequestURI(reloadUri) {\n    if (!reloadUri) {\n      return null;\n    }\n\n    const isExcluded = uri => this.excludedSteeringManifestURLs.has(uri);\n\n    if (this.proxyServerUrl_) {\n      const proxyURI = this.setProxyServerUrl_(reloadUri);\n\n      if (!isExcluded(proxyURI)) {\n        return proxyURI;\n      }\n    }\n\n    const steeringURI = this.setSteeringParams_(reloadUri);\n\n    if (!isExcluded(steeringURI)) {\n      return steeringURI;\n    } // Return nothing if all valid manifest URIs are excluded.\n\n\n    return null;\n  }\n  /**\n   * Start the timeout for re-requesting the steering manifest at the TTL interval.\n   *\n   * @param {number} ttl time in seconds of the timeout. Defaults to the\n   *        ttl interval in the steering manifest\n   */\n\n\n  startTTLTimeout_(ttl = this.steeringManifest.ttl) {\n    // 300 (5 minutes) is the default value.\n    const ttlMS = ttl * 1000;\n    this.ttlTimeout_ = window$1.setTimeout(() => {\n      this.requestSteeringManifest();\n    }, ttlMS);\n  }\n  /**\n   * Clear the TTL timeout if necessary.\n   */\n\n\n  clearTTLTimeout_() {\n    window$1.clearTimeout(this.ttlTimeout_);\n    this.ttlTimeout_ = null;\n  }\n  /**\n   * aborts any current steering xhr and sets the current request object to null\n   */\n\n\n  abort() {\n    if (this.request_) {\n      this.request_.abort();\n    }\n\n    this.request_ = null;\n  }\n  /**\n   * aborts steering requests clears the ttl timeout and resets all properties.\n   */\n\n\n  dispose() {\n    this.off('content-steering');\n    this.off('error');\n    this.abort();\n    this.clearTTLTimeout_();\n    this.currentPathway = null;\n    this.defaultPathway = null;\n    this.queryBeforeStart = null;\n    this.proxyServerUrl_ = null;\n    this.manifestType_ = null;\n    this.ttlTimeout_ = null;\n    this.request_ = null;\n    this.excludedSteeringManifestURLs = new Set();\n    this.availablePathways_ = new Set();\n    this.steeringManifest = new SteeringManifest();\n  }\n  /**\n   * adds a pathway to the available pathways set\n   *\n   * @param {string} pathway the pathway string to add\n   */\n\n\n  addAvailablePathway(pathway) {\n    if (pathway) {\n      this.availablePathways_.add(pathway);\n    }\n  }\n  /**\n   * Clears all pathways from the available pathways set\n   */\n\n\n  clearAvailablePathways() {\n    this.availablePathways_.clear();\n  }\n  /**\n   * Removes a pathway from the available pathways set.\n   */\n\n\n  excludePathway(pathway) {\n    return this.availablePathways_.delete(pathway);\n  }\n  /**\n   * Checks the refreshed DASH manifest content steering tag for changes.\n   *\n   * @param {string} baseURL new steering tag on DASH manifest refresh\n   * @param {Object} newTag the new tag to check for changes\n   * @return a true or false whether the new tag has different values\n   */\n\n\n  didDASHTagChange(baseURL, newTag) {\n    return !newTag && this.steeringManifest.reloadUri || newTag && (resolveUrl(baseURL, newTag.serverURL) !== this.steeringManifest.reloadUri || newTag.defaultServiceLocation !== this.defaultPathway || newTag.queryBeforeStart !== this.queryBeforeStart || newTag.proxyServerURL !== this.proxyServerUrl_);\n  }\n\n  getAvailablePathways() {\n    return this.availablePathways_;\n  }\n\n}\n\nconst debounce = (callback, wait) => {\n  let timeoutId = null;\n  return (...args) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => {\n      callback.apply(null, args);\n    }, wait);\n  };\n};\n\nconst ABORT_EARLY_EXCLUSION_SECONDS = 10;\nlet Vhs$1; // SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\n\nconst loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred', 'mediaAppends'];\n\nconst sumLoaderStat = function (stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\n\nconst shouldSwitchToMedia = function ({\n  currentPlaylist,\n  buffered,\n  currentTime,\n  nextPlaylist,\n  bufferLowWaterLine,\n  bufferHighWaterLine,\n  duration,\n  bufferBasedABR,\n  log\n}) {\n  // we have no other playlist to switch to\n  if (!nextPlaylist) {\n    videojs.log.warn('We received no playlist to switch to. Please check your stream.');\n    return false;\n  }\n\n  const sharedLogLine = `allowing switch ${currentPlaylist && currentPlaylist.id || 'null'} -> ${nextPlaylist.id}`;\n\n  if (!currentPlaylist) {\n    log(`${sharedLogLine} as current playlist is not set`);\n    return true;\n  } // no need to switch if playlist is the same\n\n\n  if (nextPlaylist.id === currentPlaylist.id) {\n    return false;\n  } // determine if current time is in a buffered range.\n\n\n  const isBuffered = Boolean(findRange(buffered, currentTime).length); // If the playlist is live, then we want to not take low water line into account.\n  // This is because in LIVE, the player plays 3 segments from the end of the\n  // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n  // in those segments, a viewer will never experience a rendition upswitch.\n\n  if (!currentPlaylist.endList) {\n    // For LLHLS live streams, don't switch renditions before playback has started, as it almost\n    // doubles the time to first playback.\n    if (!isBuffered && typeof currentPlaylist.partTargetDuration === 'number') {\n      log(`not ${sharedLogLine} as current playlist is live llhls, but currentTime isn't in buffered.`);\n      return false;\n    }\n\n    log(`${sharedLogLine} as current playlist is live`);\n    return true;\n  }\n\n  const forwardBuffer = timeAheadOf(buffered, currentTime);\n  const maxBufferLowWaterLine = bufferBasedABR ? Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : Config.MAX_BUFFER_LOW_WATER_LINE; // For the same reason as LIVE, we ignore the low water line when the VOD\n  // duration is below the max potential low water line\n\n  if (duration < maxBufferLowWaterLine) {\n    log(`${sharedLogLine} as duration < max low water line (${duration} < ${maxBufferLowWaterLine})`);\n    return true;\n  }\n\n  const nextBandwidth = nextPlaylist.attributes.BANDWIDTH;\n  const currBandwidth = currentPlaylist.attributes.BANDWIDTH; // when switching down, if our buffer is lower than the high water line,\n  // we can switch down\n\n  if (nextBandwidth < currBandwidth && (!bufferBasedABR || forwardBuffer < bufferHighWaterLine)) {\n    let logLine = `${sharedLogLine} as next bandwidth < current bandwidth (${nextBandwidth} < ${currBandwidth})`;\n\n    if (bufferBasedABR) {\n      logLine += ` and forwardBuffer < bufferHighWaterLine (${forwardBuffer} < ${bufferHighWaterLine})`;\n    }\n\n    log(logLine);\n    return true;\n  } // and if our buffer is higher than the low water line,\n  // we can switch up\n\n\n  if ((!bufferBasedABR || nextBandwidth > currBandwidth) && forwardBuffer >= bufferLowWaterLine) {\n    let logLine = `${sharedLogLine} as forwardBuffer >= bufferLowWaterLine (${forwardBuffer} >= ${bufferLowWaterLine})`;\n\n    if (bufferBasedABR) {\n      logLine += ` and next bandwidth > current bandwidth (${nextBandwidth} > ${currBandwidth})`;\n    }\n\n    log(logLine);\n    return true;\n  }\n\n  log(`not ${sharedLogLine} as no switching criteria met`);\n  return false;\n};\n/**\n * the main playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a main playlist and a series of audio playlists\n * if they are available\n *\n * @class PlaylistController\n * @extends videojs.EventTarget\n */\n\n\nclass PlaylistController extends videojs.EventTarget {\n  constructor(options) {\n    super(); // Adding a slight debounce to avoid duplicate calls during rapid quality changes, for example:\n    // When selecting quality from the quality list,\n    // where we may have multiple bandwidth profiles for the same vertical resolution.\n\n    this.fastQualityChange_ = debounce(this.fastQualityChange_.bind(this), 100);\n    const {\n      src,\n      withCredentials,\n      tech,\n      bandwidth,\n      externVhs,\n      useCueTags,\n      playlistExclusionDuration,\n      enableLowInitialPlaylist,\n      sourceType,\n      cacheEncryptionKeys,\n      bufferBasedABR,\n      leastPixelDiffSelector,\n      captionServices,\n      experimentalUseMMS\n    } = options;\n\n    if (!src) {\n      throw new Error('A non-empty playlist URL or JSON manifest string is required');\n    }\n\n    let {\n      maxPlaylistRetries\n    } = options;\n\n    if (maxPlaylistRetries === null || typeof maxPlaylistRetries === 'undefined') {\n      maxPlaylistRetries = Infinity;\n    }\n\n    Vhs$1 = externVhs;\n    this.bufferBasedABR = Boolean(bufferBasedABR);\n    this.leastPixelDiffSelector = Boolean(leastPixelDiffSelector);\n    this.withCredentials = withCredentials;\n    this.tech_ = tech;\n    this.vhs_ = tech.vhs;\n    this.player_ = options.player_;\n    this.sourceType_ = sourceType;\n    this.useCueTags_ = useCueTags;\n    this.playlistExclusionDuration = playlistExclusionDuration;\n    this.maxPlaylistRetries = maxPlaylistRetries;\n    this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    this.usingManagedMediaSource_ = false;\n\n    if (this.useCueTags_) {\n      this.cueTagsTrack_ = this.tech_.addTextTrack('metadata', 'ad-cues');\n      this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n\n    this.requestOptions_ = {\n      withCredentials,\n      maxPlaylistRetries,\n      timeout: null\n    };\n    this.on('error', this.pauseLoading);\n    this.mediaTypes_ = createMediaTypes();\n\n    if (experimentalUseMMS && window$1.ManagedMediaSource) {\n      // Airplay source not yet implemented. Remote playback must be disabled.\n      this.tech_.el_.disableRemotePlayback = true;\n      this.mediaSource = new window$1.ManagedMediaSource();\n      this.usingManagedMediaSource_ = true;\n      videojs.log('Using ManagedMediaSource');\n    } else if (window$1.MediaSource) {\n      this.mediaSource = new window$1.MediaSource();\n    }\n\n    this.handleDurationChange_ = this.handleDurationChange_.bind(this);\n    this.handleSourceOpen_ = this.handleSourceOpen_.bind(this);\n    this.handleSourceEnded_ = this.handleSourceEnded_.bind(this);\n    this.load = this.load.bind(this);\n    this.pause = this.pause.bind(this);\n    this.mediaSource.addEventListener('durationchange', this.handleDurationChange_); // load the media source into the player\n\n    this.mediaSource.addEventListener('sourceopen', this.handleSourceOpen_);\n    this.mediaSource.addEventListener('sourceended', this.handleSourceEnded_);\n    this.mediaSource.addEventListener('startstreaming', this.load);\n    this.mediaSource.addEventListener('endstreaming', this.pause); // we don't have to handle sourceclose since dispose will handle termination of\n    // everything, and the MediaSource should not be detached without a proper disposal\n\n    this.seekable_ = createTimeRanges();\n    this.hasPlayed_ = false;\n    this.syncController_ = new SyncController(options);\n    this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n    this.segmentMetadataTrack_.mode = 'hidden';\n    this.decrypter_ = new Decrypter();\n    this.sourceUpdater_ = new SourceUpdater(this.mediaSource);\n    this.inbandTextTracks_ = {};\n    this.timelineChangeController_ = new TimelineChangeController();\n    this.keyStatusMap_ = new Map();\n    const segmentLoaderSettings = {\n      vhs: this.vhs_,\n      parse708captions: options.parse708captions,\n      useDtsForTimestampOffset: options.useDtsForTimestampOffset,\n      captionServices,\n      mediaSource: this.mediaSource,\n      currentTime: this.tech_.currentTime.bind(this.tech_),\n      seekable: () => this.seekable(),\n      seeking: () => this.tech_.seeking(),\n      duration: () => this.duration(),\n      hasPlayed: () => this.hasPlayed_,\n      goalBufferLength: () => this.goalBufferLength(),\n      bandwidth,\n      syncController: this.syncController_,\n      decrypter: this.decrypter_,\n      sourceType: this.sourceType_,\n      inbandTextTracks: this.inbandTextTracks_,\n      cacheEncryptionKeys,\n      sourceUpdater: this.sourceUpdater_,\n      timelineChangeController: this.timelineChangeController_,\n      exactManifestTimings: options.exactManifestTimings,\n      addMetadataToTextTrack: this.addMetadataToTextTrack.bind(this)\n    }; // The source type check not only determines whether a special DASH playlist loader\n    // should be used, but also covers the case where the provided src is a vhs-json\n    // manifest object (instead of a URL). In the case of vhs-json, the default\n    // PlaylistLoader should be used.\n\n    this.mainPlaylistLoader_ = this.sourceType_ === 'dash' ? new DashPlaylistLoader(src, this.vhs_, merge(this.requestOptions_, {\n      addMetadataToTextTrack: this.addMetadataToTextTrack.bind(this)\n    })) : new PlaylistLoader(src, this.vhs_, merge(this.requestOptions_, {\n      addDateRangesToTextTrack: this.addDateRangesToTextTrack_.bind(this)\n    }));\n    this.setupMainPlaylistLoaderListeners_(); // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n\n    this.mainSegmentLoader_ = new SegmentLoader(merge(segmentLoaderSettings, {\n      segmentMetadataTrack: this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options); // alternate audio track\n\n    this.audioSegmentLoader_ = new SegmentLoader(merge(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n    this.subtitleSegmentLoader_ = new VTTSegmentLoader(merge(segmentLoaderSettings, {\n      loaderType: 'vtt',\n      featuresNativeTextTracks: this.tech_.featuresNativeTextTracks,\n      loadVttJs: () => new Promise((resolve, reject) => {\n        function onLoad() {\n          tech.off('vttjserror', onError);\n          resolve();\n        }\n\n        function onError() {\n          tech.off('vttjsloaded', onLoad);\n          reject();\n        }\n\n        tech.one('vttjsloaded', onLoad);\n        tech.one('vttjserror', onError); // safe to call multiple times, script will be loaded only once:\n\n        tech.addWebVttScript_();\n      })\n    }), options);\n\n    const getBandwidth = () => {\n      return this.mainSegmentLoader_.bandwidth;\n    };\n\n    this.contentSteeringController_ = new ContentSteeringController(this.vhs_.xhr, getBandwidth);\n    this.setupSegmentLoaderListeners_();\n\n    if (this.bufferBasedABR) {\n      this.mainPlaylistLoader_.one('loadedplaylist', () => this.startABRTimer_());\n      this.tech_.on('pause', () => this.stopABRTimer_());\n      this.tech_.on('play', () => this.startABRTimer_());\n    } // Create SegmentLoader stat-getters\n    // mediaRequests_\n    // mediaRequestsAborted_\n    // mediaRequestsTimedout_\n    // mediaRequestsErrored_\n    // mediaTransferDuration_\n    // mediaBytesTransferred_\n    // mediaAppends_\n\n\n    loaderStats.forEach(stat => {\n      this[stat + '_'] = sumLoaderStat.bind(this, stat);\n    });\n    this.logger_ = logger('pc');\n    this.triggeredFmp4Usage = false;\n\n    if (this.tech_.preload() === 'none') {\n      this.loadOnPlay_ = () => {\n        this.loadOnPlay_ = null;\n        this.mainPlaylistLoader_.load();\n      };\n\n      this.tech_.one('play', this.loadOnPlay_);\n    } else {\n      this.mainPlaylistLoader_.load();\n    }\n\n    this.timeToLoadedData__ = -1;\n    this.mainAppendsToLoadedData__ = -1;\n    this.audioAppendsToLoadedData__ = -1;\n    const event = this.tech_.preload() === 'none' ? 'play' : 'loadstart'; // start the first frame timer on loadstart or play (for preload none)\n\n    this.tech_.one(event, () => {\n      const timeToLoadedDataStart = Date.now();\n      this.tech_.one('loadeddata', () => {\n        this.timeToLoadedData__ = Date.now() - timeToLoadedDataStart;\n        this.mainAppendsToLoadedData__ = this.mainSegmentLoader_.mediaAppends;\n        this.audioAppendsToLoadedData__ = this.audioSegmentLoader_.mediaAppends;\n      });\n    });\n  }\n\n  mainAppendsToLoadedData_() {\n    return this.mainAppendsToLoadedData__;\n  }\n\n  audioAppendsToLoadedData_() {\n    return this.audioAppendsToLoadedData__;\n  }\n\n  appendsToLoadedData_() {\n    const main = this.mainAppendsToLoadedData_();\n    const audio = this.audioAppendsToLoadedData_();\n\n    if (main === -1 || audio === -1) {\n      return -1;\n    }\n\n    return main + audio;\n  }\n\n  timeToLoadedData_() {\n    return this.timeToLoadedData__;\n  }\n  /**\n   * Run selectPlaylist and switch to the new playlist if we should\n   *\n   * @param {string} [reason=abr] a reason for why the ABR check is made\n   * @private\n   */\n\n\n  checkABR_(reason = 'abr') {\n    const nextPlaylist = this.selectPlaylist();\n\n    if (nextPlaylist && this.shouldSwitchToMedia_(nextPlaylist)) {\n      this.switchMedia_(nextPlaylist, reason);\n    }\n  }\n\n  switchMedia_(playlist, cause, delay) {\n    const oldMedia = this.media();\n    const oldId = oldMedia && (oldMedia.id || oldMedia.uri);\n    const newId = playlist && (playlist.id || playlist.uri);\n\n    if (oldId && oldId !== newId) {\n      this.logger_(`switch media ${oldId} -> ${newId} from ${cause}`);\n      const metadata = {\n        renditionInfo: {\n          id: newId,\n          bandwidth: playlist.attributes.BANDWIDTH,\n          resolution: playlist.attributes.RESOLUTION,\n          codecs: playlist.attributes.CODECS\n        },\n        cause\n      };\n      this.trigger({\n        type: 'renditionselected',\n        metadata\n      });\n      this.tech_.trigger({\n        type: 'usage',\n        name: `vhs-rendition-change-${cause}`\n      });\n    }\n\n    this.mainPlaylistLoader_.media(playlist, delay);\n  }\n  /**\n   * A function that ensures we switch our playlists inside of `mediaTypes`\n   * to match the current `serviceLocation` provided by the contentSteering controller.\n   * We want to check media types of `AUDIO`, `SUBTITLES`, and `CLOSED-CAPTIONS`.\n   *\n   * This should only be called on a DASH playback scenario while using content steering.\n   * This is necessary due to differences in how media in HLS manifests are generally tied to\n   * a video playlist, where in DASH that is not always the case.\n   */\n\n\n  switchMediaForDASHContentSteering_() {\n    ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\n      const mediaType = this.mediaTypes_[type];\n      const activeGroup = mediaType ? mediaType.activeGroup() : null;\n      const pathway = this.contentSteeringController_.getPathway();\n\n      if (activeGroup && pathway) {\n        // activeGroup can be an array or a single group\n        const mediaPlaylists = activeGroup.length ? activeGroup[0].playlists : activeGroup.playlists;\n        const dashMediaPlaylists = mediaPlaylists.filter(p => p.attributes.serviceLocation === pathway); // Switch the current active playlist to the correct CDN\n\n        if (dashMediaPlaylists.length) {\n          this.mediaTypes_[type].activePlaylistLoader.media(dashMediaPlaylists[0]);\n        }\n      }\n    });\n  }\n  /**\n   * Start a timer that periodically calls checkABR_\n   *\n   * @private\n   */\n\n\n  startABRTimer_() {\n    this.stopABRTimer_();\n    this.abrTimer_ = window$1.setInterval(() => this.checkABR_(), 250);\n  }\n  /**\n   * Stop the timer that periodically calls checkABR_\n   *\n   * @private\n   */\n\n\n  stopABRTimer_() {\n    // if we're scrubbing, we don't need to pause.\n    // This getter will be added to Video.js in version 7.11.\n    if (this.tech_.scrubbing && this.tech_.scrubbing()) {\n      return;\n    }\n\n    window$1.clearInterval(this.abrTimer_);\n    this.abrTimer_ = null;\n  }\n  /**\n   * Get a list of playlists for the currently selected audio playlist\n   *\n   * @return {Array} the array of audio playlists\n   */\n\n\n  getAudioTrackPlaylists_() {\n    const main = this.main();\n    const defaultPlaylists = main && main.playlists || []; // if we don't have any audio groups then we can only\n    // assume that the audio tracks are contained in main\n    // playlist array, use that or an empty array.\n\n    if (!main || !main.mediaGroups || !main.mediaGroups.AUDIO) {\n      return defaultPlaylists;\n    }\n\n    const AUDIO = main.mediaGroups.AUDIO;\n    const groupKeys = Object.keys(AUDIO);\n    let track; // get the current active track\n\n    if (Object.keys(this.mediaTypes_.AUDIO.groups).length) {\n      track = this.mediaTypes_.AUDIO.activeTrack(); // or get the default track from main if mediaTypes_ isn't setup yet\n    } else {\n      // default group is `main` or just the first group.\n      const defaultGroup = AUDIO.main || groupKeys.length && AUDIO[groupKeys[0]];\n\n      for (const label in defaultGroup) {\n        if (defaultGroup[label].default) {\n          track = {\n            label\n          };\n          break;\n        }\n      }\n    } // no active track no playlists.\n\n\n    if (!track) {\n      return defaultPlaylists;\n    }\n\n    const playlists = []; // get all of the playlists that are possible for the\n    // active track.\n\n    for (const group in AUDIO) {\n      if (AUDIO[group][track.label]) {\n        const properties = AUDIO[group][track.label];\n\n        if (properties.playlists && properties.playlists.length) {\n          playlists.push.apply(playlists, properties.playlists);\n        } else if (properties.uri) {\n          playlists.push(properties);\n        } else if (main.playlists.length) {\n          // if an audio group does not have a uri\n          // see if we have main playlists that use it as a group.\n          // if we do then add those to the playlists list.\n          for (let i = 0; i < main.playlists.length; i++) {\n            const playlist = main.playlists[i];\n\n            if (playlist.attributes && playlist.attributes.AUDIO && playlist.attributes.AUDIO === group) {\n              playlists.push(playlist);\n            }\n          }\n        }\n      }\n    }\n\n    if (!playlists.length) {\n      return defaultPlaylists;\n    }\n\n    return playlists;\n  }\n  /**\n   * Register event handlers on the main playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n\n  setupMainPlaylistLoaderListeners_() {\n    this.mainPlaylistLoader_.on('loadedmetadata', () => {\n      const media = this.mainPlaylistLoader_.media();\n      const requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\n      // timeout the request.\n\n      if (isLowestEnabledRendition(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media())) {\n        this.requestOptions_.timeout = 0;\n      } else {\n        this.requestOptions_.timeout = requestTimeout;\n      } // if this isn't a live video and preload permits, start\n      // downloading segments\n\n\n      if (media.endList && this.tech_.preload() !== 'none') {\n        this.mainSegmentLoader_.playlist(media, this.requestOptions_);\n        this.mainSegmentLoader_.load();\n      }\n\n      setupMediaGroups({\n        sourceType: this.sourceType_,\n        segmentLoaders: {\n          AUDIO: this.audioSegmentLoader_,\n          SUBTITLES: this.subtitleSegmentLoader_,\n          main: this.mainSegmentLoader_\n        },\n        tech: this.tech_,\n        requestOptions: this.requestOptions_,\n        mainPlaylistLoader: this.mainPlaylistLoader_,\n        vhs: this.vhs_,\n        main: this.main(),\n        mediaTypes: this.mediaTypes_,\n        excludePlaylist: this.excludePlaylist.bind(this)\n      });\n      this.triggerPresenceUsage_(this.main(), media);\n      this.setupFirstPlay();\n\n      if (!this.mediaTypes_.AUDIO.activePlaylistLoader || this.mediaTypes_.AUDIO.activePlaylistLoader.media()) {\n        this.trigger('selectedinitialmedia');\n      } else {\n        // We must wait for the active audio playlist loader to\n        // finish setting up before triggering this event so the\n        // representations API and EME setup is correct\n        this.mediaTypes_.AUDIO.activePlaylistLoader.one('loadedmetadata', () => {\n          this.trigger('selectedinitialmedia');\n        });\n      }\n    });\n    this.mainPlaylistLoader_.on('loadedplaylist', () => {\n      if (this.loadOnPlay_) {\n        this.tech_.off('play', this.loadOnPlay_);\n      }\n\n      let updatedPlaylist = this.mainPlaylistLoader_.media();\n\n      if (!updatedPlaylist) {\n        // Add content steering listeners on first load and init.\n        this.attachContentSteeringListeners_();\n        this.initContentSteeringController_(); // exclude any variants that are not supported by the browser before selecting\n        // an initial media as the playlist selectors do not consider browser support\n\n        this.excludeUnsupportedVariants_();\n        let selectedMedia;\n\n        if (this.enableLowInitialPlaylist) {\n          selectedMedia = this.selectInitialPlaylist();\n        }\n\n        if (!selectedMedia) {\n          selectedMedia = this.selectPlaylist();\n        }\n\n        if (!selectedMedia || !this.shouldSwitchToMedia_(selectedMedia)) {\n          return;\n        }\n\n        this.initialMedia_ = selectedMedia;\n        this.switchMedia_(this.initialMedia_, 'initial'); // Under the standard case where a source URL is provided, loadedplaylist will\n        // fire again since the playlist will be requested. In the case of vhs-json\n        // (where the manifest object is provided as the source), when the media\n        // playlist's `segments` list is already available, a media playlist won't be\n        // requested, and loadedplaylist won't fire again, so the playlist handler must be\n        // called on its own here.\n\n        const haveJsonSource = this.sourceType_ === 'vhs-json' && this.initialMedia_.segments;\n\n        if (!haveJsonSource) {\n          return;\n        }\n\n        updatedPlaylist = this.initialMedia_;\n      }\n\n      this.handleUpdatedMediaPlaylist(updatedPlaylist);\n    });\n    this.mainPlaylistLoader_.on('error', () => {\n      const error = this.mainPlaylistLoader_.error;\n      this.excludePlaylist({\n        playlistToExclude: error.playlist,\n        error\n      });\n    });\n    this.mainPlaylistLoader_.on('mediachanging', () => {\n      this.mainSegmentLoader_.abort();\n      this.mainSegmentLoader_.pause();\n    });\n    this.mainPlaylistLoader_.on('mediachange', () => {\n      const media = this.mainPlaylistLoader_.media();\n      const requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\n      // timeout the request.\n\n      if (isLowestEnabledRendition(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media())) {\n        this.requestOptions_.timeout = 0;\n      } else {\n        this.requestOptions_.timeout = requestTimeout;\n      }\n\n      if (this.sourceType_ === 'dash') {\n        // we don't want to re-request the same hls playlist right after it was changed\n        // Initially it was implemented as workaround to restart playlist loader for live\n        // when playlist loader is paused because of playlist exclusions:\n        // see: https://github.com/videojs/http-streaming/pull/1339\n        // but this introduces duplicate \"loadedplaylist\" event.\n        // Ideally we want to re-think playlist loader life-cycle events,\n        // but simply checking \"paused\" state should help a lot\n        if (this.mainPlaylistLoader_.isPaused) {\n          this.mainPlaylistLoader_.load();\n        }\n      } // TODO: Create a new event on the PlaylistLoader that signals\n      // that the segments have changed in some way and use that to\n      // update the SegmentLoader instead of doing it twice here and\n      // on `loadedplaylist`\n\n\n      this.mainSegmentLoader_.pause();\n      this.mainSegmentLoader_.playlist(media, this.requestOptions_);\n\n      if (this.waitingForFastQualityPlaylistReceived_) {\n        this.runFastQualitySwitch_();\n      } else {\n        this.mainSegmentLoader_.load();\n      }\n\n      this.tech_.trigger({\n        type: 'mediachange',\n        bubbles: true\n      });\n    });\n    this.mainPlaylistLoader_.on('playlistunchanged', () => {\n      const updatedPlaylist = this.mainPlaylistLoader_.media(); // ignore unchanged playlists that have already been\n      // excluded for not-changing. We likely just have a really slowly updating\n      // playlist.\n\n      if (updatedPlaylist.lastExcludeReason_ === 'playlist-unchanged') {\n        return;\n      }\n\n      const playlistOutdated = this.stuckAtPlaylistEnd_(updatedPlaylist);\n\n      if (playlistOutdated) {\n        // Playlist has stopped updating and we're stuck at its end. Try to\n        // exclude it and switch to another playlist in the hope that that\n        // one is updating (and give the player a chance to re-adjust to the\n        // safe live point).\n        this.excludePlaylist({\n          error: {\n            message: 'Playlist no longer updating.',\n            reason: 'playlist-unchanged'\n          }\n        }); // useful for monitoring QoS\n\n        this.tech_.trigger('playliststuck');\n      }\n    });\n    this.mainPlaylistLoader_.on('renditiondisabled', () => {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-rendition-disabled'\n      });\n    });\n    this.mainPlaylistLoader_.on('renditionenabled', () => {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-rendition-enabled'\n      });\n    });\n    const playlistLoaderEvents = ['manifestrequeststart', 'manifestrequestcomplete', 'manifestparsestart', 'manifestparsecomplete', 'playlistrequeststart', 'playlistrequestcomplete', 'playlistparsestart', 'playlistparsecomplete', 'renditiondisabled', 'renditionenabled'];\n    playlistLoaderEvents.forEach(eventName => {\n      this.mainPlaylistLoader_.on(eventName, metadata => {\n        // trigger directly on the player to ensure early events are fired.\n        this.player_.trigger(_extends({}, metadata));\n      });\n    });\n  }\n  /**\n   * Given an updated media playlist (whether it was loaded for the first time, or\n   * refreshed for live playlists), update any relevant properties and state to reflect\n   * changes in the media that should be accounted for (e.g., cues and duration).\n   *\n   * @param {Object} updatedPlaylist the updated media playlist object\n   *\n   * @private\n   */\n\n\n  handleUpdatedMediaPlaylist(updatedPlaylist) {\n    if (this.useCueTags_) {\n      this.updateAdCues_(updatedPlaylist);\n    } // TODO: Create a new event on the PlaylistLoader that signals\n    // that the segments have changed in some way and use that to\n    // update the SegmentLoader instead of doing it twice here and\n    // on `mediachange`\n\n\n    this.mainSegmentLoader_.pause();\n    this.mainSegmentLoader_.playlist(updatedPlaylist, this.requestOptions_);\n\n    if (this.waitingForFastQualityPlaylistReceived_) {\n      this.runFastQualitySwitch_();\n    }\n\n    this.updateDuration(!updatedPlaylist.endList); // If the player isn't paused, ensure that the segment loader is running,\n    // as it is possible that it was temporarily stopped while waiting for\n    // a playlist (e.g., in case the playlist errored and we re-requested it).\n\n    if (!this.tech_.paused()) {\n      this.mainSegmentLoader_.load();\n\n      if (this.audioSegmentLoader_) {\n        this.audioSegmentLoader_.load();\n      }\n    }\n  }\n  /**\n   * A helper function for triggerring presence usage events once per source\n   *\n   * @private\n   */\n\n\n  triggerPresenceUsage_(main, media) {\n    const mediaGroups = main.mediaGroups || {};\n    let defaultDemuxed = true;\n    const audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n\n    for (const mediaGroup in mediaGroups.AUDIO) {\n      for (const label in mediaGroups.AUDIO[mediaGroup]) {\n        const properties = mediaGroups.AUDIO[mediaGroup][label];\n\n        if (!properties.uri) {\n          defaultDemuxed = false;\n        }\n      }\n    }\n\n    if (defaultDemuxed) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-demuxed'\n      });\n    }\n\n    if (Object.keys(mediaGroups.SUBTITLES).length) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-webvtt'\n      });\n    }\n\n    if (Vhs$1.Playlist.isAes(media)) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-aes'\n      });\n    }\n\n    if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-alternate-audio'\n      });\n    }\n\n    if (this.useCueTags_) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-playlist-cue-tags'\n      });\n    }\n  }\n\n  shouldSwitchToMedia_(nextPlaylist) {\n    const currentPlaylist = this.mainPlaylistLoader_.media() || this.mainPlaylistLoader_.pendingMedia_;\n    const currentTime = this.tech_.currentTime();\n    const bufferLowWaterLine = this.bufferLowWaterLine();\n    const bufferHighWaterLine = this.bufferHighWaterLine();\n    const buffered = this.tech_.buffered();\n    return shouldSwitchToMedia({\n      buffered,\n      currentTime,\n      currentPlaylist,\n      nextPlaylist,\n      bufferLowWaterLine,\n      bufferHighWaterLine,\n      duration: this.duration(),\n      bufferBasedABR: this.bufferBasedABR,\n      log: this.logger_\n    });\n  }\n  /**\n   * Register event handlers on the segment loaders. A helper function\n   * for construction time.\n   *\n   * @private\n   */\n\n\n  setupSegmentLoaderListeners_() {\n    this.mainSegmentLoader_.on('bandwidthupdate', () => {\n      // Whether or not buffer based ABR or another ABR is used, on a bandwidth change it's\n      // useful to check to see if a rendition switch should be made.\n      this.checkABR_('bandwidthupdate');\n      this.tech_.trigger('bandwidthupdate');\n    });\n    this.mainSegmentLoader_.on('timeout', () => {\n      if (this.bufferBasedABR) {\n        // If a rendition change is needed, then it would've be done on `bandwidthupdate`.\n        // Here the only consideration is that for buffer based ABR there's no guarantee\n        // of an immediate switch (since the bandwidth is averaged with a timeout\n        // bandwidth value of 1), so force a load on the segment loader to keep it going.\n        this.mainSegmentLoader_.load();\n      }\n    }); // `progress` events are not reliable enough of a bandwidth measure to trigger buffer\n    // based ABR.\n\n    if (!this.bufferBasedABR) {\n      this.mainSegmentLoader_.on('progress', () => {\n        this.trigger('progress');\n      });\n    }\n\n    this.mainSegmentLoader_.on('error', () => {\n      const error = this.mainSegmentLoader_.error();\n      this.excludePlaylist({\n        playlistToExclude: error.playlist,\n        error\n      });\n    });\n    this.mainSegmentLoader_.on('appenderror', () => {\n      this.error = this.mainSegmentLoader_.error_;\n      this.trigger('error');\n    });\n    this.mainSegmentLoader_.on('syncinfoupdate', () => {\n      this.onSyncInfoUpdate_();\n    });\n    this.mainSegmentLoader_.on('timestampoffset', () => {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-timestamp-offset'\n      });\n    });\n    this.audioSegmentLoader_.on('syncinfoupdate', () => {\n      this.onSyncInfoUpdate_();\n    });\n    this.audioSegmentLoader_.on('appenderror', () => {\n      this.error = this.audioSegmentLoader_.error_;\n      this.trigger('error');\n    });\n    this.mainSegmentLoader_.on('ended', () => {\n      this.logger_('main segment loader ended');\n      this.onEndOfStream();\n    }); // There is the possibility of the video segment and the audio segment\n    // at a current time to be on different timelines. When this occurs, the player\n    // forwards playback to a point where these two segment types are back on the same\n    // timeline. This time will be just after the end of the audio segment that is on\n    // a previous timeline.\n\n    this.timelineChangeController_.on('audioTimelineBehind', () => {\n      const segmentInfo = this.audioSegmentLoader_.pendingSegment_;\n\n      if (!segmentInfo || !segmentInfo.segment || !segmentInfo.segment.syncInfo) {\n        return;\n      } // Update the current time to just after the faulty audio segment.\n      // This moves playback to a spot where both audio and video segments\n      // are on the same timeline.\n\n\n      const newTime = segmentInfo.segment.syncInfo.end + 0.01;\n      this.tech_.setCurrentTime(newTime);\n    });\n    this.timelineChangeController_.on('fixBadTimelineChange', () => {\n      // pause, reset-everything and load for all segment-loaders\n      this.logger_('Fix bad timeline change. Restarting al segment loaders...');\n      this.mainSegmentLoader_.pause();\n      this.mainSegmentLoader_.resetEverything();\n\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n        this.audioSegmentLoader_.pause();\n        this.audioSegmentLoader_.resetEverything();\n      }\n\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n        this.subtitleSegmentLoader_.pause();\n        this.subtitleSegmentLoader_.resetEverything();\n      } // start segment loader loading in case they are paused\n\n\n      this.load();\n    });\n    this.mainSegmentLoader_.on('earlyabort', event => {\n      // never try to early abort with the new ABR algorithm\n      if (this.bufferBasedABR) {\n        return;\n      }\n\n      this.delegateLoaders_('all', ['abort']);\n      this.excludePlaylist({\n        error: {\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete ' + 'the request without rebuffering.'\n        },\n        playlistExclusionDuration: ABORT_EARLY_EXCLUSION_SECONDS\n      });\n    });\n\n    const updateCodecs = () => {\n      if (!this.sourceUpdater_.hasCreatedSourceBuffers()) {\n        return this.tryToCreateSourceBuffers_();\n      }\n\n      const codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded\n\n      if (!codecs) {\n        return;\n      }\n\n      this.sourceUpdater_.addOrChangeSourceBuffers(codecs);\n    };\n\n    this.mainSegmentLoader_.on('trackinfo', updateCodecs);\n    this.audioSegmentLoader_.on('trackinfo', updateCodecs);\n    this.mainSegmentLoader_.on('fmp4', () => {\n      if (!this.triggeredFmp4Usage) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'vhs-fmp4'\n        });\n        this.triggeredFmp4Usage = true;\n      }\n    });\n    this.audioSegmentLoader_.on('fmp4', () => {\n      if (!this.triggeredFmp4Usage) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'vhs-fmp4'\n        });\n        this.triggeredFmp4Usage = true;\n      }\n    });\n    this.audioSegmentLoader_.on('ended', () => {\n      this.logger_('audioSegmentLoader ended');\n      this.onEndOfStream();\n    });\n    const segmentLoaderEvents = ['segmentselected', 'segmentloadstart', 'segmentloaded', 'segmentkeyloadstart', 'segmentkeyloadcomplete', 'segmentdecryptionstart', 'segmentdecryptioncomplete', 'segmenttransmuxingstart', 'segmenttransmuxingcomplete', 'segmenttransmuxingtrackinfoavailable', 'segmenttransmuxingtiminginfoavailable', 'segmentappendstart', 'appendsdone', 'bandwidthupdated', 'timelinechange', 'codecschange'];\n    segmentLoaderEvents.forEach(eventName => {\n      this.mainSegmentLoader_.on(eventName, metadata => {\n        this.player_.trigger(_extends({}, metadata));\n      });\n      this.audioSegmentLoader_.on(eventName, metadata => {\n        this.player_.trigger(_extends({}, metadata));\n      });\n      this.subtitleSegmentLoader_.on(eventName, metadata => {\n        this.player_.trigger(_extends({}, metadata));\n      });\n    });\n  }\n\n  mediaSecondsLoaded_() {\n    return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n  }\n  /**\n   * Call load on our SegmentLoaders\n   */\n\n\n  load() {\n    this.mainSegmentLoader_.load();\n\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      this.audioSegmentLoader_.load();\n    }\n\n    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n      this.subtitleSegmentLoader_.load();\n    }\n  }\n  /**\n   * Call pause on our SegmentLoaders\n   */\n\n\n  pause() {\n    this.mainSegmentLoader_.pause();\n\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      this.audioSegmentLoader_.pause();\n    }\n\n    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n      this.subtitleSegmentLoader_.pause();\n    }\n  }\n  /**\n   * Re-tune playback quality level for the current player\n   * conditions. This method will perform destructive actions like removing\n   * already buffered content in order to readjust the currently active\n   * playlist quickly. This is good for manual quality changes\n   *\n   * @private\n   */\n\n\n  fastQualityChange_(media = this.selectPlaylist()) {\n    if (media && media === this.mainPlaylistLoader_.media()) {\n      this.logger_('skipping fastQualityChange because new media is same as old');\n      return;\n    }\n\n    this.switchMedia_(media, 'fast-quality'); // we would like to avoid race condition when we call fastQuality,\n    // reset everything and start loading segments from prev segments instead of new because new playlist is not received yet\n\n    this.waitingForFastQualityPlaylistReceived_ = true;\n  }\n\n  runFastQualitySwitch_() {\n    this.waitingForFastQualityPlaylistReceived_ = false;\n    this.mainSegmentLoader_.pause();\n    this.mainSegmentLoader_.resetEverything();\n\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      this.audioSegmentLoader_.pause();\n      this.audioSegmentLoader_.resetEverything();\n    }\n\n    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n      this.subtitleSegmentLoader_.pause();\n      this.subtitleSegmentLoader_.resetEverything();\n    } // start segment loader loading in case they are paused\n\n\n    this.load();\n  }\n  /**\n   * Begin playback.\n   */\n\n\n  play() {\n    if (this.setupFirstPlay()) {\n      return;\n    }\n\n    if (this.tech_.ended()) {\n      this.tech_.setCurrentTime(0);\n    }\n\n    if (this.hasPlayed_) {\n      this.load();\n    }\n\n    const seekable = this.tech_.seekable(); // if the viewer has paused and we fell out of the live window,\n    // seek forward to the live point\n\n    if (this.tech_.duration() === Infinity) {\n      if (this.tech_.currentTime() < seekable.start(0)) {\n        return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));\n      }\n    }\n  }\n  /**\n   * Seek to the latest media position if this is a live video and the\n   * player and video are loaded and initialized.\n   */\n\n\n  setupFirstPlay() {\n    const media = this.mainPlaylistLoader_.media(); // Check that everything is ready to begin buffering for the first call to play\n    //  If 1) there is no active media\n    //     2) the player is paused\n    //     3) the first play has already been setup\n    // then exit early\n\n    if (!media || this.tech_.paused() || this.hasPlayed_) {\n      return false;\n    } // when the video is a live stream and/or has a start time\n\n\n    if (!media.endList || media.start) {\n      const seekable = this.seekable();\n\n      if (!seekable.length) {\n        // without a seekable range, the player cannot seek to begin buffering at the\n        // live or start point\n        return false;\n      }\n\n      const seekableEnd = seekable.end(0);\n      let startPoint = seekableEnd;\n\n      if (media.start) {\n        const offset = media.start.timeOffset;\n\n        if (offset < 0) {\n          startPoint = Math.max(seekableEnd + offset, seekable.start(0));\n        } else {\n          startPoint = Math.min(seekableEnd, offset);\n        }\n      } // trigger firstplay to inform the source handler to ignore the next seek event\n\n\n      this.trigger('firstplay'); // seek to the live point\n\n      this.tech_.setCurrentTime(startPoint);\n    }\n\n    this.hasPlayed_ = true; // we can begin loading now that everything is ready\n\n    this.load();\n    return true;\n  }\n  /**\n   * handle the sourceopen event on the MediaSource\n   *\n   * @private\n   */\n\n\n  handleSourceOpen_() {\n    // Only attempt to create the source buffer if none already exist.\n    // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n    // after `endOfStream` has been called (in response to a seek for instance)\n    this.tryToCreateSourceBuffers_(); // if autoplay is enabled, begin playback. This is duplicative of\n    // code in video.js but is required because play() must be invoked\n    // *after* the media source has opened.\n\n    if (this.tech_.autoplay()) {\n      const playPromise = this.tech_.play(); // Catch/silence error when a pause interrupts a play request\n      // on browsers which return a promise\n\n      if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\n        playPromise.then(null, e => {});\n      }\n    }\n\n    this.trigger('sourceopen');\n  }\n  /**\n   * handle the sourceended event on the MediaSource\n   *\n   * @private\n   */\n\n\n  handleSourceEnded_() {\n    if (!this.inbandTextTracks_.metadataTrack_) {\n      return;\n    }\n\n    const cues = this.inbandTextTracks_.metadataTrack_.cues;\n\n    if (!cues || !cues.length) {\n      return;\n    }\n\n    const duration = this.duration();\n    cues[cues.length - 1].endTime = isNaN(duration) || Math.abs(duration) === Infinity ? Number.MAX_VALUE : duration;\n  }\n  /**\n   * handle the durationchange event on the MediaSource\n   *\n   * @private\n   */\n\n\n  handleDurationChange_() {\n    this.tech_.trigger('durationchange');\n  }\n  /**\n   * Calls endOfStream on the media source when all active stream types have called\n   * endOfStream\n   *\n   * @param {string} streamType\n   *        Stream type of the segment loader that called endOfStream\n   * @private\n   */\n\n\n  onEndOfStream() {\n    let isEndOfStream = this.mainSegmentLoader_.ended_;\n\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      const mainMediaInfo = this.mainSegmentLoader_.getCurrentMediaInfo_(); // if the audio playlist loader exists, then alternate audio is active\n\n      if (!mainMediaInfo || mainMediaInfo.hasVideo) {\n        // if we do not know if the main segment loader contains video yet or if we\n        // definitively know the main segment loader contains video, then we need to wait\n        // for both main and audio segment loaders to call endOfStream\n        isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n      } else {\n        // otherwise just rely on the audio loader\n        isEndOfStream = this.audioSegmentLoader_.ended_;\n      }\n    }\n\n    if (!isEndOfStream) {\n      return;\n    }\n\n    this.stopABRTimer_();\n    this.sourceUpdater_.endOfStream();\n  }\n  /**\n   * Check if a playlist has stopped being updated\n   *\n   * @param {Object} playlist the media playlist object\n   * @return {boolean} whether the playlist has stopped being updated or not\n   */\n\n\n  stuckAtPlaylistEnd_(playlist) {\n    const seekable = this.seekable();\n\n    if (!seekable.length) {\n      // playlist doesn't have enough information to determine whether we are stuck\n      return false;\n    }\n\n    const expired = this.syncController_.getExpiredTime(playlist, this.duration());\n\n    if (expired === null) {\n      return false;\n    } // does not use the safe live end to calculate playlist end, since we\n    // don't want to say we are stuck while there is still content\n\n\n    const absolutePlaylistEnd = Vhs$1.Playlist.playlistEnd(playlist, expired);\n    const currentTime = this.tech_.currentTime();\n    const buffered = this.tech_.buffered();\n\n    if (!buffered.length) {\n      // return true if the playhead reached the absolute end of the playlist\n      return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;\n    }\n\n    const bufferedEnd = buffered.end(buffered.length - 1); // return true if there is too little buffer left and buffer has reached absolute\n    // end of playlist\n\n    return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;\n  }\n  /**\n   * Exclude a playlist for a set amount of time, making it unavailable for selection by\n   * the rendition selection algorithm, then force a new playlist (rendition) selection.\n   *\n   * @param {Object=} playlistToExclude\n   *                  the playlist to exclude, defaults to the currently selected playlist\n   * @param {Object=} error\n   *                  an optional error\n   * @param {number=} playlistExclusionDuration\n   *                  an optional number of seconds to exclude the playlist\n   */\n\n\n  excludePlaylist({\n    playlistToExclude = this.mainPlaylistLoader_.media(),\n    error = {},\n    playlistExclusionDuration\n  }) {\n    // If the `error` was generated by the playlist loader, it will contain\n    // the playlist we were trying to load (but failed) and that should be\n    // excluded instead of the currently selected playlist which is likely\n    // out-of-date in this scenario\n    playlistToExclude = playlistToExclude || this.mainPlaylistLoader_.media();\n    playlistExclusionDuration = playlistExclusionDuration || error.playlistExclusionDuration || this.playlistExclusionDuration; // If there is no current playlist, then an error occurred while we were\n    // trying to load the main OR while we were disposing of the tech\n\n    if (!playlistToExclude) {\n      this.error = error;\n\n      if (this.mediaSource.readyState !== 'open') {\n        this.trigger('error');\n      } else {\n        this.sourceUpdater_.endOfStream('network');\n      }\n\n      return;\n    }\n\n    playlistToExclude.playlistErrors_++;\n    const playlists = this.mainPlaylistLoader_.main.playlists;\n    const enabledPlaylists = playlists.filter(isEnabled);\n    const isFinalRendition = enabledPlaylists.length === 1 && enabledPlaylists[0] === playlistToExclude; // Don't exclude the only playlist unless it was excluded\n    // forever\n\n    if (playlists.length === 1 && playlistExclusionDuration !== Infinity) {\n      videojs.log.warn(`Problem encountered with playlist ${playlistToExclude.id}. ` + 'Trying again since it is the only playlist.');\n      this.tech_.trigger('retryplaylist'); // if this is a final rendition, we should delay\n\n      return this.mainPlaylistLoader_.load(isFinalRendition);\n    }\n\n    if (isFinalRendition) {\n      // If we're content steering, try other pathways.\n      if (this.main().contentSteering) {\n        const pathway = this.pathwayAttribute_(playlistToExclude); // Ignore at least 1 steering manifest refresh.\n\n        const reIncludeDelay = this.contentSteeringController_.steeringManifest.ttl * 1000;\n        this.contentSteeringController_.excludePathway(pathway);\n        this.excludeThenChangePathway_();\n        setTimeout(() => {\n          this.contentSteeringController_.addAvailablePathway(pathway);\n        }, reIncludeDelay);\n        return;\n      } // Since we're on the final non-excluded playlist, and we're about to exclude\n      // it, instead of erring the player or retrying this playlist, clear out the current\n      // exclusion list. This allows other playlists to be attempted in case any have been\n      // fixed.\n\n\n      let reincluded = false;\n      playlists.forEach(playlist => {\n        // skip current playlist which is about to be excluded\n        if (playlist === playlistToExclude) {\n          return;\n        }\n\n        const excludeUntil = playlist.excludeUntil; // a playlist cannot be reincluded if it wasn't excluded to begin with.\n\n        if (typeof excludeUntil !== 'undefined' && excludeUntil !== Infinity) {\n          reincluded = true;\n          delete playlist.excludeUntil;\n        }\n      });\n\n      if (reincluded) {\n        videojs.log.warn('Removing other playlists from the exclusion list because the last ' + 'rendition is about to be excluded.'); // Technically we are retrying a playlist, in that we are simply retrying a previous\n        // playlist. This is needed for users relying on the retryplaylist event to catch a\n        // case where the player might be stuck and looping through \"dead\" playlists.\n\n        this.tech_.trigger('retryplaylist');\n      }\n    } // Exclude this playlist\n\n\n    let excludeUntil;\n\n    if (playlistToExclude.playlistErrors_ > this.maxPlaylistRetries) {\n      excludeUntil = Infinity;\n    } else {\n      excludeUntil = Date.now() + playlistExclusionDuration * 1000;\n    }\n\n    playlistToExclude.excludeUntil = excludeUntil;\n\n    if (error.reason) {\n      playlistToExclude.lastExcludeReason_ = error.reason;\n    }\n\n    this.tech_.trigger('excludeplaylist');\n    this.tech_.trigger({\n      type: 'usage',\n      name: 'vhs-rendition-excluded'\n    }); // TODO: only load a new playlist if we're excluding the current playlist\n    // If this function was called with a playlist that's not the current active playlist\n    // (e.g., media().id !== playlistToExclude.id),\n    // then a new playlist should not be selected and loaded, as there's nothing wrong with the current playlist.\n\n    const nextPlaylist = this.selectPlaylist();\n\n    if (!nextPlaylist) {\n      this.error = 'Playback cannot continue. No available working or supported playlists.';\n      this.trigger('error');\n      return;\n    }\n\n    const logFn = error.internal ? this.logger_ : videojs.log.warn;\n    const errorMessage = error.message ? ' ' + error.message : '';\n    logFn(`${error.internal ? 'Internal problem' : 'Problem'} encountered with playlist ${playlistToExclude.id}.` + `${errorMessage} Switching to playlist ${nextPlaylist.id}.`); // if audio group changed reset audio loaders\n\n    if (nextPlaylist.attributes.AUDIO !== playlistToExclude.attributes.AUDIO) {\n      this.delegateLoaders_('audio', ['abort', 'pause']);\n    } // if subtitle group changed reset subtitle loaders\n\n\n    if (nextPlaylist.attributes.SUBTITLES !== playlistToExclude.attributes.SUBTITLES) {\n      this.delegateLoaders_('subtitle', ['abort', 'pause']);\n    }\n\n    this.delegateLoaders_('main', ['abort', 'pause']);\n    const delayDuration = nextPlaylist.targetDuration / 2 * 1000 || 5 * 1000;\n    const shouldDelay = typeof nextPlaylist.lastRequest === 'number' && Date.now() - nextPlaylist.lastRequest <= delayDuration; // delay if it's a final rendition or if the last refresh is sooner than half targetDuration\n\n    return this.switchMedia_(nextPlaylist, 'exclude', isFinalRendition || shouldDelay);\n  }\n  /**\n   * Pause all segment/playlist loaders\n   */\n\n\n  pauseLoading() {\n    this.delegateLoaders_('all', ['abort', 'pause']);\n    this.stopABRTimer_();\n  }\n  /**\n   * Call a set of functions in order on playlist loaders, segment loaders,\n   * or both types of loaders.\n   *\n   * @param {string} filter\n   *        Filter loaders that should call fnNames using a string. Can be:\n   *        * all - run on all loaders\n   *        * audio - run on all audio loaders\n   *        * subtitle - run on all subtitle loaders\n   *        * main - run on the main loaders\n   *\n   * @param {Array|string} fnNames\n   *        A string or array of function names to call.\n   */\n\n\n  delegateLoaders_(filter, fnNames) {\n    const loaders = [];\n    const dontFilterPlaylist = filter === 'all';\n\n    if (dontFilterPlaylist || filter === 'main') {\n      loaders.push(this.mainPlaylistLoader_);\n    }\n\n    const mediaTypes = [];\n\n    if (dontFilterPlaylist || filter === 'audio') {\n      mediaTypes.push('AUDIO');\n    }\n\n    if (dontFilterPlaylist || filter === 'subtitle') {\n      mediaTypes.push('CLOSED-CAPTIONS');\n      mediaTypes.push('SUBTITLES');\n    }\n\n    mediaTypes.forEach(mediaType => {\n      const loader = this.mediaTypes_[mediaType] && this.mediaTypes_[mediaType].activePlaylistLoader;\n\n      if (loader) {\n        loaders.push(loader);\n      }\n    });\n    ['main', 'audio', 'subtitle'].forEach(name => {\n      const loader = this[`${name}SegmentLoader_`];\n\n      if (loader && (filter === name || filter === 'all')) {\n        loaders.push(loader);\n      }\n    });\n    loaders.forEach(loader => fnNames.forEach(fnName => {\n      if (typeof loader[fnName] === 'function') {\n        loader[fnName]();\n      }\n    }));\n  }\n  /**\n   * set the current time on all segment loaders\n   *\n   * @param {TimeRange} currentTime the current time to set\n   * @return {TimeRange} the current time\n   */\n\n\n  setCurrentTime(currentTime) {\n    const buffered = findRange(this.tech_.buffered(), currentTime);\n\n    if (!(this.mainPlaylistLoader_ && this.mainPlaylistLoader_.media())) {\n      // return immediately if the metadata is not ready yet\n      return 0;\n    } // it's clearly an edge-case but don't thrown an error if asked to\n    // seek within an empty playlist\n\n\n    if (!this.mainPlaylistLoader_.media().segments) {\n      return 0;\n    } // if the seek location is already buffered, continue buffering as usual\n\n\n    if (buffered && buffered.length) {\n      return currentTime;\n    } // cancel outstanding requests so we begin buffering at the new\n    // location\n\n\n    this.mainSegmentLoader_.pause();\n    this.mainSegmentLoader_.resetEverything();\n\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      this.audioSegmentLoader_.pause();\n      this.audioSegmentLoader_.resetEverything();\n    }\n\n    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n      this.subtitleSegmentLoader_.pause();\n      this.subtitleSegmentLoader_.resetEverything();\n    } // start segment loader loading in case they are paused\n\n\n    this.load();\n  }\n  /**\n   * get the current duration\n   *\n   * @return {TimeRange} the duration\n   */\n\n\n  duration() {\n    if (!this.mainPlaylistLoader_) {\n      return 0;\n    }\n\n    const media = this.mainPlaylistLoader_.media();\n\n    if (!media) {\n      // no playlists loaded yet, so can't determine a duration\n      return 0;\n    } // Don't rely on the media source for duration in the case of a live playlist since\n    // setting the native MediaSource's duration to infinity ends up with consequences to\n    // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.\n    //\n    // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,\n    // however, few browsers have support for setLiveSeekableRange()\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\n    //\n    // Until a time when the duration of the media source can be set to infinity, and a\n    // seekable range specified across browsers, just return Infinity.\n\n\n    if (!media.endList) {\n      return Infinity;\n    } // Since this is a VOD video, it is safe to rely on the media source's duration (if\n    // available). If it's not available, fall back to a playlist-calculated estimate.\n\n\n    if (this.mediaSource) {\n      return this.mediaSource.duration;\n    }\n\n    return Vhs$1.Playlist.duration(media);\n  }\n  /**\n   * check the seekable range\n   *\n   * @return {TimeRange} the seekable range\n   */\n\n\n  seekable() {\n    return this.seekable_;\n  }\n\n  getSeekableRange_(playlistLoader, mediaType) {\n    const media = playlistLoader.media();\n\n    if (!media) {\n      return null;\n    }\n\n    const mediaSequenceSync = this.syncController_.getMediaSequenceSync(mediaType);\n\n    if (mediaSequenceSync && mediaSequenceSync.isReliable) {\n      const start = mediaSequenceSync.start;\n      const end = mediaSequenceSync.end;\n\n      if (!isFinite(start) || !isFinite(end)) {\n        return null;\n      }\n\n      const liveEdgeDelay = Vhs$1.Playlist.liveEdgeDelay(this.mainPlaylistLoader_.main, media); // Make sure our seekable end is not less than the seekable start\n\n      const calculatedEnd = Math.max(start, end - liveEdgeDelay);\n      return createTimeRanges([[start, calculatedEnd]]);\n    }\n\n    const expired = this.syncController_.getExpiredTime(media, this.duration());\n\n    if (expired === null) {\n      return null;\n    }\n\n    const seekable = Vhs$1.Playlist.seekable(media, expired, Vhs$1.Playlist.liveEdgeDelay(this.mainPlaylistLoader_.main, media));\n    return seekable.length ? seekable : null;\n  }\n\n  computeFinalSeekable_(mainSeekable, audioSeekable) {\n    if (!audioSeekable) {\n      return mainSeekable;\n    }\n\n    const mainStart = mainSeekable.start(0);\n    const mainEnd = mainSeekable.end(0);\n    const audioStart = audioSeekable.start(0);\n    const audioEnd = audioSeekable.end(0);\n\n    if (audioStart > mainEnd || mainStart > audioEnd) {\n      // Seekables are far apart, rely on main\n      return mainSeekable;\n    } // Return the overlapping seekable range\n\n\n    return createTimeRanges([[Math.max(mainStart, audioStart), Math.min(mainEnd, audioEnd)]]);\n  }\n\n  onSyncInfoUpdate_() {\n    // TODO check for creation of both source buffers before updating seekable\n    //\n    // A fix was made to this function where a check for\n    // this.sourceUpdater_.hasCreatedSourceBuffers\n    // was added to ensure that both source buffers were created before seekable was\n    // updated. However, it originally had a bug where it was checking for a true and\n    // returning early instead of checking for false. Setting it to check for false to\n    // return early though created other issues. A call to play() would check for seekable\n    // end without verifying that a seekable range was present. In addition, even checking\n    // for that didn't solve some issues, as handleFirstPlay is sometimes worked around\n    // due to a media update calling load on the segment loaders, skipping a seek to live,\n    // thereby starting live streams at the beginning of the stream rather than at the end.\n    //\n    // This conditional should be fixed to wait for the creation of two source buffers at\n    // the same time as the other sections of code are fixed to properly seek to live and\n    // not throw an error due to checking for a seekable end when no seekable range exists.\n    //\n    // For now, fall back to the older behavior, with the understanding that the seekable\n    // range may not be completely correct, leading to a suboptimal initial live point.\n    if (!this.mainPlaylistLoader_) {\n      return;\n    }\n\n    const mainSeekable = this.getSeekableRange_(this.mainPlaylistLoader_, 'main');\n\n    if (!mainSeekable) {\n      return;\n    }\n\n    let audioSeekable;\n\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      audioSeekable = this.getSeekableRange_(this.mediaTypes_.AUDIO.activePlaylistLoader, 'audio');\n\n      if (!audioSeekable) {\n        return;\n      }\n    }\n\n    const oldSeekable = this.seekable_;\n    this.seekable_ = this.computeFinalSeekable_(mainSeekable, audioSeekable);\n\n    if (!this.seekable_) {\n      return;\n    }\n\n    if (oldSeekable && oldSeekable.length && this.seekable_.length) {\n      if (oldSeekable.start(0) === this.seekable_.start(0) && oldSeekable.end(0) === this.seekable_.end(0)) {\n        // Seekable range hasn't changed\n        return;\n      }\n    }\n\n    this.logger_(`seekable updated [${printableRange(this.seekable_)}]`);\n    const metadata = {\n      seekableRanges: this.seekable_\n    };\n    this.trigger({\n      type: 'seekablerangeschanged',\n      metadata\n    });\n    this.tech_.trigger('seekablechanged');\n  }\n  /**\n   * Update the player duration\n   */\n\n\n  updateDuration(isLive) {\n    if (this.updateDuration_) {\n      this.mediaSource.removeEventListener('sourceopen', this.updateDuration_);\n      this.updateDuration_ = null;\n    }\n\n    if (this.mediaSource.readyState !== 'open') {\n      this.updateDuration_ = this.updateDuration.bind(this, isLive);\n      this.mediaSource.addEventListener('sourceopen', this.updateDuration_);\n      return;\n    }\n\n    if (isLive) {\n      const seekable = this.seekable();\n\n      if (!seekable.length) {\n        return;\n      } // Even in the case of a live playlist, the native MediaSource's duration should not\n      // be set to Infinity (even though this would be expected for a live playlist), since\n      // setting the native MediaSource's duration to infinity ends up with consequences to\n      // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.\n      //\n      // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,\n      // however, few browsers have support for setLiveSeekableRange()\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\n      //\n      // Until a time when the duration of the media source can be set to infinity, and a\n      // seekable range specified across browsers, the duration should be greater than or\n      // equal to the last possible seekable value.\n      // MediaSource duration starts as NaN\n      // It is possible (and probable) that this case will never be reached for many\n      // sources, since the MediaSource reports duration as the highest value without\n      // accounting for timestamp offset. For example, if the timestamp offset is -100 and\n      // we buffered times 0 to 100 with real times of 100 to 200, even though current\n      // time will be between 0 and 100, the native media source may report the duration\n      // as 200. However, since we report duration separate from the media source (as\n      // Infinity), and as long as the native media source duration value is greater than\n      // our reported seekable range, seeks will work as expected. The large number as\n      // duration for live is actually a strategy used by some players to work around the\n      // issue of live seekable ranges cited above.\n\n\n      if (isNaN(this.mediaSource.duration) || this.mediaSource.duration < seekable.end(seekable.length - 1)) {\n        this.sourceUpdater_.setDuration(seekable.end(seekable.length - 1));\n      }\n\n      return;\n    }\n\n    const buffered = this.tech_.buffered();\n    let duration = Vhs$1.Playlist.duration(this.mainPlaylistLoader_.media());\n\n    if (buffered.length > 0) {\n      duration = Math.max(duration, buffered.end(buffered.length - 1));\n    }\n\n    if (this.mediaSource.duration !== duration) {\n      this.sourceUpdater_.setDuration(duration);\n    }\n  }\n  /**\n   * dispose of the PlaylistController and everything\n   * that it controls\n   */\n\n\n  dispose() {\n    this.trigger('dispose');\n    this.decrypter_.terminate();\n    this.mainPlaylistLoader_.dispose();\n    this.mainSegmentLoader_.dispose();\n    this.contentSteeringController_.dispose();\n    this.keyStatusMap_.clear();\n\n    if (this.loadOnPlay_) {\n      this.tech_.off('play', this.loadOnPlay_);\n    }\n\n    ['AUDIO', 'SUBTITLES'].forEach(type => {\n      const groups = this.mediaTypes_[type].groups;\n\n      for (const id in groups) {\n        groups[id].forEach(group => {\n          if (group.playlistLoader) {\n            group.playlistLoader.dispose();\n          }\n        });\n      }\n    });\n    this.audioSegmentLoader_.dispose();\n    this.subtitleSegmentLoader_.dispose();\n    this.sourceUpdater_.dispose();\n    this.timelineChangeController_.dispose();\n    this.stopABRTimer_();\n\n    if (this.updateDuration_) {\n      this.mediaSource.removeEventListener('sourceopen', this.updateDuration_);\n    }\n\n    this.mediaSource.removeEventListener('durationchange', this.handleDurationChange_); // load the media source into the player\n\n    this.mediaSource.removeEventListener('sourceopen', this.handleSourceOpen_);\n    this.mediaSource.removeEventListener('sourceended', this.handleSourceEnded_);\n    this.off();\n  }\n  /**\n   * return the main playlist object if we have one\n   *\n   * @return {Object} the main playlist object that we parsed\n   */\n\n\n  main() {\n    return this.mainPlaylistLoader_.main;\n  }\n  /**\n   * return the currently selected playlist\n   *\n   * @return {Object} the currently selected playlist object that we parsed\n   */\n\n\n  media() {\n    // playlist loader will not return media if it has not been fully loaded\n    return this.mainPlaylistLoader_.media() || this.initialMedia_;\n  }\n\n  areMediaTypesKnown_() {\n    const usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;\n    const hasMainMediaInfo = !!this.mainSegmentLoader_.getCurrentMediaInfo_(); // if we are not using an audio loader, then we have audio media info\n    // otherwise check on the segment loader.\n\n    const hasAudioMediaInfo = !usingAudioLoader ? true : !!this.audioSegmentLoader_.getCurrentMediaInfo_(); // one or both loaders has not loaded sufficently to get codecs\n\n    if (!hasMainMediaInfo || !hasAudioMediaInfo) {\n      return false;\n    }\n\n    return true;\n  } // find from and to for codec switch event\n\n\n  getCodecsOrExclude_() {\n    const media = {\n      main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},\n      audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}\n    };\n    const playlist = this.mainSegmentLoader_.getPendingSegmentPlaylist() || this.media(); // set \"main\" media equal to video\n\n    media.video = media.main;\n    const playlistCodecs = codecsForPlaylist(this.main(), playlist);\n    const codecs = {};\n    const usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;\n\n    if (media.main.hasVideo) {\n      codecs.video = playlistCodecs.video || media.main.videoCodec || DEFAULT_VIDEO_CODEC;\n    }\n\n    if (media.main.isMuxed) {\n      codecs.video += `,${playlistCodecs.audio || media.main.audioCodec || DEFAULT_AUDIO_CODEC}`;\n    }\n\n    if (media.main.hasAudio && !media.main.isMuxed || media.audio.hasAudio || usingAudioLoader) {\n      codecs.audio = playlistCodecs.audio || media.main.audioCodec || media.audio.audioCodec || DEFAULT_AUDIO_CODEC; // set audio isFmp4 so we use the correct \"supports\" function below\n\n      media.audio.isFmp4 = media.main.hasAudio && !media.main.isMuxed ? media.main.isFmp4 : media.audio.isFmp4;\n    } // no codecs, no playback.\n\n\n    if (!codecs.audio && !codecs.video) {\n      this.excludePlaylist({\n        playlistToExclude: playlist,\n        error: {\n          message: 'Could not determine codecs for playlist.'\n        },\n        playlistExclusionDuration: Infinity\n      });\n      return;\n    } // fmp4 relies on browser support, while ts relies on muxer support\n\n\n    const supportFunction = (isFmp4, codec) => isFmp4 ? browserSupportsCodec(codec, this.usingManagedMediaSource_) : muxerSupportsCodec(codec);\n\n    const unsupportedCodecs = {};\n    let unsupportedAudio;\n    ['video', 'audio'].forEach(function (type) {\n      if (codecs.hasOwnProperty(type) && !supportFunction(media[type].isFmp4, codecs[type])) {\n        const supporter = media[type].isFmp4 ? 'browser' : 'muxer';\n        unsupportedCodecs[supporter] = unsupportedCodecs[supporter] || [];\n        unsupportedCodecs[supporter].push(codecs[type]);\n\n        if (type === 'audio') {\n          unsupportedAudio = supporter;\n        }\n      }\n    });\n\n    if (usingAudioLoader && unsupportedAudio && playlist.attributes.AUDIO) {\n      const audioGroup = playlist.attributes.AUDIO;\n      this.main().playlists.forEach(variant => {\n        const variantAudioGroup = variant.attributes && variant.attributes.AUDIO;\n\n        if (variantAudioGroup === audioGroup && variant !== playlist) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n      this.logger_(`excluding audio group ${audioGroup} as ${unsupportedAudio} does not support codec(s): \"${codecs.audio}\"`);\n    } // if we have any unsupported codecs exclude this playlist.\n\n\n    if (Object.keys(unsupportedCodecs).length) {\n      const message = Object.keys(unsupportedCodecs).reduce((acc, supporter) => {\n        if (acc) {\n          acc += ', ';\n        }\n\n        acc += `${supporter} does not support codec(s): \"${unsupportedCodecs[supporter].join(',')}\"`;\n        return acc;\n      }, '') + '.';\n      this.excludePlaylist({\n        playlistToExclude: playlist,\n        error: {\n          internal: true,\n          message\n        },\n        playlistExclusionDuration: Infinity\n      });\n      return;\n    } // check if codec switching is happening\n\n\n    if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {\n      const switchMessages = [];\n      ['video', 'audio'].forEach(type => {\n        const newCodec = (parseCodecs(this.sourceUpdater_.codecs[type] || '')[0] || {}).type;\n        const oldCodec = (parseCodecs(codecs[type] || '')[0] || {}).type;\n\n        if (newCodec && oldCodec && newCodec.toLowerCase() !== oldCodec.toLowerCase()) {\n          switchMessages.push(`\"${this.sourceUpdater_.codecs[type]}\" -> \"${codecs[type]}\"`);\n        }\n      });\n\n      if (switchMessages.length) {\n        this.excludePlaylist({\n          playlistToExclude: playlist,\n          error: {\n            message: `Codec switching not supported: ${switchMessages.join(', ')}.`,\n            internal: true\n          },\n          playlistExclusionDuration: Infinity\n        });\n        return;\n      }\n    } // TODO: when using the muxer shouldn't we just return\n    // the codecs that the muxer outputs?\n\n\n    return codecs;\n  }\n  /**\n   * Create source buffers and exlude any incompatible renditions.\n   *\n   * @private\n   */\n\n\n  tryToCreateSourceBuffers_() {\n    // media source is not ready yet or sourceBuffers are already\n    // created.\n    if (this.mediaSource.readyState !== 'open' || this.sourceUpdater_.hasCreatedSourceBuffers()) {\n      return;\n    }\n\n    if (!this.areMediaTypesKnown_()) {\n      return;\n    }\n\n    const codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded\n\n    if (!codecs) {\n      return;\n    }\n\n    this.sourceUpdater_.createSourceBuffers(codecs);\n    const codecString = [codecs.video, codecs.audio].filter(Boolean).join(',');\n    this.excludeIncompatibleVariants_(codecString);\n  }\n  /**\n   * Excludes playlists with codecs that are unsupported by the muxer and browser.\n   */\n\n\n  excludeUnsupportedVariants_() {\n    const playlists = this.main().playlists;\n    const ids = []; // TODO: why don't we have a property to loop through all\n    // playlist? Why did we ever mix indexes and keys?\n\n    Object.keys(playlists).forEach(key => {\n      const variant = playlists[key]; // check if we already processed this playlist.\n\n      if (ids.indexOf(variant.id) !== -1) {\n        return;\n      }\n\n      ids.push(variant.id);\n      const codecs = codecsForPlaylist(this.main, variant);\n      const unsupported = [];\n\n      if (codecs.audio && !muxerSupportsCodec(codecs.audio) && !browserSupportsCodec(codecs.audio, this.usingManagedMediaSource_)) {\n        unsupported.push(`audio codec ${codecs.audio}`);\n      }\n\n      if (codecs.video && !muxerSupportsCodec(codecs.video) && !browserSupportsCodec(codecs.video, this.usingManagedMediaSource_)) {\n        unsupported.push(`video codec ${codecs.video}`);\n      }\n\n      if (codecs.text && codecs.text === 'stpp.ttml.im1t') {\n        unsupported.push(`text codec ${codecs.text}`);\n      }\n\n      if (unsupported.length) {\n        variant.excludeUntil = Infinity;\n        this.logger_(`excluding ${variant.id} for unsupported: ${unsupported.join(', ')}`);\n      }\n    });\n  }\n  /**\n   * Exclude playlists that are known to be codec or\n   * stream-incompatible with the SourceBuffer configuration. For\n   * instance, Media Source Extensions would cause the video element to\n   * stall waiting for video data if you switched from a variant with\n   * video and audio to an audio-only one.\n   *\n   * @param {Object} media a media playlist compatible with the current\n   * set of SourceBuffers. Variants in the current main playlist that\n   * do not appear to have compatible codec or stream configurations\n   * will be excluded from the default playlist selection algorithm\n   * indefinitely.\n   * @private\n   */\n\n\n  excludeIncompatibleVariants_(codecString) {\n    const ids = [];\n    const playlists = this.main().playlists;\n    const codecs = unwrapCodecList(parseCodecs(codecString));\n    const codecCount_ = codecCount(codecs);\n    const videoDetails = codecs.video && parseCodecs(codecs.video)[0] || null;\n    const audioDetails = codecs.audio && parseCodecs(codecs.audio)[0] || null;\n    Object.keys(playlists).forEach(key => {\n      const variant = playlists[key]; // check if we already processed this playlist.\n      // or it if it is already excluded forever.\n\n      if (ids.indexOf(variant.id) !== -1 || variant.excludeUntil === Infinity) {\n        return;\n      }\n\n      ids.push(variant.id);\n      const exclusionReasons = []; // get codecs from the playlist for this variant\n\n      const variantCodecs = codecsForPlaylist(this.mainPlaylistLoader_.main, variant);\n      const variantCodecCount = codecCount(variantCodecs); // if no codecs are listed, we cannot determine that this\n      // variant is incompatible. Wait for mux.js to probe\n\n      if (!variantCodecs.audio && !variantCodecs.video) {\n        return;\n      } // TODO: we can support this by removing the\n      // old media source and creating a new one, but it will take some work.\n      // The number of streams cannot change\n\n\n      if (variantCodecCount !== codecCount_) {\n        exclusionReasons.push(`codec count \"${variantCodecCount}\" !== \"${codecCount_}\"`);\n      } // only exclude playlists by codec change, if codecs cannot switch\n      // during playback.\n\n\n      if (!this.sourceUpdater_.canChangeType()) {\n        const variantVideoDetails = variantCodecs.video && parseCodecs(variantCodecs.video)[0] || null;\n        const variantAudioDetails = variantCodecs.audio && parseCodecs(variantCodecs.audio)[0] || null; // the video codec cannot change\n\n        if (variantVideoDetails && videoDetails && variantVideoDetails.type.toLowerCase() !== videoDetails.type.toLowerCase()) {\n          exclusionReasons.push(`video codec \"${variantVideoDetails.type}\" !== \"${videoDetails.type}\"`);\n        } // the audio codec cannot change\n\n\n        if (variantAudioDetails && audioDetails && variantAudioDetails.type.toLowerCase() !== audioDetails.type.toLowerCase()) {\n          exclusionReasons.push(`audio codec \"${variantAudioDetails.type}\" !== \"${audioDetails.type}\"`);\n        }\n      }\n\n      if (exclusionReasons.length) {\n        variant.excludeUntil = Infinity;\n        this.logger_(`excluding ${variant.id}: ${exclusionReasons.join(' && ')}`);\n      }\n    });\n  }\n\n  updateAdCues_(media) {\n    let offset = 0;\n    const seekable = this.seekable();\n\n    if (seekable.length) {\n      offset = seekable.start(0);\n    }\n\n    updateAdCues(media, this.cueTagsTrack_, offset);\n  }\n  /**\n   * Calculates the desired forward buffer length based on current time\n   *\n   * @return {number} Desired forward buffer length in seconds\n   */\n\n\n  goalBufferLength() {\n    const currentTime = this.tech_.currentTime();\n    const initial = Config.GOAL_BUFFER_LENGTH;\n    const rate = Config.GOAL_BUFFER_LENGTH_RATE;\n    const max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);\n    return Math.min(initial + currentTime * rate, max);\n  }\n  /**\n   * Calculates the desired buffer low water line based on current time\n   *\n   * @return {number} Desired buffer low water line in seconds\n   */\n\n\n  bufferLowWaterLine() {\n    const currentTime = this.tech_.currentTime();\n    const initial = Config.BUFFER_LOW_WATER_LINE;\n    const rate = Config.BUFFER_LOW_WATER_LINE_RATE;\n    const max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);\n    const newMax = Math.max(initial, Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);\n    return Math.min(initial + currentTime * rate, this.bufferBasedABR ? newMax : max);\n  }\n\n  bufferHighWaterLine() {\n    return Config.BUFFER_HIGH_WATER_LINE;\n  }\n\n  addDateRangesToTextTrack_(dateRanges) {\n    createMetadataTrackIfNotExists(this.inbandTextTracks_, 'com.apple.streaming', this.tech_);\n    addDateRangeMetadata({\n      inbandTextTracks: this.inbandTextTracks_,\n      dateRanges\n    });\n  }\n\n  addMetadataToTextTrack(dispatchType, metadataArray, videoDuration) {\n    const timestampOffset = this.sourceUpdater_.videoBuffer ? this.sourceUpdater_.videoTimestampOffset() : this.sourceUpdater_.audioTimestampOffset(); // There's potentially an issue where we could double add metadata if there's a muxed\n    // audio/video source with a metadata track, and an alt audio with a metadata track.\n    // However, this probably won't happen, and if it does it can be handled then.\n\n    createMetadataTrackIfNotExists(this.inbandTextTracks_, dispatchType, this.tech_);\n    addMetadata({\n      inbandTextTracks: this.inbandTextTracks_,\n      metadataArray,\n      timestampOffset,\n      videoDuration\n    });\n  }\n  /**\n   * Utility for getting the pathway or service location from an HLS or DASH playlist.\n   *\n   * @param {Object} playlist for getting pathway from.\n   * @return the pathway attribute of a playlist\n   */\n\n\n  pathwayAttribute_(playlist) {\n    return playlist.attributes['PATHWAY-ID'] || playlist.attributes.serviceLocation;\n  }\n  /**\n   * Initialize available pathways and apply the tag properties.\n   */\n\n\n  initContentSteeringController_() {\n    const main = this.main();\n\n    if (!main.contentSteering) {\n      return;\n    }\n\n    for (const playlist of main.playlists) {\n      this.contentSteeringController_.addAvailablePathway(this.pathwayAttribute_(playlist));\n    }\n\n    this.contentSteeringController_.assignTagProperties(main.uri, main.contentSteering); // request the steering manifest immediately if queryBeforeStart is set.\n\n    if (this.contentSteeringController_.queryBeforeStart) {\n      // When queryBeforeStart is true, initial request should omit steering parameters.\n      this.contentSteeringController_.requestSteeringManifest(true);\n      return;\n    } // otherwise start content steering after playback starts\n\n\n    this.tech_.one('canplay', () => {\n      this.contentSteeringController_.requestSteeringManifest();\n    });\n  }\n  /**\n   * Reset the content steering controller and re-init.\n   */\n\n\n  resetContentSteeringController_() {\n    this.contentSteeringController_.clearAvailablePathways();\n    this.contentSteeringController_.dispose();\n    this.initContentSteeringController_();\n  }\n  /**\n   * Attaches the listeners for content steering.\n   */\n\n\n  attachContentSteeringListeners_() {\n    this.contentSteeringController_.on('content-steering', this.excludeThenChangePathway_.bind(this));\n    const contentSteeringEvents = ['contentsteeringloadstart', 'contentsteeringloadcomplete', 'contentsteeringparsed'];\n    contentSteeringEvents.forEach(eventName => {\n      this.contentSteeringController_.on(eventName, metadata => {\n        this.trigger(_extends({}, metadata));\n      });\n    });\n\n    if (this.sourceType_ === 'dash') {\n      this.mainPlaylistLoader_.on('loadedplaylist', () => {\n        const main = this.main(); // check if steering tag or pathways changed.\n\n        const didDashTagChange = this.contentSteeringController_.didDASHTagChange(main.uri, main.contentSteering);\n\n        const didPathwaysChange = () => {\n          const availablePathways = this.contentSteeringController_.getAvailablePathways();\n          const newPathways = [];\n\n          for (const playlist of main.playlists) {\n            const serviceLocation = playlist.attributes.serviceLocation;\n\n            if (serviceLocation) {\n              newPathways.push(serviceLocation);\n\n              if (!availablePathways.has(serviceLocation)) {\n                return true;\n              }\n            }\n          } // If we have no new serviceLocations and previously had availablePathways\n\n\n          if (!newPathways.length && availablePathways.size) {\n            return true;\n          }\n\n          return false;\n        };\n\n        if (didDashTagChange || didPathwaysChange()) {\n          this.resetContentSteeringController_();\n        }\n      });\n    }\n  }\n  /**\n   * Simple exclude and change playlist logic for content steering.\n   */\n\n\n  excludeThenChangePathway_() {\n    const currentPathway = this.contentSteeringController_.getPathway();\n\n    if (!currentPathway) {\n      return;\n    }\n\n    this.handlePathwayClones_();\n    const main = this.main();\n    const playlists = main.playlists;\n    const ids = new Set();\n    let didEnablePlaylists = false;\n    Object.keys(playlists).forEach(key => {\n      const variant = playlists[key];\n      const pathwayId = this.pathwayAttribute_(variant);\n      const differentPathwayId = pathwayId && currentPathway !== pathwayId;\n      const steeringExclusion = variant.excludeUntil === Infinity && variant.lastExcludeReason_ === 'content-steering';\n\n      if (steeringExclusion && !differentPathwayId) {\n        delete variant.excludeUntil;\n        delete variant.lastExcludeReason_;\n        didEnablePlaylists = true;\n      }\n\n      const noExcludeUntil = !variant.excludeUntil && variant.excludeUntil !== Infinity;\n      const shouldExclude = !ids.has(variant.id) && differentPathwayId && noExcludeUntil;\n\n      if (!shouldExclude) {\n        return;\n      }\n\n      ids.add(variant.id);\n      variant.excludeUntil = Infinity;\n      variant.lastExcludeReason_ = 'content-steering'; // TODO: kind of spammy, maybe move this.\n\n      this.logger_(`excluding ${variant.id} for ${variant.lastExcludeReason_}`);\n    });\n\n    if (this.contentSteeringController_.manifestType_ === 'DASH') {\n      Object.keys(this.mediaTypes_).forEach(key => {\n        const type = this.mediaTypes_[key];\n\n        if (type.activePlaylistLoader) {\n          const currentPlaylist = type.activePlaylistLoader.media_; // Check if the current media playlist matches the current CDN\n\n          if (currentPlaylist && currentPlaylist.attributes.serviceLocation !== currentPathway) {\n            didEnablePlaylists = true;\n          }\n        }\n      });\n    }\n\n    if (didEnablePlaylists) {\n      this.changeSegmentPathway_();\n    }\n  }\n  /**\n   * Add, update, or delete playlists and media groups for\n   * the pathway clones for HLS Content Steering.\n   *\n   * See https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/\n   *\n   * NOTE: Pathway cloning does not currently support the `PER_VARIANT_URIS` and\n   * `PER_RENDITION_URIS` as we do not handle `STABLE-VARIANT-ID` or\n   * `STABLE-RENDITION-ID` values.\n   */\n\n\n  handlePathwayClones_() {\n    const main = this.main();\n    const playlists = main.playlists;\n    const currentPathwayClones = this.contentSteeringController_.currentPathwayClones;\n    const nextPathwayClones = this.contentSteeringController_.nextPathwayClones;\n    const hasClones = currentPathwayClones && currentPathwayClones.size || nextPathwayClones && nextPathwayClones.size;\n\n    if (!hasClones) {\n      return;\n    }\n\n    for (const [id, clone] of currentPathwayClones.entries()) {\n      const newClone = nextPathwayClones.get(id); // Delete the old pathway clone.\n\n      if (!newClone) {\n        this.mainPlaylistLoader_.updateOrDeleteClone(clone);\n        this.contentSteeringController_.excludePathway(id);\n      }\n    }\n\n    for (const [id, clone] of nextPathwayClones.entries()) {\n      const oldClone = currentPathwayClones.get(id); // Create a new pathway if it is a new pathway clone object.\n\n      if (!oldClone) {\n        const playlistsToClone = playlists.filter(p => {\n          return p.attributes['PATHWAY-ID'] === clone['BASE-ID'];\n        });\n        playlistsToClone.forEach(p => {\n          this.mainPlaylistLoader_.addClonePathway(clone, p);\n        });\n        this.contentSteeringController_.addAvailablePathway(id);\n        continue;\n      } // There have not been changes to the pathway clone object, so skip.\n\n\n      if (this.equalPathwayClones_(oldClone, clone)) {\n        continue;\n      } // Update a preexisting cloned pathway.\n      // True is set for the update flag.\n\n\n      this.mainPlaylistLoader_.updateOrDeleteClone(clone, true);\n      this.contentSteeringController_.addAvailablePathway(id);\n    } // Deep copy contents of next to current pathways.\n\n\n    this.contentSteeringController_.currentPathwayClones = new Map(JSON.parse(JSON.stringify([...nextPathwayClones])));\n  }\n  /**\n   * Determines whether two pathway clone objects are equivalent.\n   *\n   * @param {Object} a The first pathway clone object.\n   * @param {Object} b The second pathway clone object.\n   * @return {boolean} True if the pathway clone objects are equal, false otherwise.\n   */\n\n\n  equalPathwayClones_(a, b) {\n    if (a['BASE-ID'] !== b['BASE-ID'] || a.ID !== b.ID || a['URI-REPLACEMENT'].HOST !== b['URI-REPLACEMENT'].HOST) {\n      return false;\n    }\n\n    const aParams = a['URI-REPLACEMENT'].PARAMS;\n    const bParams = b['URI-REPLACEMENT'].PARAMS; // We need to iterate through both lists of params because one could be\n    // missing a parameter that the other has.\n\n    for (const p in aParams) {\n      if (aParams[p] !== bParams[p]) {\n        return false;\n      }\n    }\n\n    for (const p in bParams) {\n      if (aParams[p] !== bParams[p]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Changes the current playlists for audio, video and subtitles after a new pathway\n   * is chosen from content steering.\n   */\n\n\n  changeSegmentPathway_() {\n    const nextPlaylist = this.selectPlaylist();\n    this.pauseLoading(); // Switch audio and text track playlists if necessary in DASH\n\n    if (this.contentSteeringController_.manifestType_ === 'DASH') {\n      this.switchMediaForDASHContentSteering_();\n    }\n\n    this.switchMedia_(nextPlaylist, 'content-steering');\n  }\n  /**\n   * Iterates through playlists and check their keyId set and compare with the\n   * keyStatusMap, only enable playlists that have a usable key. If the playlist\n   * has no keyId leave it enabled by default.\n   */\n\n\n  excludeNonUsablePlaylistsByKeyId_() {\n    if (!this.mainPlaylistLoader_ || !this.mainPlaylistLoader_.main) {\n      return;\n    }\n\n    let nonUsableKeyStatusCount = 0;\n    const NON_USABLE = 'non-usable';\n    this.mainPlaylistLoader_.main.playlists.forEach(playlist => {\n      const keyIdSet = this.mainPlaylistLoader_.getKeyIdSet(playlist); // If the playlist doesn't have keyIDs lets not exclude it.\n\n      if (!keyIdSet || !keyIdSet.size) {\n        return;\n      }\n\n      keyIdSet.forEach(key => {\n        const USABLE = 'usable';\n        const hasUsableKeyStatus = this.keyStatusMap_.has(key) && this.keyStatusMap_.get(key) === USABLE;\n        const nonUsableExclusion = playlist.lastExcludeReason_ === NON_USABLE && playlist.excludeUntil === Infinity;\n\n        if (!hasUsableKeyStatus) {\n          // Only exclude playlists that haven't already been excluded as non-usable.\n          if (playlist.excludeUntil !== Infinity && playlist.lastExcludeReason_ !== NON_USABLE) {\n            playlist.excludeUntil = Infinity;\n            playlist.lastExcludeReason_ = NON_USABLE;\n            this.logger_(`excluding playlist ${playlist.id} because the key ID ${key} doesn't exist in the keyStatusMap or is not ${USABLE}`);\n          } // count all nonUsableKeyStatus\n\n\n          nonUsableKeyStatusCount++;\n        } else if (hasUsableKeyStatus && nonUsableExclusion) {\n          delete playlist.excludeUntil;\n          delete playlist.lastExcludeReason_;\n          this.logger_(`enabling playlist ${playlist.id} because key ID ${key} is ${USABLE}`);\n        }\n      });\n    }); // If for whatever reason every playlist has a non usable key status. Lets try re-including the SD renditions as a failsafe.\n\n    if (nonUsableKeyStatusCount >= this.mainPlaylistLoader_.main.playlists.length) {\n      this.mainPlaylistLoader_.main.playlists.forEach(playlist => {\n        const isNonHD = playlist && playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height < 720;\n        const excludedForNonUsableKey = playlist.excludeUntil === Infinity && playlist.lastExcludeReason_ === NON_USABLE;\n\n        if (isNonHD && excludedForNonUsableKey) {\n          // Only delete the excludeUntil so we don't try and re-exclude these playlists.\n          delete playlist.excludeUntil;\n          videojs.log.warn(`enabling non-HD playlist ${playlist.id} because all playlists were excluded due to ${NON_USABLE} key IDs`);\n        }\n      });\n    }\n  }\n  /**\n   * Adds a keystatus to the keystatus map, tries to convert to string if necessary.\n   *\n   * @param {any} keyId the keyId to add a status for\n   * @param {string} status the status of the keyId\n   */\n\n\n  addKeyStatus_(keyId, status) {\n    const isString = typeof keyId === 'string';\n    const keyIdHexString = isString ? keyId : bufferToHexString(keyId);\n    const formattedKeyIdString = keyIdHexString.slice(0, 32).toLowerCase();\n    this.logger_(`KeyStatus '${status}' with key ID ${formattedKeyIdString} added to the keyStatusMap`);\n    this.keyStatusMap_.set(formattedKeyIdString, status);\n  }\n  /**\n   * Utility function for adding key status to the keyStatusMap and filtering usable encrypted playlists.\n   *\n   * @param {any} keyId the keyId from the keystatuschange event\n   * @param {string} status the key status string\n   */\n\n\n  updatePlaylistByKeyStatus(keyId, status) {\n    this.addKeyStatus_(keyId, status);\n\n    if (!this.waitingForFastQualityPlaylistReceived_) {\n      this.excludeNonUsableThenChangePlaylist_();\n    } // Listen to loadedplaylist with a single listener and check for new contentProtection elements when a playlist is updated.\n\n\n    this.mainPlaylistLoader_.off('loadedplaylist', this.excludeNonUsableThenChangePlaylist_.bind(this));\n    this.mainPlaylistLoader_.on('loadedplaylist', this.excludeNonUsableThenChangePlaylist_.bind(this));\n  }\n\n  excludeNonUsableThenChangePlaylist_() {\n    this.excludeNonUsablePlaylistsByKeyId_();\n    this.fastQualityChange_();\n  }\n\n}\n\n/**\n * Returns a function that acts as the Enable/disable playlist function.\n *\n * @param {PlaylistLoader} loader - The main playlist loader\n * @param {string} playlistID - id of the playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Function} Function for setting/getting enabled\n */\n\nconst enableFunction = (loader, playlistID, changePlaylistFn) => enable => {\n  const playlist = loader.main.playlists[playlistID];\n  const incompatible = isIncompatible(playlist);\n  const currentlyEnabled = isEnabled(playlist);\n\n  if (typeof enable === 'undefined') {\n    return currentlyEnabled;\n  }\n\n  if (enable) {\n    delete playlist.disabled;\n  } else {\n    playlist.disabled = true;\n  }\n\n  const metadata = {\n    renditionInfo: {\n      id: playlistID,\n      bandwidth: playlist.attributes.BANDWIDTH,\n      resolution: playlist.attributes.RESOLUTION,\n      codecs: playlist.attributes.CODECS\n    },\n    cause: 'fast-quality'\n  };\n\n  if (enable !== currentlyEnabled && !incompatible) {\n    // Ensure the outside world knows about our changes\n    if (enable) {\n      // call fast quality change only when the playlist is enabled\n      changePlaylistFn(playlist);\n      loader.trigger({\n        type: 'renditionenabled',\n        metadata\n      });\n    } else {\n      loader.trigger({\n        type: 'renditiondisabled',\n        metadata\n      });\n    }\n  }\n\n  return enable;\n};\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\n\nclass Representation {\n  constructor(vhsHandler, playlist, id) {\n    const {\n      playlistController_: pc\n    } = vhsHandler;\n    const qualityChangeFunction = pc.fastQualityChange_.bind(pc); // some playlist attributes are optional\n\n    if (playlist.attributes) {\n      const resolution = playlist.attributes.RESOLUTION;\n      this.width = resolution && resolution.width;\n      this.height = resolution && resolution.height;\n      this.bandwidth = playlist.attributes.BANDWIDTH;\n      this.frameRate = playlist.attributes['FRAME-RATE'];\n    }\n\n    this.codecs = codecsForPlaylist(pc.main(), playlist);\n    this.playlist = playlist; // The id is simply the ordinality of the media playlist\n    // within the main playlist\n\n    this.id = id; // Partially-apply the enableFunction to create a playlist-\n    // specific variant\n\n    this.enabled = enableFunction(vhsHandler.playlists, playlist.id, qualityChangeFunction);\n  }\n\n}\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the VhsHandler class\n *\n * @param {VhsHandler} vhsHandler - An instance of VhsHandler to add the\n * representation API into\n */\n\n\nconst renditionSelectionMixin = function (vhsHandler) {\n  // Add a single API-specific function to the VhsHandler instance\n  vhsHandler.representations = () => {\n    const main = vhsHandler.playlistController_.main();\n    const playlists = isAudioOnly(main) ? vhsHandler.playlistController_.getAudioTrackPlaylists_() : main.playlists;\n\n    if (!playlists) {\n      return [];\n    }\n\n    return playlists.filter(media => !isIncompatible(media)).map((e, i) => new Representation(vhsHandler, e, e.id));\n  };\n};\n\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\nconst timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n/**\n * @class PlaybackWatcher\n */\n\nclass PlaybackWatcher extends videojs.EventTarget {\n  /**\n   * Represents an PlaybackWatcher object.\n   *\n   * @class\n   * @param {Object} options an object that includes the tech and settings\n   */\n  constructor(options) {\n    super();\n    this.playlistController_ = options.playlistController;\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n    this.allowSeeksWithinUnsafeLiveWindow = options.allowSeeksWithinUnsafeLiveWindow;\n    this.liveRangeSafeTimeDelta = options.liveRangeSafeTimeDelta;\n    this.media = options.media;\n    this.playedRanges_ = [];\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.checkCurrentTimeTimeout_ = null;\n    this.logger_ = logger('PlaybackWatcher');\n    this.logger_('initialize');\n\n    const playHandler = () => this.monitorCurrentTime_();\n\n    const canPlayHandler = () => this.monitorCurrentTime_();\n\n    const waitingHandler = () => this.techWaiting_();\n\n    const cancelTimerHandler = () => this.resetTimeUpdate_();\n\n    const pc = this.playlistController_;\n    const loaderTypes = ['main', 'subtitle', 'audio'];\n    const loaderChecks = {};\n    loaderTypes.forEach(type => {\n      loaderChecks[type] = {\n        reset: () => this.resetSegmentDownloads_(type),\n        updateend: () => this.checkSegmentDownloads_(type)\n      };\n      pc[`${type}SegmentLoader_`].on('appendsdone', loaderChecks[type].updateend); // If a rendition switch happens during a playback stall where the buffer\n      // isn't changing we want to reset. We cannot assume that the new rendition\n      // will also be stalled, until after new appends.\n\n      pc[`${type}SegmentLoader_`].on('playlistupdate', loaderChecks[type].reset); // Playback stalls should not be detected right after seeking.\n      // This prevents one segment playlists (single vtt or single segment content)\n      // from being detected as stalling. As the buffer will not change in those cases, since\n      // the buffer is the entire video duration.\n\n      this.tech_.on(['seeked', 'seeking'], loaderChecks[type].reset);\n    });\n    /**\n     * We check if a seek was into a gap through the following steps:\n     * 1. We get a seeking event and we do not get a seeked event. This means that\n     *    a seek was attempted but not completed.\n     * 2. We run `fixesBadSeeks_` on segment loader appends. This means that we already\n     *    removed everything from our buffer and appended a segment, and should be ready\n     *    to check for gaps.\n     */\n\n    const setSeekingHandlers = fn => {\n      ['main', 'audio'].forEach(type => {\n        pc[`${type}SegmentLoader_`][fn]('appended', this.seekingAppendCheck_);\n      });\n    };\n\n    this.seekingAppendCheck_ = () => {\n      if (this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        setSeekingHandlers('off');\n      }\n    };\n\n    this.clearSeekingAppendCheck_ = () => setSeekingHandlers('off');\n\n    this.watchForBadSeeking_ = () => {\n      this.clearSeekingAppendCheck_();\n      setSeekingHandlers('on');\n    };\n\n    this.tech_.on('seeked', this.clearSeekingAppendCheck_);\n    this.tech_.on('seeking', this.watchForBadSeeking_);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n    /*\n      An edge case exists that results in gaps not being skipped when they exist at the beginning of a stream. This case\n      is surfaced in one of two ways:\n       1)  The `waiting` event is fired before the player has buffered content, making it impossible\n          to find or skip the gap. The `waiting` event is followed by a `play` event. On first play\n          we can check if playback is stalled due to a gap, and skip the gap if necessary.\n      2)  A source with a gap at the beginning of the stream is loaded programatically while the player\n          is in a playing state. To catch this case, it's important that our one-time play listener is setup\n          even if the player is in a playing state\n    */\n\n    this.tech_.one('play', playHandler); // Define the dispose function to clean up our events\n\n    this.dispose = () => {\n      this.clearSeekingAppendCheck_();\n      this.logger_('dispose');\n      this.tech_.off('waiting', waitingHandler);\n      this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      this.tech_.off('canplay', canPlayHandler);\n      this.tech_.off('play', playHandler);\n      this.tech_.off('seeking', this.watchForBadSeeking_);\n      this.tech_.off('seeked', this.clearSeekingAppendCheck_);\n      loaderTypes.forEach(type => {\n        pc[`${type}SegmentLoader_`].off('appendsdone', loaderChecks[type].updateend);\n        pc[`${type}SegmentLoader_`].off('playlistupdate', loaderChecks[type].reset);\n        this.tech_.off(['seeked', 'seeking'], loaderChecks[type].reset);\n      });\n\n      if (this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      this.resetTimeUpdate_();\n    };\n  }\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n\n  monitorCurrentTime_() {\n    this.checkCurrentTime_();\n\n    if (this.checkCurrentTimeTimeout_) {\n      window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n    } // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n\n\n    this.checkCurrentTimeTimeout_ = window$1.setTimeout(this.monitorCurrentTime_.bind(this), 250);\n  }\n  /**\n   * Reset stalled download stats for a specific type of loader\n   *\n   * @param {string} type\n   *        The segment loader type to check.\n   *\n   * @listens SegmentLoader#playlistupdate\n   * @listens Tech#seeking\n   * @listens Tech#seeked\n   */\n\n\n  resetSegmentDownloads_(type) {\n    const loader = this.playlistController_[`${type}SegmentLoader_`];\n\n    if (this[`${type}StalledDownloads_`] > 0) {\n      this.logger_(`resetting possible stalled download count for ${type} loader`);\n    }\n\n    this[`${type}StalledDownloads_`] = 0;\n    this[`${type}Buffered_`] = loader.buffered_();\n  }\n  /**\n   * Checks on every segment `appendsdone` to see\n   * if segment appends are making progress. If they are not\n   * and we are still downloading bytes. We exclude the playlist.\n   *\n   * @param {string} type\n   *        The segment loader type to check.\n   *\n   * @listens SegmentLoader#appendsdone\n   */\n\n\n  checkSegmentDownloads_(type) {\n    const pc = this.playlistController_;\n    const loader = pc[`${type}SegmentLoader_`];\n    const buffered = loader.buffered_();\n    const isBufferedDifferent = isRangeDifferent(this[`${type}Buffered_`], buffered);\n    this[`${type}Buffered_`] = buffered; // if another watcher is going to fix the issue or\n    // the buffered value for this loader changed\n    // appends are working\n\n    if (isBufferedDifferent) {\n      const metadata = {\n        bufferedRanges: buffered\n      };\n      pc.trigger({\n        type: 'bufferedrangeschanged',\n        metadata\n      });\n      this.resetSegmentDownloads_(type);\n      return;\n    }\n\n    this[`${type}StalledDownloads_`]++;\n    this.logger_(`found #${this[`${type}StalledDownloads_`]} ${type} appends that did not increase buffer (possible stalled download)`, {\n      playlistId: loader.playlist_ && loader.playlist_.id,\n      buffered: timeRangesToArray(buffered)\n    }); // after 10 possibly stalled appends with no reset, exclude\n\n    if (this[`${type}StalledDownloads_`] < 10) {\n      return;\n    }\n\n    this.logger_(`${type} loader stalled download exclusion`);\n    this.resetSegmentDownloads_(type);\n    this.tech_.trigger({\n      type: 'usage',\n      name: `vhs-${type}-download-exclusion`\n    });\n\n    if (type === 'subtitle') {\n      return;\n    } // TODO: should we exclude audio tracks rather than main tracks\n    // when type is audio?\n\n\n    pc.excludePlaylist({\n      error: {\n        message: `Excessive ${type} segment downloading detected.`\n      },\n      playlistExclusionDuration: Infinity\n    });\n  }\n  /**\n   * The purpose of this function is to emulate the \"waiting\" event on\n   * browsers that do not emit it when they are waiting for more\n   * data to continue playback\n   *\n   * @private\n   */\n\n\n  checkCurrentTime_() {\n    if (this.tech_.paused() || this.tech_.seeking()) {\n      return;\n    }\n\n    const currentTime = this.tech_.currentTime();\n    const buffered = this.tech_.buffered();\n\n    if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n      // If current time is at the end of the final buffered region, then any playback\n      // stall is most likely caused by buffering in a low bandwidth environment. The tech\n      // should fire a `waiting` event in this scenario, but due to browser and tech\n      // inconsistencies. Calling `techWaiting_` here allows us to simulate\n      // responding to a native `waiting` event when the tech fails to emit one.\n      return this.techWaiting_();\n    }\n\n    if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n      this.consecutiveUpdates++;\n      this.waiting_();\n    } else if (currentTime === this.lastRecordedTime) {\n      this.consecutiveUpdates++;\n    } else {\n      this.playedRanges_.push(createTimeRanges([this.lastRecordedTime, currentTime]));\n      const metadata = {\n        playedRanges: this.playedRanges_\n      };\n      this.playlistController_.trigger({\n        type: 'playedrangeschanged',\n        metadata\n      });\n      this.consecutiveUpdates = 0;\n      this.lastRecordedTime = currentTime;\n    }\n  }\n  /**\n   * Resets the 'timeupdate' mechanism designed to detect that we are stalled\n   *\n   * @private\n   */\n\n\n  resetTimeUpdate_() {\n    this.consecutiveUpdates = 0;\n  }\n  /**\n   * Fixes situations where there's a bad seek\n   *\n   * @return {boolean} whether an action was taken to fix the seek\n   * @private\n   */\n\n\n  fixesBadSeeks_() {\n    const seeking = this.tech_.seeking();\n\n    if (!seeking) {\n      return false;\n    } // TODO: It's possible that these seekable checks should be moved out of this function\n    // and into a function that runs on seekablechange. It's also possible that we only need\n    // afterSeekableWindow as the buffered check at the bottom is good enough to handle before\n    // seekable range.\n\n\n    const seekable = this.seekable();\n    const currentTime = this.tech_.currentTime();\n    const isAfterSeekableRange = this.afterSeekableWindow_(seekable, currentTime, this.media(), this.allowSeeksWithinUnsafeLiveWindow);\n    let seekTo;\n\n    if (isAfterSeekableRange) {\n      const seekableEnd = seekable.end(seekable.length - 1); // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n\n      seekTo = seekableEnd;\n    }\n\n    if (this.beforeSeekableWindow_(seekable, currentTime)) {\n      const seekableStart = seekable.start(0); // sync to the beginning of the live window\n      // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n\n      seekTo = seekableStart + ( // if the playlist is too short and the seekable range is an exact time (can\n      // happen in live with a 3 segment playlist), then don't use a time delta\n      seekableStart === seekable.end(0) ? 0 : SAFE_TIME_DELTA);\n    }\n\n    if (typeof seekTo !== 'undefined') {\n      this.logger_(`Trying to seek outside of seekable at time ${currentTime} with ` + `seekable range ${printableRange(seekable)}. Seeking to ` + `${seekTo}.`);\n      this.tech_.setCurrentTime(seekTo);\n      return true;\n    }\n\n    const sourceUpdater = this.playlistController_.sourceUpdater_;\n    const buffered = this.tech_.buffered();\n    const audioBuffered = sourceUpdater.audioBuffer ? sourceUpdater.audioBuffered() : null;\n    const videoBuffered = sourceUpdater.videoBuffer ? sourceUpdater.videoBuffered() : null;\n    const media = this.media(); // verify that at least two segment durations or one part duration have been\n    // appended before checking for a gap.\n\n    const minAppendedDuration = media.partTargetDuration ? media.partTargetDuration : (media.targetDuration - TIME_FUDGE_FACTOR) * 2; // verify that at least two segment durations have been\n    // appended before checking for a gap.\n\n    const bufferedToCheck = [audioBuffered, videoBuffered];\n\n    for (let i = 0; i < bufferedToCheck.length; i++) {\n      // skip null buffered\n      if (!bufferedToCheck[i]) {\n        continue;\n      }\n\n      const timeAhead = timeAheadOf(bufferedToCheck[i], currentTime); // if we are less than two video/audio segment durations or one part\n      // duration behind we haven't appended enough to call this a bad seek.\n\n      if (timeAhead < minAppendedDuration) {\n        return false;\n      }\n    }\n\n    const nextRange = findNextRange(buffered, currentTime); // we have appended enough content, but we don't have anything buffered\n    // to seek over the gap\n\n    if (nextRange.length === 0) {\n      return false;\n    }\n\n    seekTo = nextRange.start(0) + SAFE_TIME_DELTA;\n    this.logger_(`Buffered region starts (${nextRange.start(0)}) ` + ` just beyond seek point (${currentTime}). Seeking to ${seekTo}.`);\n    this.tech_.setCurrentTime(seekTo);\n    return true;\n  }\n  /**\n   * Handler for situations when we determine the player is waiting.\n   *\n   * @private\n   */\n\n\n  waiting_() {\n    if (this.techWaiting_()) {\n      return;\n    } // All tech waiting checks failed. Use last resort correction\n\n\n    const currentTime = this.tech_.currentTime();\n    const buffered = this.tech_.buffered();\n    const currentRange = findRange(buffered, currentTime); // Sometimes the player can stall for unknown reasons within a contiguous buffered\n    // region with no indication that anything is amiss (seen in Firefox). Seeking to\n    // currentTime is usually enough to kickstart the player. This checks that the player\n    // is currently within a buffered region before attempting a corrective seek.\n    // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n    // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n    // make sure there is ~3 seconds of forward buffer before taking any corrective action\n    // to avoid triggering an `unknownwaiting` event when the network is slow.\n\n    if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n      this.resetTimeUpdate_();\n      this.tech_.setCurrentTime(currentTime);\n      this.logger_(`Stopped at ${currentTime} while inside a buffered region ` + `[${currentRange.start(0)} -> ${currentRange.end(0)}]. Attempting to resume ` + 'playback by seeking to the current time.'); // unknown waiting corrections may be useful for monitoring QoS\n\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-unknown-waiting'\n      });\n      return;\n    }\n  }\n  /**\n   * Handler for situations when the tech fires a `waiting` event\n   *\n   * @return {boolean}\n   *         True if an action (or none) was needed to correct the waiting. False if no\n   *         checks passed\n   * @private\n   */\n\n\n  techWaiting_() {\n    const seekable = this.seekable();\n    const currentTime = this.tech_.currentTime();\n\n    if (this.tech_.seeking()) {\n      // Tech is seeking or already waiting on another action, no action needed\n      return true;\n    }\n\n    if (this.beforeSeekableWindow_(seekable, currentTime)) {\n      const livePoint = seekable.end(seekable.length - 1);\n      this.logger_(`Fell out of live window at time ${currentTime}. Seeking to ` + `live point (seekable end) ${livePoint}`);\n      this.resetTimeUpdate_();\n      this.tech_.setCurrentTime(livePoint); // live window resyncs may be useful for monitoring QoS\n\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-live-resync'\n      });\n      return true;\n    }\n\n    const sourceUpdater = this.tech_.vhs.playlistController_.sourceUpdater_;\n    const buffered = this.tech_.buffered();\n    const videoUnderflow = this.videoUnderflow_({\n      audioBuffered: sourceUpdater.audioBuffered(),\n      videoBuffered: sourceUpdater.videoBuffered(),\n      currentTime\n    });\n\n    if (videoUnderflow) {\n      // Even though the video underflowed and was stuck in a gap, the audio overplayed\n      // the gap, leading currentTime into a buffered range. Seeking to currentTime\n      // allows the video to catch up to the audio position without losing any audio\n      // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n      this.resetTimeUpdate_();\n      this.tech_.setCurrentTime(currentTime); // video underflow may be useful for monitoring QoS\n\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-video-underflow'\n      });\n      return true;\n    }\n\n    const nextRange = findNextRange(buffered, currentTime); // check for gap\n\n    if (nextRange.length > 0) {\n      this.logger_(`Stopped at ${currentTime} and seeking to ${nextRange.start(0)}`);\n      this.resetTimeUpdate_();\n      this.skipTheGap_(currentTime);\n      return true;\n    } // All checks failed. Returning false to indicate failure to correct waiting\n\n\n    return false;\n  }\n\n  afterSeekableWindow_(seekable, currentTime, playlist, allowSeeksWithinUnsafeLiveWindow = false) {\n    if (!seekable.length) {\n      // we can't make a solid case if there's no seekable, default to false\n      return false;\n    }\n\n    let allowedEnd = seekable.end(seekable.length - 1) + SAFE_TIME_DELTA;\n    const isLive = !playlist.endList;\n    const isLLHLS = typeof playlist.partTargetDuration === 'number';\n\n    if (isLive && (isLLHLS || allowSeeksWithinUnsafeLiveWindow)) {\n      allowedEnd = seekable.end(seekable.length - 1) + playlist.targetDuration * 3;\n    }\n\n    if (currentTime > allowedEnd) {\n      return true;\n    }\n\n    return false;\n  }\n\n  beforeSeekableWindow_(seekable, currentTime) {\n    if (seekable.length && // can't fall before 0 and 0 seekable start identifies VOD stream\n    seekable.start(0) > 0 && currentTime < seekable.start(0) - this.liveRangeSafeTimeDelta) {\n      return true;\n    }\n\n    return false;\n  }\n\n  videoUnderflow_({\n    videoBuffered,\n    audioBuffered,\n    currentTime\n  }) {\n    // audio only content will not have video underflow :)\n    if (!videoBuffered) {\n      return;\n    }\n\n    let gap; // find a gap in demuxed content.\n\n    if (videoBuffered.length && audioBuffered.length) {\n      // in Chrome audio will continue to play for ~3s when we run out of video\n      // so we have to check that the video buffer did have some buffer in the\n      // past.\n      const lastVideoRange = findRange(videoBuffered, currentTime - 3);\n      const videoRange = findRange(videoBuffered, currentTime);\n      const audioRange = findRange(audioBuffered, currentTime);\n\n      if (audioRange.length && !videoRange.length && lastVideoRange.length) {\n        gap = {\n          start: lastVideoRange.end(0),\n          end: audioRange.end(0)\n        };\n      } // find a gap in muxed content.\n\n    } else {\n      const nextRange = findNextRange(videoBuffered, currentTime); // Even if there is no available next range, there is still a possibility we are\n      // stuck in a gap due to video underflow.\n\n      if (!nextRange.length) {\n        gap = this.gapFromVideoUnderflow_(videoBuffered, currentTime);\n      }\n    }\n\n    if (gap) {\n      this.logger_(`Encountered a gap in video from ${gap.start} to ${gap.end}. ` + `Seeking to current time ${currentTime}`);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Timer callback. If playback still has not proceeded, then we seek\n   * to the start of the next buffered region.\n   *\n   * @private\n   */\n\n\n  skipTheGap_(scheduledCurrentTime) {\n    const buffered = this.tech_.buffered();\n    const currentTime = this.tech_.currentTime();\n    const nextRange = findNextRange(buffered, currentTime);\n    this.resetTimeUpdate_();\n\n    if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n      return;\n    }\n\n    this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0)); // only seek if we still have not played\n\n    this.tech_.setCurrentTime(nextRange.start(0) + TIME_FUDGE_FACTOR);\n    const metadata = {\n      gapInfo: {\n        from: currentTime,\n        to: nextRange.start(0)\n      }\n    };\n    this.playlistController_.trigger({\n      type: 'gapjumped',\n      metadata\n    });\n    this.tech_.trigger({\n      type: 'usage',\n      name: 'vhs-gap-skip'\n    });\n  }\n\n  gapFromVideoUnderflow_(buffered, currentTime) {\n    // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n    // playing for ~3 seconds after the video gap starts. This is done to account for\n    // video buffer underflow/underrun (note that this is not done when there is audio\n    // buffer underflow/underrun -- in that case the video will stop as soon as it\n    // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n    // video stalls). The player's time will reflect the playthrough of audio, so the\n    // time will appear as if we are in a buffered region, even if we are stuck in a\n    // \"gap.\"\n    //\n    // Example:\n    // video buffer:   0 => 10.1, 10.2 => 20\n    // audio buffer:   0 => 20\n    // overall buffer: 0 => 10.1, 10.2 => 20\n    // current time: 13\n    //\n    // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n    // however, the audio continued playing until it reached ~3 seconds past the gap\n    // (13 seconds), at which point it stops as well. Since current time is past the\n    // gap, findNextRange will return no ranges.\n    //\n    // To check for this issue, we see if there is a gap that starts somewhere within\n    // a 3 second range (3 seconds +/- 1 second) back from our current time.\n    const gaps = findGaps(buffered);\n\n    for (let i = 0; i < gaps.length; i++) {\n      const start = gaps.start(i);\n      const end = gaps.end(i); // gap is starts no more than 4 seconds back\n\n      if (currentTime - start < 4 && currentTime - start > 2) {\n        return {\n          start,\n          end\n        };\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst defaultOptions = {\n  errorInterval: 30,\n\n  getSource(next) {\n    const tech = this.tech({\n      IWillNotUseThisInPlugins: true\n    });\n    const sourceObj = tech.currentSource_ || this.currentSource();\n    return next(sourceObj);\n  }\n\n};\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\n\nconst initPlugin = function (player, options) {\n  let lastCalled = 0;\n  let seekTo = 0;\n  const localOptions = merge(defaultOptions, options);\n  player.ready(() => {\n    player.trigger({\n      type: 'usage',\n      name: 'vhs-error-reload-initialized'\n    });\n  });\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n\n  const loadedMetadataHandler = function () {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n\n\n  const setSource = function (sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n    player.one('loadedmetadata', loadedMetadataHandler);\n    player.src(sourceObj);\n    player.trigger({\n      type: 'usage',\n      name: 'vhs-error-reload'\n    });\n    player.play();\n  };\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n\n\n  const errorHandler = function () {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({\n        type: 'usage',\n        name: 'vhs-error-reload-canceled'\n      });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      videojs.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n\n    lastCalled = Date.now();\n    return localOptions.getSource.call(player, setSource);\n  };\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n\n\n  const cleanupEvents = function () {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n\n\n  const reinitPlugin = function (newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents); // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n\n  player.reloadSourceOnError = reinitPlugin;\n};\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\n\n\nconst reloadSourceOnError = function (options) {\n  initPlugin(this, options);\n};\n\nvar version$4 = \"3.17.0\";\n\nvar version$3 = \"7.1.0\";\n\nvar version$2 = \"1.3.1\";\n\nvar version$1 = \"7.2.0\";\n\nvar version = \"4.0.2\";\n\nconst Vhs = {\n  PlaylistLoader,\n  Playlist,\n  utils,\n  STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,\n  lastBandwidthSelector,\n  movingAverageBandwidthSelector,\n  comparePlaylistBandwidth,\n  comparePlaylistResolution,\n  xhr: xhrFactory()\n}; // Define getter/setters for config properties\n\nObject.keys(Config).forEach(prop => {\n  Object.defineProperty(Vhs, prop, {\n    get() {\n      videojs.log.warn(`using Vhs.${prop} is UNSAFE be sure you know what you are doing`);\n      return Config[prop];\n    },\n\n    set(value) {\n      videojs.log.warn(`using Vhs.${prop} is UNSAFE be sure you know what you are doing`);\n\n      if (typeof value !== 'number' || value < 0) {\n        videojs.log.warn(`value of Vhs.${prop} must be greater than or equal to 0`);\n        return;\n      }\n\n      Config[prop] = value;\n    }\n\n  });\n});\nconst LOCAL_STORAGE_KEY = 'videojs-vhs';\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in vhs.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleVhsMediaChange\n */\n\nconst handleVhsMediaChange = function (qualityLevels, playlistLoader) {\n  const newPlaylist = playlistLoader.media();\n  let selectedIndex = -1;\n\n  for (let i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.id) {\n      selectedIndex = i;\n      break;\n    }\n  }\n\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex,\n    type: 'change'\n  });\n};\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} vhs Vhs object to listen to for media events.\n * @function handleVhsLoadedMetadata\n */\n\n\nconst handleVhsLoadedMetadata = function (qualityLevels, vhs) {\n  vhs.representations().forEach(rep => {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleVhsMediaChange(qualityLevels, vhs.playlists);\n}; // VHS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\n\n\nVhs.canPlaySource = function () {\n  return videojs.log.warn('VHS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n\nconst emeKeySystems = (keySystemOptions, mainPlaylist, audioPlaylist) => {\n  if (!keySystemOptions) {\n    return keySystemOptions;\n  }\n\n  let codecs = {};\n\n  if (mainPlaylist && mainPlaylist.attributes && mainPlaylist.attributes.CODECS) {\n    codecs = unwrapCodecList(parseCodecs(mainPlaylist.attributes.CODECS));\n  }\n\n  if (audioPlaylist && audioPlaylist.attributes && audioPlaylist.attributes.CODECS) {\n    codecs.audio = audioPlaylist.attributes.CODECS;\n  }\n\n  const videoContentType = getMimeForCodec(codecs.video);\n  const audioContentType = getMimeForCodec(codecs.audio); // upsert the content types based on the selected playlist\n\n  const keySystemContentTypes = {};\n\n  for (const keySystem in keySystemOptions) {\n    keySystemContentTypes[keySystem] = {};\n\n    if (audioContentType) {\n      keySystemContentTypes[keySystem].audioContentType = audioContentType;\n    }\n\n    if (videoContentType) {\n      keySystemContentTypes[keySystem].videoContentType = videoContentType;\n    } // Default to using the video playlist's PSSH even though they may be different, as\n    // videojs-contrib-eme will only accept one in the options.\n    //\n    // This shouldn't be an issue for most cases as early intialization will handle all\n    // unique PSSH values, and if they aren't, then encrypted events should have the\n    // specific information needed for the unique license.\n\n\n    if (mainPlaylist.contentProtection && mainPlaylist.contentProtection[keySystem] && mainPlaylist.contentProtection[keySystem].pssh) {\n      keySystemContentTypes[keySystem].pssh = mainPlaylist.contentProtection[keySystem].pssh;\n    } // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'\n    // so we need to prevent overwriting the URL entirely\n\n\n    if (typeof keySystemOptions[keySystem] === 'string') {\n      keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];\n    }\n  }\n\n  return merge(keySystemOptions, keySystemContentTypes);\n};\n/**\n * @typedef {Object} KeySystems\n *\n * keySystems configuration for https://github.com/videojs/videojs-contrib-eme\n * Note: not all options are listed here.\n *\n * @property {Uint8Array} [pssh]\n *           Protection System Specific Header\n */\n\n/**\n * Goes through all the playlists and collects an array of KeySystems options objects\n * containing each playlist's keySystems and their pssh values, if available.\n *\n * @param {Object[]} playlists\n *        The playlists to look through\n * @param {string[]} keySystems\n *        The keySystems to collect pssh values for\n *\n * @return {KeySystems[]}\n *         An array of KeySystems objects containing available key systems and their\n *         pssh values\n */\n\n\nconst getAllPsshKeySystemsOptions = (playlists, keySystems) => {\n  return playlists.reduce((keySystemsArr, playlist) => {\n    if (!playlist.contentProtection) {\n      return keySystemsArr;\n    }\n\n    const keySystemsOptions = keySystems.reduce((keySystemsObj, keySystem) => {\n      const keySystemOptions = playlist.contentProtection[keySystem];\n\n      if (keySystemOptions && keySystemOptions.pssh) {\n        keySystemsObj[keySystem] = {\n          pssh: keySystemOptions.pssh\n        };\n      }\n\n      return keySystemsObj;\n    }, {});\n\n    if (Object.keys(keySystemsOptions).length) {\n      keySystemsArr.push(keySystemsOptions);\n    }\n\n    return keySystemsArr;\n  }, []);\n};\n/**\n * Returns a promise that waits for the\n * [eme plugin](https://github.com/videojs/videojs-contrib-eme) to create a key session.\n *\n * Works around https://bugs.chromium.org/p/chromium/issues/detail?id=895449 in non-IE11\n * browsers.\n *\n * As per the above ticket, this is particularly important for Chrome, where, if\n * unencrypted content is appended before encrypted content and the key session has not\n * been created, a MEDIA_ERR_DECODE will be thrown once the encrypted content is reached\n * during playback.\n *\n * @param {Object} player\n *        The player instance\n * @param {Object[]} sourceKeySystems\n *        The key systems options from the player source\n * @param {Object} [audioMedia]\n *        The active audio media playlist (optional)\n * @param {Object[]} mainPlaylists\n *        The playlists found on the main playlist object\n *\n * @return {Object}\n *         Promise that resolves when the key session has been created\n */\n\n\nconst waitForKeySessionCreation = ({\n  player,\n  sourceKeySystems,\n  audioMedia,\n  mainPlaylists\n}) => {\n  if (!player.eme.initializeMediaKeys) {\n    return Promise.resolve();\n  } // TODO should all audio PSSH values be initialized for DRM?\n  //\n  // All unique video rendition pssh values are initialized for DRM, but here only\n  // the initial audio playlist license is initialized. In theory, an encrypted\n  // event should be fired if the user switches to an alternative audio playlist\n  // where a license is required, but this case hasn't yet been tested. In addition, there\n  // may be many alternate audio playlists unlikely to be used (e.g., multiple different\n  // languages).\n\n\n  const playlists = audioMedia ? mainPlaylists.concat([audioMedia]) : mainPlaylists;\n  const keySystemsOptionsArr = getAllPsshKeySystemsOptions(playlists, Object.keys(sourceKeySystems));\n  const initializationFinishedPromises = [];\n  const keySessionCreatedPromises = []; // Since PSSH values are interpreted as initData, EME will dedupe any duplicates. The\n  // only place where it should not be deduped is for ms-prefixed APIs, but\n  // the existence of modern EME APIs in addition to\n  // ms-prefixed APIs on Edge should prevent this from being a concern.\n  // initializeMediaKeys also won't use the webkit-prefixed APIs.\n\n  keySystemsOptionsArr.forEach(keySystemsOptions => {\n    keySessionCreatedPromises.push(new Promise((resolve, reject) => {\n      player.tech_.one('keysessioncreated', resolve);\n    }));\n    initializationFinishedPromises.push(new Promise((resolve, reject) => {\n      player.eme.initializeMediaKeys({\n        keySystems: keySystemsOptions\n      }, err => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve();\n      });\n    }));\n  }); // The reasons Promise.race is chosen over Promise.any:\n  //\n  // * Promise.any is only available in Safari 14+.\n  // * None of these promises are expected to reject. If they do reject, it might be\n  //   better here for the race to surface the rejection, rather than mask it by using\n  //   Promise.any.\n\n  return Promise.race([// If a session was previously created, these will all finish resolving without\n  // creating a new session, otherwise it will take until the end of all license\n  // requests, which is why the key session check is used (to make setup much faster).\n  Promise.all(initializationFinishedPromises), // Once a single session is created, the browser knows DRM will be used.\n  Promise.race(keySessionCreatedPromises)]);\n};\n/**\n * If the [eme](https://github.com/videojs/videojs-contrib-eme) plugin is available, and\n * there are keySystems on the source, sets up source options to prepare the source for\n * eme.\n *\n * @param {Object} player\n *        The player instance\n * @param {Object[]} sourceKeySystems\n *        The key systems options from the player source\n * @param {Object} media\n *        The active media playlist\n * @param {Object} [audioMedia]\n *        The active audio media playlist (optional)\n *\n * @return {boolean}\n *         Whether or not options were configured and EME is available\n */\n\nconst setupEmeOptions = ({\n  player,\n  sourceKeySystems,\n  media,\n  audioMedia\n}) => {\n  const sourceOptions = emeKeySystems(sourceKeySystems, media, audioMedia);\n\n  if (!sourceOptions) {\n    return false;\n  }\n\n  player.currentSource().keySystems = sourceOptions; // eme handles the rest of the setup, so if it is missing\n  // do nothing.\n\n  if (sourceOptions && !player.eme) {\n    videojs.log.warn('DRM encrypted source cannot be decrypted without a DRM plugin');\n    return false;\n  }\n\n  return true;\n};\n\nconst getVhsLocalStorage = () => {\n  if (!window$1.localStorage) {\n    return null;\n  }\n\n  const storedObject = window$1.localStorage.getItem(LOCAL_STORAGE_KEY);\n\n  if (!storedObject) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(storedObject);\n  } catch (e) {\n    // someone may have tampered with the value\n    return null;\n  }\n};\n\nconst updateVhsLocalStorage = options => {\n  if (!window$1.localStorage) {\n    return false;\n  }\n\n  let objectToStore = getVhsLocalStorage();\n  objectToStore = objectToStore ? merge(objectToStore, options) : options;\n\n  try {\n    window$1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(objectToStore));\n  } catch (e) {\n    // Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where\n    // storage is set to 0).\n    // https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions\n    // No need to perform any operation.\n    return false;\n  }\n\n  return objectToStore;\n};\n/**\n * Parses VHS-supported media types from data URIs. See\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n * for information on data URIs.\n *\n * @param {string} dataUri\n *        The data URI\n *\n * @return {string|Object}\n *         The parsed object/string, or the original string if no supported media type\n *         was found\n */\n\n\nconst expandDataUri = dataUri => {\n  if (dataUri.toLowerCase().indexOf('data:application/vnd.videojs.vhs+json,') === 0) {\n    return JSON.parse(dataUri.substring(dataUri.indexOf(',') + 1));\n  } // no known case for this data URI, return the string as-is\n\n\n  return dataUri;\n};\n/**\n * Adds a request hook to an xhr object\n *\n * @param {Object} xhr object to add the onRequest hook to\n * @param {function} callback hook function for an xhr request\n */\n\n\nconst addOnRequestHook = (xhr, callback) => {\n  if (!xhr._requestCallbackSet) {\n    xhr._requestCallbackSet = new Set();\n  }\n\n  xhr._requestCallbackSet.add(callback);\n};\n/**\n * Adds a response hook to an xhr object\n *\n * @param {Object} xhr object to add the onResponse hook to\n * @param {function} callback hook function for an xhr response\n */\n\n\nconst addOnResponseHook = (xhr, callback) => {\n  if (!xhr._responseCallbackSet) {\n    xhr._responseCallbackSet = new Set();\n  }\n\n  xhr._responseCallbackSet.add(callback);\n};\n/**\n * Removes a request hook on an xhr object, deletes the onRequest set if empty.\n *\n * @param {Object} xhr object to remove the onRequest hook from\n * @param {function} callback hook function to remove\n */\n\n\nconst removeOnRequestHook = (xhr, callback) => {\n  if (!xhr._requestCallbackSet) {\n    return;\n  }\n\n  xhr._requestCallbackSet.delete(callback);\n\n  if (!xhr._requestCallbackSet.size) {\n    delete xhr._requestCallbackSet;\n  }\n};\n/**\n * Removes a response hook on an xhr object, deletes the onResponse set if empty.\n *\n * @param {Object} xhr object to remove the onResponse hook from\n * @param {function} callback hook function to remove\n */\n\n\nconst removeOnResponseHook = (xhr, callback) => {\n  if (!xhr._responseCallbackSet) {\n    return;\n  }\n\n  xhr._responseCallbackSet.delete(callback);\n\n  if (!xhr._responseCallbackSet.size) {\n    delete xhr._responseCallbackSet;\n  }\n};\n/**\n * Whether the browser has built-in HLS support.\n */\n\n\nVhs.supportsNativeHls = function () {\n  if (!document || !document.createElement) {\n    return false;\n  }\n\n  const video = document.createElement('video'); // native HLS is definitely not supported if HTML5 video isn't\n\n  if (!videojs.getTech('Html5').isSupported()) {\n    return false;\n  } // HLS manifests can go by many mime-types\n\n\n  const canPlay = [// Apple santioned\n  'application/vnd.apple.mpegurl', // Apple sanctioned for backwards compatibility\n  'audio/mpegurl', // Very common\n  'audio/x-mpegurl', // Very common\n  'application/x-mpegurl', // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n  return canPlay.some(function (canItPlay) {\n    return /maybe|probably/i.test(video.canPlayType(canItPlay));\n  });\n}();\n\nVhs.supportsNativeDash = function () {\n  if (!document || !document.createElement || !videojs.getTech('Html5').isSupported()) {\n    return false;\n  }\n\n  return /maybe|probably/i.test(document.createElement('video').canPlayType('application/dash+xml'));\n}();\n\nVhs.supportsTypeNatively = type => {\n  if (type === 'hls') {\n    return Vhs.supportsNativeHls;\n  }\n\n  if (type === 'dash') {\n    return Vhs.supportsNativeDash;\n  }\n\n  return false;\n};\n/**\n * VHS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\n\n\nVhs.isSupported = function () {\n  return videojs.log.warn('VHS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\n/**\n * A global function for setting an onRequest hook\n *\n * @param {function} callback for request modifiction\n */\n\n\nVhs.xhr.onRequest = function (callback) {\n  addOnRequestHook(Vhs.xhr, callback);\n};\n/**\n * A global function for setting an onResponse hook\n *\n * @param {callback} callback for response data retrieval\n */\n\n\nVhs.xhr.onResponse = function (callback) {\n  addOnResponseHook(Vhs.xhr, callback);\n};\n/**\n * Deletes a global onRequest callback if it exists\n *\n * @param {function} callback to delete from the global set\n */\n\n\nVhs.xhr.offRequest = function (callback) {\n  removeOnRequestHook(Vhs.xhr, callback);\n};\n/**\n * Deletes a global onResponse callback if it exists\n *\n * @param {function} callback to delete from the global set\n */\n\n\nVhs.xhr.offResponse = function (callback) {\n  removeOnResponseHook(Vhs.xhr, callback);\n};\n\nconst Component = videojs.getComponent('Component');\n/**\n * The Vhs Handler object, where we orchestrate all of the parts\n * of VHS to interact with video.js\n *\n * @class VhsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nclass VhsHandler extends Component {\n  constructor(source, tech, options) {\n    super(tech, options.vhs); // if a tech level `initialBandwidth` option was passed\n    // use that over the VHS level `bandwidth` option\n\n    if (typeof options.initialBandwidth === 'number') {\n      this.options_.bandwidth = options.initialBandwidth;\n    }\n\n    this.logger_ = logger('VhsHandler'); // we need access to the player in some cases,\n    // so, get it from Video.js via the `playerId`\n\n    if (tech.options_ && tech.options_.playerId) {\n      const _player = videojs.getPlayer(tech.options_.playerId);\n\n      this.player_ = _player;\n    }\n\n    this.tech_ = tech;\n    this.source_ = source;\n    this.stats = {};\n    this.ignoreNextSeekingEvent_ = false;\n    this.setOptions_();\n\n    if (this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {\n      tech.overrideNativeAudioTracks(true);\n      tech.overrideNativeVideoTracks(true);\n    } else if (this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      // overriding native VHS only works if audio tracks have been emulated\n      // error early if we're misconfigured\n      throw new Error('Overriding native VHS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    } // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n\n\n    this.on(document, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], event => {\n      const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n\n      if (fullscreenElement && fullscreenElement.contains(this.tech_.el())) {\n        this.playlistController_.fastQualityChange_();\n      } else {\n        // When leaving fullscreen, since the in page pixel dimensions should be smaller\n        // than full screen, see if there should be a rendition switch down to preserve\n        // bandwidth.\n        this.playlistController_.checkABR_();\n      }\n    });\n    this.on(this.tech_, 'seeking', function () {\n      if (this.ignoreNextSeekingEvent_) {\n        this.ignoreNextSeekingEvent_ = false;\n        return;\n      }\n\n      this.setCurrentTime(this.tech_.currentTime());\n    });\n    this.on(this.tech_, 'error', function () {\n      // verify that the error was real and we are loaded\n      // enough to have pc loaded.\n      if (this.tech_.error() && this.playlistController_) {\n        this.playlistController_.pauseLoading();\n      }\n    });\n    this.on(this.tech_, 'play', this.play);\n  }\n  /**\n   * Set VHS options based on options from configuration, as well as partial\n   * options to be passed at a later time.\n   *\n   * @param {Object} options A partial chunk of config options\n   */\n\n\n  setOptions_(options = {}) {\n    this.options_ = merge(this.options_, options); // defaults\n\n    this.options_.withCredentials = this.options_.withCredentials || false;\n    this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;\n    this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || false;\n    this.options_.usePlayerObjectFit = this.options_.usePlayerObjectFit || false;\n    this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== 'undefined' ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;\n    this.options_.useForcedSubtitles = this.options_.useForcedSubtitles || false;\n    this.options_.useNetworkInformationApi = typeof this.options_.useNetworkInformationApi !== 'undefined' ? this.options_.useNetworkInformationApi : true;\n    this.options_.useDtsForTimestampOffset = this.options_.useDtsForTimestampOffset || false;\n    this.options_.customTagParsers = this.options_.customTagParsers || [];\n    this.options_.customTagMappers = this.options_.customTagMappers || [];\n    this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;\n    this.options_.llhls = this.options_.llhls === false ? false : true;\n    this.options_.bufferBasedABR = this.options_.bufferBasedABR || false;\n\n    if (typeof this.options_.playlistExclusionDuration !== 'number') {\n      this.options_.playlistExclusionDuration = 60;\n    }\n\n    if (typeof this.options_.bandwidth !== 'number') {\n      if (this.options_.useBandwidthFromLocalStorage) {\n        const storedObject = getVhsLocalStorage();\n\n        if (storedObject && storedObject.bandwidth) {\n          this.options_.bandwidth = storedObject.bandwidth;\n          this.tech_.trigger({\n            type: 'usage',\n            name: 'vhs-bandwidth-from-local-storage'\n          });\n        }\n\n        if (storedObject && storedObject.throughput) {\n          this.options_.throughput = storedObject.throughput;\n          this.tech_.trigger({\n            type: 'usage',\n            name: 'vhs-throughput-from-local-storage'\n          });\n        }\n      }\n    } // if bandwidth was not set by options or pulled from local storage, start playlist\n    // selection at a reasonable bandwidth\n\n\n    if (typeof this.options_.bandwidth !== 'number') {\n      this.options_.bandwidth = Config.INITIAL_BANDWIDTH;\n    } // If the bandwidth number is unchanged from the initial setting\n    // then this takes precedence over the enableLowInitialPlaylist option\n\n\n    this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Config.INITIAL_BANDWIDTH; // grab options passed to player.src\n\n    ['withCredentials', 'useDevicePixelRatio', 'usePlayerObjectFit', 'customPixelRatio', 'limitRenditionByPlayerDimensions', 'bandwidth', 'customTagParsers', 'customTagMappers', 'cacheEncryptionKeys', 'playlistSelector', 'initialPlaylistSelector', 'bufferBasedABR', 'liveRangeSafeTimeDelta', 'llhls', 'useForcedSubtitles', 'useNetworkInformationApi', 'useDtsForTimestampOffset', 'exactManifestTimings', 'leastPixelDiffSelector'].forEach(option => {\n      if (typeof this.source_[option] !== 'undefined') {\n        this.options_[option] = this.source_[option];\n      }\n    });\n    this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;\n    this.useDevicePixelRatio = this.options_.useDevicePixelRatio;\n    this.usePlayerObjectFit = this.options_.usePlayerObjectFit;\n    const customPixelRatio = this.options_.customPixelRatio; // Ensure the custom pixel ratio is a number greater than or equal to 0\n\n    if (typeof customPixelRatio === 'number' && customPixelRatio >= 0) {\n      this.customPixelRatio = customPixelRatio;\n    }\n  } // alias for public method to set options\n\n\n  setOptions(options = {}) {\n    this.setOptions_(options);\n  }\n  /**\n   * called when player.src gets called, handle a new source\n   *\n   * @param {Object} src the source object to handle\n   */\n\n\n  src(src, type) {\n    // do nothing if the src is falsey\n    if (!src) {\n      return;\n    }\n\n    this.setOptions_(); // add main playlist controller options\n\n    this.options_.src = expandDataUri(this.source_.src);\n    this.options_.tech = this.tech_;\n    this.options_.externVhs = Vhs;\n    this.options_.sourceType = simpleTypeFromSourceType(type); // Whenever we seek internally, we should update the tech\n\n    this.options_.seekTo = time => {\n      this.tech_.setCurrentTime(time);\n    }; // pass player to allow for player level eventing on construction.\n\n\n    this.options_.player_ = this.player_;\n    this.playlistController_ = new PlaylistController(this.options_);\n    const playbackWatcherOptions = merge({\n      liveRangeSafeTimeDelta: SAFE_TIME_DELTA\n    }, this.options_, {\n      seekable: () => this.seekable(),\n      media: () => this.playlistController_.media(),\n      playlistController: this.playlistController_\n    });\n    this.playbackWatcher_ = new PlaybackWatcher(playbackWatcherOptions);\n    this.attachStreamingEventListeners_();\n    this.playlistController_.on('error', () => {\n      const player = videojs.players[this.tech_.options_.playerId];\n      let error = this.playlistController_.error;\n\n      if (typeof error === 'object' && !error.code) {\n        error.code = 3;\n      } else if (typeof error === 'string') {\n        error = {\n          message: error,\n          code: 3\n        };\n      }\n\n      player.error(error);\n    });\n    const defaultSelector = this.options_.bufferBasedABR ? Vhs.movingAverageBandwidthSelector(0.55) : Vhs.STANDARD_PLAYLIST_SELECTOR; // `this` in selectPlaylist should be the VhsHandler for backwards\n    // compatibility with < v2\n\n    this.playlistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : defaultSelector.bind(this);\n    this.playlistController_.selectInitialPlaylist = Vhs.INITIAL_PLAYLIST_SELECTOR.bind(this); // re-expose some internal objects for backwards compatibility with < v2\n\n    this.playlists = this.playlistController_.mainPlaylistLoader_;\n    this.mediaSource = this.playlistController_.mediaSource; // Proxy assignment of some properties to the main playlist\n    // controller. Using a custom property for backwards compatibility\n    // with < v2\n\n    Object.defineProperties(this, {\n      selectPlaylist: {\n        get() {\n          return this.playlistController_.selectPlaylist;\n        },\n\n        set(selectPlaylist) {\n          this.playlistController_.selectPlaylist = selectPlaylist.bind(this);\n        }\n\n      },\n      throughput: {\n        get() {\n          return this.playlistController_.mainSegmentLoader_.throughput.rate;\n        },\n\n        set(throughput) {\n          this.playlistController_.mainSegmentLoader_.throughput.rate = throughput; // By setting `count` to 1 the throughput value becomes the starting value\n          // for the cumulative average\n\n          this.playlistController_.mainSegmentLoader_.throughput.count = 1;\n        }\n\n      },\n      bandwidth: {\n        get() {\n          let playerBandwidthEst = this.playlistController_.mainSegmentLoader_.bandwidth;\n          const networkInformation = window$1.navigator.connection || window$1.navigator.mozConnection || window$1.navigator.webkitConnection;\n          const tenMbpsAsBitsPerSecond = 10e6;\n\n          if (this.options_.useNetworkInformationApi && networkInformation) {\n            // downlink returns Mbps\n            // https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink\n            const networkInfoBandwidthEstBitsPerSec = networkInformation.downlink * 1000 * 1000; // downlink maxes out at 10 Mbps. In the event that both networkInformationApi and the player\n            // estimate a bandwidth greater than 10 Mbps, use the larger of the two estimates to ensure that\n            // high quality streams are not filtered out.\n\n            if (networkInfoBandwidthEstBitsPerSec >= tenMbpsAsBitsPerSecond && playerBandwidthEst >= tenMbpsAsBitsPerSecond) {\n              playerBandwidthEst = Math.max(playerBandwidthEst, networkInfoBandwidthEstBitsPerSec);\n            } else {\n              playerBandwidthEst = networkInfoBandwidthEstBitsPerSec;\n            }\n          }\n\n          return playerBandwidthEst;\n        },\n\n        set(bandwidth) {\n          this.playlistController_.mainSegmentLoader_.bandwidth = bandwidth; // setting the bandwidth manually resets the throughput counter\n          // `count` is set to zero that current value of `rate` isn't included\n          // in the cumulative average\n\n          this.playlistController_.mainSegmentLoader_.throughput = {\n            rate: 0,\n            count: 0\n          };\n        }\n\n      },\n\n      /**\n       * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n       * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n       * the entire process after that - decryption, transmuxing, and appending - provided\n       * by `throughput`.\n       *\n       * Since the two process are serial, the overall system bandwidth is given by:\n       *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n       */\n      systemBandwidth: {\n        get() {\n          const invBandwidth = 1 / (this.bandwidth || 1);\n          let invThroughput;\n\n          if (this.throughput > 0) {\n            invThroughput = 1 / this.throughput;\n          } else {\n            invThroughput = 0;\n          }\n\n          const systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n          return systemBitrate;\n        },\n\n        set() {\n          videojs.log.error('The \"systemBandwidth\" property is read-only');\n        }\n\n      }\n    });\n\n    if (this.options_.bandwidth) {\n      this.bandwidth = this.options_.bandwidth;\n    }\n\n    if (this.options_.throughput) {\n      this.throughput = this.options_.throughput;\n    }\n\n    Object.defineProperties(this.stats, {\n      bandwidth: {\n        get: () => this.bandwidth || 0,\n        enumerable: true\n      },\n      mediaRequests: {\n        get: () => this.playlistController_.mediaRequests_() || 0,\n        enumerable: true\n      },\n      mediaRequestsAborted: {\n        get: () => this.playlistController_.mediaRequestsAborted_() || 0,\n        enumerable: true\n      },\n      mediaRequestsTimedout: {\n        get: () => this.playlistController_.mediaRequestsTimedout_() || 0,\n        enumerable: true\n      },\n      mediaRequestsErrored: {\n        get: () => this.playlistController_.mediaRequestsErrored_() || 0,\n        enumerable: true\n      },\n      mediaTransferDuration: {\n        get: () => this.playlistController_.mediaTransferDuration_() || 0,\n        enumerable: true\n      },\n      mediaBytesTransferred: {\n        get: () => this.playlistController_.mediaBytesTransferred_() || 0,\n        enumerable: true\n      },\n      mediaSecondsLoaded: {\n        get: () => this.playlistController_.mediaSecondsLoaded_() || 0,\n        enumerable: true\n      },\n      mediaAppends: {\n        get: () => this.playlistController_.mediaAppends_() || 0,\n        enumerable: true\n      },\n      mainAppendsToLoadedData: {\n        get: () => this.playlistController_.mainAppendsToLoadedData_() || 0,\n        enumerable: true\n      },\n      audioAppendsToLoadedData: {\n        get: () => this.playlistController_.audioAppendsToLoadedData_() || 0,\n        enumerable: true\n      },\n      appendsToLoadedData: {\n        get: () => this.playlistController_.appendsToLoadedData_() || 0,\n        enumerable: true\n      },\n      timeToLoadedData: {\n        get: () => this.playlistController_.timeToLoadedData_() || 0,\n        enumerable: true\n      },\n      buffered: {\n        get: () => timeRangesToArray(this.tech_.buffered()),\n        enumerable: true\n      },\n      currentTime: {\n        get: () => this.tech_.currentTime(),\n        enumerable: true\n      },\n      currentSource: {\n        get: () => this.tech_.currentSource_,\n        enumerable: true\n      },\n      currentTech: {\n        get: () => this.tech_.name_,\n        enumerable: true\n      },\n      duration: {\n        get: () => this.tech_.duration(),\n        enumerable: true\n      },\n      main: {\n        get: () => this.playlists.main,\n        enumerable: true\n      },\n      playerDimensions: {\n        get: () => this.tech_.currentDimensions(),\n        enumerable: true\n      },\n      seekable: {\n        get: () => timeRangesToArray(this.tech_.seekable()),\n        enumerable: true\n      },\n      timestamp: {\n        get: () => Date.now(),\n        enumerable: true\n      },\n      videoPlaybackQuality: {\n        get: () => this.tech_.getVideoPlaybackQuality(),\n        enumerable: true\n      }\n    });\n    this.tech_.one('canplay', this.playlistController_.setupFirstPlay.bind(this.playlistController_));\n    this.tech_.on('bandwidthupdate', () => {\n      if (this.options_.useBandwidthFromLocalStorage) {\n        updateVhsLocalStorage({\n          bandwidth: this.bandwidth,\n          throughput: Math.round(this.throughput)\n        });\n      }\n    });\n    this.playlistController_.on('selectedinitialmedia', () => {\n      // Add the manual rendition mix-in to VhsHandler\n      renditionSelectionMixin(this);\n    });\n    this.playlistController_.sourceUpdater_.on('createdsourcebuffers', () => {\n      this.setupEme_();\n    }); // the bandwidth of the primary segment loader is our best\n    // estimate of overall bandwidth\n\n    this.on(this.playlistController_, 'progress', function () {\n      this.tech_.trigger('progress');\n    }); // In the live case, we need to ignore the very first `seeking` event since\n    // that will be the result of the seek-to-live behavior\n\n    this.on(this.playlistController_, 'firstplay', function () {\n      this.ignoreNextSeekingEvent_ = true;\n    });\n    this.setupQualityLevels_(); // do nothing if the tech has been disposed already\n    // this can occur if someone sets the src in player.ready(), for instance\n\n    if (!this.tech_.el()) {\n      return;\n    }\n\n    this.mediaSourceUrl_ = window$1.URL.createObjectURL(this.playlistController_.mediaSource); // If we are playing HLS with MSE in Safari, add source elements for both the blob and manifest URLs.\n    // The latter will enable Airplay playback on receiver devices.\n\n    if ((videojs.browser.IS_ANY_SAFARI || videojs.browser.IS_IOS) && this.options_.overrideNative && this.options_.sourceType === 'hls' && typeof this.tech_.addSourceElement === 'function') {\n      this.tech_.addSourceElement(this.mediaSourceUrl_);\n      this.tech_.addSourceElement(this.source_.src);\n    } else {\n      this.tech_.src(this.mediaSourceUrl_);\n    }\n  }\n\n  createKeySessions_() {\n    const audioPlaylistLoader = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;\n    this.logger_('waiting for EME key session creation');\n    waitForKeySessionCreation({\n      player: this.player_,\n      sourceKeySystems: this.source_.keySystems,\n      audioMedia: audioPlaylistLoader && audioPlaylistLoader.media(),\n      mainPlaylists: this.playlists.main.playlists\n    }).then(() => {\n      this.logger_('created EME key session');\n      this.playlistController_.sourceUpdater_.initializedEme();\n    }).catch(err => {\n      this.logger_('error while creating EME key session', err);\n      this.player_.error({\n        message: 'Failed to initialize media keys for EME',\n        code: 3\n      });\n    });\n  }\n\n  handleWaitingForKey_() {\n    // If waitingforkey is fired, it's possible that the data that's necessary to retrieve\n    // the key is in the manifest. While this should've happened on initial source load, it\n    // may happen again in live streams where the keys change, and the manifest info\n    // reflects the update.\n    //\n    // Because videojs-contrib-eme compares the PSSH data we send to that of PSSH data it's\n    // already requested keys for, we don't have to worry about this generating extraneous\n    // requests.\n    this.logger_('waitingforkey fired, attempting to create any new key sessions');\n    this.createKeySessions_();\n  }\n  /**\n   * If necessary and EME is available, sets up EME options and waits for key session\n   * creation.\n   *\n   * This function also updates the source updater so taht it can be used, as for some\n   * browsers, EME must be configured before content is appended (if appending unencrypted\n   * content before encrypted content).\n   */\n\n\n  setupEme_() {\n    const audioPlaylistLoader = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;\n    const didSetupEmeOptions = setupEmeOptions({\n      player: this.player_,\n      sourceKeySystems: this.source_.keySystems,\n      media: this.playlists.media(),\n      audioMedia: audioPlaylistLoader && audioPlaylistLoader.media()\n    });\n    this.player_.tech_.on('keystatuschange', e => {\n      this.playlistController_.updatePlaylistByKeyStatus(e.keyId, e.status);\n    });\n    this.handleWaitingForKey_ = this.handleWaitingForKey_.bind(this);\n    this.player_.tech_.on('waitingforkey', this.handleWaitingForKey_);\n\n    if (!didSetupEmeOptions) {\n      // If EME options were not set up, we've done all we could to initialize EME.\n      this.playlistController_.sourceUpdater_.initializedEme();\n      return;\n    }\n\n    this.createKeySessions_();\n  }\n  /**\n   * Initializes the quality levels and sets listeners to update them.\n   *\n   * @method setupQualityLevels_\n   * @private\n   */\n\n\n  setupQualityLevels_() {\n    const player = videojs.players[this.tech_.options_.playerId]; // if there isn't a player or there isn't a qualityLevels plugin\n    // or qualityLevels_ listeners have already been setup, do nothing.\n\n    if (!player || !player.qualityLevels || this.qualityLevels_) {\n      return;\n    }\n\n    this.qualityLevels_ = player.qualityLevels();\n    this.playlistController_.on('selectedinitialmedia', () => {\n      handleVhsLoadedMetadata(this.qualityLevels_, this);\n    });\n    this.playlists.on('mediachange', () => {\n      handleVhsMediaChange(this.qualityLevels_, this.playlists);\n    });\n  }\n  /**\n   * return the version\n   */\n\n\n  static version() {\n    return {\n      '@videojs/http-streaming': version$4,\n      'mux.js': version$3,\n      'mpd-parser': version$2,\n      'm3u8-parser': version$1,\n      'aes-decrypter': version\n    };\n  }\n  /**\n   * return the version\n   */\n\n\n  version() {\n    return this.constructor.version();\n  }\n\n  canChangeType() {\n    return SourceUpdater.canChangeType();\n  }\n  /**\n   * Begin playing the video.\n   */\n\n\n  play() {\n    this.playlistController_.play();\n  }\n  /**\n   * a wrapper around the function in PlaylistController\n   */\n\n\n  setCurrentTime(currentTime) {\n    this.playlistController_.setCurrentTime(currentTime);\n  }\n  /**\n   * a wrapper around the function in PlaylistController\n   */\n\n\n  duration() {\n    return this.playlistController_.duration();\n  }\n  /**\n   * a wrapper around the function in PlaylistController\n   */\n\n\n  seekable() {\n    return this.playlistController_.seekable();\n  }\n  /**\n   * Abort all outstanding work and cleanup.\n   */\n\n\n  dispose() {\n    if (this.playbackWatcher_) {\n      this.playbackWatcher_.dispose();\n    }\n\n    if (this.playlistController_) {\n      this.playlistController_.dispose();\n    }\n\n    if (this.qualityLevels_) {\n      this.qualityLevels_.dispose();\n    }\n\n    if (this.tech_ && this.tech_.vhs) {\n      delete this.tech_.vhs;\n    }\n\n    if (this.mediaSourceUrl_ && window$1.URL.revokeObjectURL) {\n      window$1.URL.revokeObjectURL(this.mediaSourceUrl_);\n      this.mediaSourceUrl_ = null;\n    }\n\n    if (this.tech_) {\n      this.tech_.off('waitingforkey', this.handleWaitingForKey_);\n    }\n\n    super.dispose();\n  }\n\n  convertToProgramTime(time, callback) {\n    return getProgramTime({\n      playlist: this.playlistController_.media(),\n      time,\n      callback\n    });\n  } // the player must be playing before calling this\n\n\n  seekToProgramTime(programTime, callback, pauseAfterSeek = true, retryCount = 2) {\n    return seekToProgramTime({\n      programTime,\n      playlist: this.playlistController_.media(),\n      retryCount,\n      pauseAfterSeek,\n      seekTo: this.options_.seekTo,\n      tech: this.options_.tech,\n      callback\n    });\n  }\n  /**\n   * Adds the onRequest, onResponse, offRequest and offResponse functions\n   * to the VhsHandler xhr Object.\n   */\n\n\n  setupXhrHooks_() {\n    /**\n     * A player function for setting an onRequest hook\n     *\n     * @param {function} callback for request modifiction\n     */\n    this.xhr.onRequest = callback => {\n      addOnRequestHook(this.xhr, callback);\n    };\n    /**\n     * A player function for setting an onResponse hook\n     *\n     * @param {callback} callback for response data retrieval\n     */\n\n\n    this.xhr.onResponse = callback => {\n      addOnResponseHook(this.xhr, callback);\n    };\n    /**\n     * Deletes a player onRequest callback if it exists\n     *\n     * @param {function} callback to delete from the player set\n     */\n\n\n    this.xhr.offRequest = callback => {\n      removeOnRequestHook(this.xhr, callback);\n    };\n    /**\n     * Deletes a player onResponse callback if it exists\n     *\n     * @param {function} callback to delete from the player set\n     */\n\n\n    this.xhr.offResponse = callback => {\n      removeOnResponseHook(this.xhr, callback);\n    }; // Trigger an event on the player to notify the user that vhs is ready to set xhr hooks.\n    // This allows hooks to be set before the source is set to vhs when handleSource is called.\n\n\n    this.player_.trigger('xhr-hooks-ready');\n  }\n\n  attachStreamingEventListeners_() {\n    const playlistControllerEvents = ['seekablerangeschanged', 'bufferedrangeschanged', 'contentsteeringloadstart', 'contentsteeringloadcomplete', 'contentsteeringparsed'];\n    const playbackWatcher = ['gapjumped', 'playedrangeschanged']; // re-emit streaming events and payloads on the player.\n\n    playlistControllerEvents.forEach(eventName => {\n      this.playlistController_.on(eventName, metadata => {\n        this.player_.trigger(_extends({}, metadata));\n      });\n    });\n    playbackWatcher.forEach(eventName => {\n      this.playbackWatcher_.on(eventName, metadata => {\n        this.player_.trigger(_extends({}, metadata));\n      });\n    });\n  }\n\n}\n/**\n * The Source Handler object, which informs video.js what additional\n * MIME types are supported and sets up playback. It is registered\n * automatically to the appropriate tech based on the capabilities of\n * the browser it is running in. It is not necessary to use or modify\n * this object in normal usage.\n */\n\n\nconst VhsSourceHandler = {\n  name: 'videojs-http-streaming',\n  VERSION: version$4,\n\n  canHandleSource(srcObj, options = {}) {\n    const localOptions = merge(videojs.options, options); // If not opting to experimentalUseMMS, and playback is only supported with MediaSource, cannot handle source\n\n    if (!localOptions.vhs.experimentalUseMMS && !browserSupportsCodec('avc1.4d400d,mp4a.40.2', false)) {\n      return false;\n    }\n\n    return VhsSourceHandler.canPlayType(srcObj.type, localOptions);\n  },\n\n  handleSource(source, tech, options = {}) {\n    const localOptions = merge(videojs.options, options);\n    tech.vhs = new VhsHandler(source, tech, localOptions);\n    tech.vhs.xhr = xhrFactory();\n    tech.vhs.setupXhrHooks_();\n    tech.vhs.src(source.src, source.type);\n    return tech.vhs;\n  },\n\n  canPlayType(type, options) {\n    const simpleType = simpleTypeFromSourceType(type);\n\n    if (!simpleType) {\n      return '';\n    }\n\n    const overrideNative = VhsSourceHandler.getOverrideNative(options);\n    const supportsTypeNatively = Vhs.supportsTypeNatively(simpleType);\n    const canUseMsePlayback = !supportsTypeNatively || overrideNative;\n    return canUseMsePlayback ? 'maybe' : '';\n  },\n\n  getOverrideNative(options = {}) {\n    const {\n      vhs = {}\n    } = options;\n    const defaultOverrideNative = !(videojs.browser.IS_ANY_SAFARI || videojs.browser.IS_IOS);\n    const {\n      overrideNative = defaultOverrideNative\n    } = vhs;\n    return overrideNative;\n  }\n\n};\n/**\n * Check to see if either the native MediaSource or ManagedMediaSource\n * objectx exist and support an MP4 container with both H.264 video\n * and AAC-LC audio.\n *\n * @return {boolean} if  native media sources are supported\n */\n\nconst supportsNativeMediaSources = () => {\n  return browserSupportsCodec('avc1.4d400d,mp4a.40.2', true);\n}; // register source handlers with the appropriate techs\n\n\nif (supportsNativeMediaSources()) {\n  videojs.getTech('Html5').registerSourceHandler(VhsSourceHandler, 0);\n}\n\nvideojs.VhsHandler = VhsHandler;\nvideojs.VhsSourceHandler = VhsSourceHandler;\nvideojs.Vhs = Vhs;\n\nif (!videojs.use) {\n  videojs.registerComponent('Vhs', Vhs);\n}\n\nvideojs.options.vhs = videojs.options.vhs || {};\n\nif (!videojs.getPlugin || !videojs.getPlugin('reloadSourceOnError')) {\n  videojs.registerPlugin('reloadSourceOnError', reloadSourceOnError);\n}\n\nexport { LOCAL_STORAGE_KEY, Vhs, VhsHandler, VhsSourceHandler, emeKeySystems, expandDataUri, getAllPsshKeySystemsOptions, setupEmeOptions, waitForKeySessionCreation };\n"],
  "mappings": "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",
  "names": ["window$1", "request", "parseSidx", "duration", "type", "samples", "coneOfSilence", "stream", "win", "self", "toHexString", "text", "format", "typedArray", "i", "parsePat", "parsePmt", "discardEmulationPreventionBytes", "getId3Offset", "utils", "transmuxer", "moof", "mdat", "gop", "metadataStream", "id3", "parse", "box", "data", "index", "version", "timescale", "emsg", "result", "trak", "tkhd", "mdhd", "traf", "tfhd", "tfdt", "trun", "hdlr", "stsd", "captionStream", "log", "ONE_SECOND_IN_TS", "startTime", "isMuxed", "chosenRep", "timeUntilRebuffer", "seekable", "getMediaInfoForTime", "onError", "Stream", "decrypt", "Decrypter", "isArrayBufferView", "createTransferableMessage", "activeTrack", "activeGroup", "isExcluded", "excludeUntil", "logFn", "liveEdgeDelay", "document"]
}
